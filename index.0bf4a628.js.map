{"mappings":"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","sources":["src/app/math.ts","src/app/presets/preset.ts","src/app/ui/button.ts","src/app/ui/slider.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/ui/form.ts","src/app/presets/selector.ts","src/app/presets/empty.ts","src/app/renderer/color.ts","src/app/body.ts","src/app/world.ts","src/app/presets/planets.ts","src/app/presets/moons.ts","src/app/presets/binary.ts","src/app/presets/custom_simple.ts","src/app/presets/custom_binary.ts","src/app/renderer/command.ts","src/app/renderer/draw_circle.ts","src/app/renderer/draw_line.ts","src/app/renderer/program.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/tools/tool.ts","src/app/tools/body_adder.ts","src/app/tools/body_follower.ts","src/app/tools/body_mover.ts","src/app/tools/body_remover.ts","src/app/tools/camera_mover.ts","src/app/app.ts","src/main.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Clones this 2D vector.\n   * @returns The new vector.\n   */\n  public clone(): Vec2 {\n    return new Vec2(this.x, this.y);\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[1 * 3 + 0] * other.y;\n      result.x += this.elements[2 * 3 + 0];\n      result.y += this.elements[0 * 3 + 1] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[2 * 3 + 1];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    const els = this.elements;\n    result.elements[0 * 3 + 0] = els[1 * 3 + 1] * els[2 * 3 + 2] - els[1 * 3 + 2] * els[2 * 3 + 1];\n    result.elements[0 * 3 + 1] = els[0 * 3 + 2] * els[2 * 3 + 1] - els[0 * 3 + 1] * els[2 * 3 + 2];\n    result.elements[0 * 3 + 2] = els[0 * 3 + 1] * els[1 * 3 + 2] - els[0 * 3 + 2] * els[1 * 3 + 1];\n    result.elements[1 * 3 + 0] = els[1 * 3 + 2] * els[2 * 3 + 0] - els[1 * 3 + 0] * els[2 * 3 + 2];\n    result.elements[1 * 3 + 1] = els[0 * 3 + 0] * els[2 * 3 + 2] - els[0 * 3 + 2] * els[2 * 3 + 0];\n    result.elements[1 * 3 + 2] = els[0 * 3 + 2] * els[1 * 3 + 0] - els[0 * 3 + 0] * els[1 * 3 + 2];\n    result.elements[2 * 3 + 0] = els[1 * 3 + 0] * els[2 * 3 + 1] - els[1 * 3 + 1] * els[2 * 3 + 0];\n    result.elements[2 * 3 + 1] = els[0 * 3 + 1] * els[2 * 3 + 0] - els[0 * 3 + 0] * els[2 * 3 + 1];\n    result.elements[2 * 3 + 2] = els[0 * 3 + 0] * els[1 * 3 + 1] - els[0 * 3 + 1] * els[1 * 3 + 0];\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n\n  /**\n   * Returns the rotation matrix.\n   * @param angle The angle in radians.\n   * @returns The rotation matrix.\n   */\n  public static rotation(angle: number): Mat3 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    return new Mat3([c, s, 0.0, -s, c, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\n/**\n * Generic preset for generating worlds.\n */\nexport abstract class Preset {\n  /** Preset identifier. */\n  private _id: string;\n\n  /** Form used to set settings. */\n  private _form: Form|null;\n\n  /**\n   * @param id The preset identifier.\n   * @param form The preset form.\n   */\n  constructor(id: string, form: Form|null = null) {\n    this._id = id;\n    this._form = form;\n  }\n\n  /**\n   * Gets the preset's id;\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the preset's form.\n   */\n  get form(): Form|null {\n    return this._form;\n  }\n\n  /**\n   * Initialize the preset.\n   * @param world World to generate.\n   */\n  public abstract generate(world: World): void;\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'integer'|'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's root element. */\n  private _root: HTMLDivElement;\n\n  /** The slider's range input element. */\n  private _input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private _display: HTMLDivElement;\n\n  /** The slider's type. */\n  private _type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param initial The initial value.\n   * @param type The slider type.\n   */\n  constructor(slider: HTMLDivElement, min: number, max: number, initial: number, type: SliderType) {\n    this._root = slider;\n    this._input = this._root.querySelector('input') as HTMLInputElement;\n    this._display = this._root.querySelector('div') as HTMLDivElement;\n    this._type = type;\n\n    switch (this._type) {\n      case 'integer':\n        this._input.min = min.toString();\n        this._input.max = max.toString();\n        this._input.value = initial.toString();\n        this._input.step = 1.0.toString();\n        break;\n      case 'linear':\n        this._input.min = min.toString();\n        this._input.max = max.toString();\n        this._input.value = initial.toString();\n        this._input.step = 0.1.toString();\n        break;\n      case 'exponential':\n        this._input.min = Math.log10(min).toString();\n        this._input.max = Math.log10(max).toString();\n        this._input.value = Math.log10(initial).toString();\n        this._input.step = 0.1.toString();\n        break;\n    }\n\n    this._input.addEventListener('input', this.updateDisplay.bind(this));\n    this.updateDisplay();\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this._type) {\n      case 'integer':\n      case 'linear':\n        return this._input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this._input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this._type) {\n      case 'integer':\n      case 'linear':\n        this._input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this._input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this._type === 'integer') {\n      this._display.innerText = this.value.toString();\n    } else if (this.value < 0.01 && this.value != 0.0 || this.value > 9999.99)\n      this._display.innerText = this.value.toExponential(1);\n    else\n      this._display.innerText = this.value.toFixed(2);\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  /** Callback called when the state changes. */\n  private stateChangeCallback: (state: string) => void;\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n    this.stateChangeCallback = (_) => {};\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    if (this.state === name) return;\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n    this.stateChangeCallback(name);\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n    toggle.setOnDeactivated(() => this.onToggleDeactivated(name));\n  }\n\n  /**\n   * Sets the callback called when the state changes.\n   * @param callback The callback to set.\n   */\n  public setOnStateChange(callback: (state: string) => void): void {\n    this.stateChangeCallback = callback;\n  }\n\n  /**\n   * Callback for when a toggle is activated.\n   * @param name The name of the toggle that was activated.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n\n  /**\n   * Callback for when a toggle is deactivated.\n   * @param name The name of the toggle that was deactivated.\n   */\n  private onToggleDeactivated(name: string): void {\n    if (this.state === name) this.current = '';\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /** The toggle deactivation callback. */\n  private onDeactivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.onDeactivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnDeactivated(callback: () => void): void {\n    this.onDeactivatedCallback = callback;\n  }\n\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated)\n      this.onActivatedCallback();\n    else\n      this.onDeactivatedCallback();\n  }\n}\n","import {Button} from './button';\nimport {Slider, SliderType} from './slider';\nimport {Switch} from './switch';\nimport {Toggle} from './toggle';\n\n/**\n * Represents a form field.\n */\nexport type FormField = Slider|Toggle|Switch;\n\n/**\n * Represents a form. A form is a collection of form fields.\n */\nexport class Form {\n  /** The form fields. */\n  private _fields: Map<string, FormField>;\n\n  /** The form's root element. */\n  private _root: HTMLElement;\n\n  /** The form's cancel button. */\n  private _cancel: Button;\n\n  /** The form's submit button. */\n  private _submit: Button;\n\n  /**\n   * @param root The form's root element.\n   */\n  constructor(root: HTMLElement) {\n    this._fields = new Map<string, FormField>();\n    this._root = root;\n    this._cancel = new Button(this._root.querySelector('#cancel') as HTMLButtonElement);\n    this._submit = new Button(this._root.querySelector('#submit') as HTMLButtonElement);\n  }\n\n  /**\n   * Creates a new form.\n   * @param id Form identifier.\n   */\n  static create(id: string): Form {\n    return new Form(document.querySelector(`.form>#${id}`) as HTMLDivElement);\n  }\n\n  /**\n   * Adds a toggle field to the form.\n   * @param id The toggle's id.\n   */\n  public addToggle(id: string): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLButtonElement) {\n      this._fields.set(id, new Toggle(element));\n    }\n  }\n\n  /**\n   * Adds a switch to the form.\n   * @param id The switch's id.\n   * @param toggles The switch's toggles' ids.\n   */\n  public addSwitch(id: string, ...toggles: string[]): void {\n    const s = new Switch();\n    toggles.forEach(i => {\n      this.addToggle(i);\n      s.add(i, this._fields.get(i) as Toggle);\n    });\n    this._fields.set(id, s);\n  }\n\n  /**\n   * Adds a slider field to the form.\n   * @param id The slider's id.\n   * @param min The slider's minimum value.\n   * @param max The slider's maximum value.\n   * @param initial The slider's initial value.\n   * @param type The slider's type.\n   */\n  public addSlider(id: string, min: number, max: number, initial: number, type: SliderType): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLDivElement) {\n      this._fields.set(id, new Slider(element, min, max, initial, type));\n    }\n  }\n\n  /**\n   * Shows the form.\n   */\n  public show() {\n    this._root.classList.toggle('hidden', false);\n  }\n\n  /**\n   * Hides the form.\n   */\n  public hide() {\n    this._root.classList.toggle('hidden', true);\n  }\n\n  /**\n   * Checks if the form is open.\n   */\n  public get open(): boolean {\n    return !this._root.classList.contains('hidden');\n  }\n\n  /**\n   * Checks if the toggle with the given id is on.\n   * @param id The toggle's id.\n   * @returns True if the toggle is on, false otherwise.\n   */\n  public isOn(id: string): boolean {\n    return (this._fields.get(id) as Toggle).activated;\n  }\n\n  /**\n   * Gets the value of the slider with the given id.\n   * @param id The slider's id.\n   * @returns The slider's value.\n   */\n  public getValue(id: string): number {\n    return (this._fields.get(id) as Slider).value;\n  }\n\n  /**\n   * Gets the state of the switch with the given id.\n   * @param id The switch's id.\n   * @returns The switch's state.\n   */\n  public getState(id: string): string {\n    return (this._fields.get(id) as Switch).current;\n  }\n\n  /**\n   * Sets the state of the switch with the given id.\n   * @param id The switch's id.\n   * @param state The new state.\n   */\n  public setState(id: string, state: string): void {\n    (this._fields.get(id) as Switch).current = state;\n  }\n\n  /**\n   * Sets the form cancelled callback.\n   * @param callback The callback.\n   */\n  public setOnCancel(callback: () => void) {\n    this._cancel.setOnClick(callback);\n  }\n\n  /**\n   * Sets the form submitted callback.\n   * @param callback The callback.\n   */\n  public setOnSubmit(callback: () => void) {\n    this._submit.setOnClick(callback);\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Class used to select presets.\n */\nexport class Selector {\n  /** World to affect. */\n  private _world: World;\n\n  /** Presets available. */\n  private _presets: Preset[];\n\n  /** Preset chosen. */\n  private _selected: Preset|null;\n\n  /** Form used to select. */\n  private _form: Form;\n\n  /** Is the form open? */\n  private _open: boolean;\n\n  /**\n   * @param world The world to affect.\n   */\n  constructor(world: World) {\n    this._world = world;\n    this._presets = [];\n    this._selected = null;\n    this._form = Form.create('selector');\n    this._open = false;\n  }\n\n  /**\n   * Adds a preset to the selector.\n   * @param preset The preset to add.\n   */\n  public add(preset: Preset): void {\n    this._presets.push(preset);\n    this._form.addToggle(preset.id);\n  }\n\n  /**\n   * Finishes building the selector.\n   */\n  public finish(initial: string): void {\n    this._form.addSwitch('preset', ...this._presets.map(p => p.id));\n    this._form.setOnCancel(this.onSelectionCanceled.bind(this));\n    this._form.setOnSubmit(this.onSelectionSubmitted.bind(this));\n    this._selected = this._presets.find(p => p.id === initial)!;\n  }\n\n  /**\n   * Shows the selector.\n   */\n  public show(): void {\n    if (!this._open) {\n      this._form.show();\n      if (this._selected)\n        this._form.setState('preset', this._selected.id);\n    }\n    this._open = true;\n  }\n\n  /**\n   * Hides the selector.\n   */\n  public hide(): void {\n    if (this._selected && this._selected.form && this._selected.form.open) this._selected.form.hide();\n    if (this._form.open) this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Checks if the selector is open.\n   */\n  public get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * Applies the last selected preset.\n   */\n  public apply(): void {\n    this._world.clear();\n    if (this._selected) this._selected.generate(this._world);\n  }\n\n  /**\n   * Callback called when the selection form is canceled.\n   */\n  private onSelectionCanceled(): void {\n    this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Callback called when the selection form is submitted.\n   */\n  private onSelectionSubmitted(): void {\n    const state = this._form.getState('preset');\n    this._form.hide();\n\n    this._selected = this._presets.find(p => p.id === state)!;\n    if (this._selected.form) {\n      this._selected.form.show();\n      this._selected.form.setOnCancel(this.onSettingsCanceled.bind(this));\n      this._selected.form.setOnSubmit(this.onSettingsSubmitted.bind(this));\n    } else {\n      this.onSettingsSubmitted();\n    }\n  }\n\n  /**\n   * Callback called when the settings form is canceled.\n   */\n  private onSettingsCanceled(): void {\n    this._selected?.form?.hide();\n    this._form.show();\n  }\n\n  /**\n   * Callback called when the settings form is submitted.\n   */\n  private onSettingsSubmitted(): void {\n    this.apply();\n    this._selected?.form?.hide();\n    this._open = false;\n  }\n}\n","import {World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates an empty set.\n */\nexport class Empty extends Preset {\n  constructor() {\n    super('empty');\n  }\n\n  public override generate(_: World): void {\n    // Do nothing\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 200.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private _mass: number;\n  /** Body's radius. */\n  private _radius: number;\n  /** Body's position. */\n  private _position: Vec2;\n  /** Body's velocity. */\n  private _velocity: Vec2;\n  /** Body's color. */\n  public color: Color;\n  /** Is the body static? */\n  public static: boolean;\n  /** Has the body been destroyed? */\n  public destroyed: boolean;\n  /** Merge callbacks. */\n  private onMergeCallbacks: {(body: Body): void;}[];\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor() {\n    this.mass = 1.0;\n    this.position = new Vec2(0.0, 0.0);\n    this.velocity = new Vec2(0.0, 0.0);\n    this.color = Color.random().mul(0.8).add(new Color(0.2, 0.2, 0.2));\n    this.destroyed = false;\n    this.onMergeCallbacks = [];\n  }\n\n  /**\n   * Gets the body's position.\n   */\n  public get position(): Vec2 {\n    return this._position.clone();\n  }\n\n  /**\n   * Sets the body's position.\n   */\n  public set position(position: Vec2) {\n    this._position = new Vec2(position.x, position.y);\n  }\n\n  /**\n   * Gets the body's velocity.\n   */\n  public get velocity(): Vec2 {\n    return this._velocity;\n  }\n\n  /**\n   * Sets the body's velocity.\n   */\n  public set velocity(velocity: Vec2) {\n    this._velocity = new Vec2(velocity.x, velocity.y);\n  }\n\n  /**\n   * Gets the body's mass.\n   */\n  public get mass(): number {\n    return this._mass;\n  }\n\n  /**\n   * Sets the body's mass.\n   */\n  public set mass(mass: number) {\n    this._mass = mass;\n    this._radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Gets the body's radius.\n   */\n  public get radius(): number {\n    return this._radius;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    if (!this.static) this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Sets the merge callback.\n   * @param callback The callback.\n   */\n  public addOnMerge(callback: (body: Body) => void): void {\n    this.onMergeCallbacks.push(callback);\n  }\n\n  /**\n   * Removes a merge callback.\n   * @param callback The callback.\n   */\n  public removeOnMerge(callback: (body: Body) => void): void {\n    const index = this.onMergeCallbacks.indexOf(callback);\n    if (index >= 0) this.onMergeCallbacks.splice(index, 1);\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    let b = new Body();\n\n    b.mass = this.mass + other.mass;\n    b.position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(b.mass);\n    b.velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(b.mass);\n\n    const colorA = this.color.mul(this.mass / b.mass);\n    const colorB = other.color.mul(other.mass / b.mass);\n    b.color = colorA.add(colorB);\n\n    this.destroyed = true;\n    for (const c of other.onMergeCallbacks) c(b);\n    for (const c of this.onMergeCallbacks) c(b);\n    return b;\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param body Body to add.\n   */\n  public addBody(body: Body): void {\n    this.bodies.push(body);\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param body The body to remove.\n   */\n  public removeBody(body: Body): void {\n    this.bodies.splice(this.bodies.indexOf(body), 1);\n    body.destroyed = true;\n  }\n\n  /**\n   * Picks a body in the world.\n   * @param position The position to pick.\n   * @return The body at the position, or null if no body is at the position.\n   */\n  public pickBody(position: Vec2): Body|null {\n    for (let i = 0; i < this.bodies.length; i++) {\n      if (this.bodies[i].intersects(position)) return this.bodies[i];\n    }\n    return null;\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.position.sub(body2.position);\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.mass * body2.mass / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].position, this.bodies[i].radius, this.bodies[i].color, true);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {World, GRAVITY_CONSTANT} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a simple star system with a single star and planets.\n */\nexport class Planets extends Preset {\n  constructor() {\n    super('planets');\n  }\n\n  public override generate(world: World): void {\n    // Add star\n    const star = new Body();\n    star.mass = 100000.0;\n    world.addBody(star);\n\n    for (let i = 0; i < 8; ++i) {\n      const angle = Math.random() * Math.PI * 2;\n      const distance = (Math.random() * 0.1 + 1.0) * i * i * 0.5 + 2.0;\n\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * 10.0 + 1.0 + 10.0 * i;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity = body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * star.mass / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {GRAVITY_CONSTANT, World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a star system with planets and moons.\n */\nexport class Moons extends Preset {\n  constructor() {\n    super('moons');\n  }\n\n  public override generate(world: World): void {\n    // Add star\n    const star = new Body();\n    star.mass = 100000.0;\n    world.addBody(star);\n\n    for (let i = 0; i < 3; i++) {\n      const planet = new Body();\n      planet.mass = 1000.0 + 1000.0 * i;\n      planet.position = new Vec2(-20.0 - 10.0 * i * i * (1.0 + Math.random()), 0.0);\n      planet.velocity = planet.position.perpendicular().normalize().mul(\n          Math.sqrt(GRAVITY_CONSTANT * star.mass / planet.position.length()));\n      world.addBody(planet);\n\n      const moonCount = Math.floor(Math.random() * 3) + 1 + 3 * i;\n\n      for (let j = 0; j < moonCount; j++) {\n        const moon = new Body();\n        moon.mass = Math.random() * 2.0 + 1.0;\n\n        const angle = Math.random() * Math.PI * 2;\n        const distance = (Math.random() * 0.1 + 1.0) * j * j * 0.1 + 0.1 + planet.radius + moon.radius;\n\n        moon.position = planet.position.add(new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance));\n        moon.velocity = planet.velocity.add(moon.position.sub(planet.position)\n                                                .perpendicular()\n                                                .normalize()\n                                                .mul(Math.sqrt(GRAVITY_CONSTANT * planet.mass / distance)));\n        world.addBody(moon);\n      }\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {GRAVITY_CONSTANT, World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a binary star system.\n */\nexport class Binary extends Preset {\n  constructor() {\n    super('binary');\n  }\n\n  public override generate(world: World): void {\n    // Get settings from form\n    const starsMass = 1000.0;\n    const starsDistance = 0.15;\n    const bodyCount = 100;\n    const bodyMass = 1.0;\n    const bodyMassSpread = 1.0;\n    const bodyDistance = 4.0;\n    const bodyDistanceSpread = 0.8;\n\n    const bodyMinMass = Math.max(0.01, bodyMass * (1.0 - bodyMassSpread));\n    const bodyMaxMass = bodyMass * (1.0 + bodyMassSpread);\n    const bodyMinDistance = bodyDistance * (1.0 - bodyDistanceSpread);\n    const bodyMaxDistance = bodyDistance * (1.0 + bodyDistanceSpread);\n\n    // Add stars\n    const starA = new Body();\n    const starB = new Body();\n    starA.mass = starsMass;\n    starB.mass = starsMass;\n    starA.position.x = -starA.radius - starsDistance;\n    starB.position.x = +starB.radius + starsDistance;\n    const reducedMass = starsMass / 2.0;\n    starA.velocity = starA.position.perpendicular().normalize().mul(\n        Math.sqrt(GRAVITY_CONSTANT * reducedMass / (starA.position.length() * 2)));\n    starB.velocity = starB.position.perpendicular().normalize().mul(\n        Math.sqrt(GRAVITY_CONSTANT * reducedMass / (starB.position.length() * 2)));\n    world.addBody(starA);\n    world.addBody(starB);\n\n    for (let i = 0; i < bodyCount; ++i) {\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * (bodyMaxMass - bodyMinMass) + bodyMinMass;\n\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * (bodyMaxDistance - bodyMinDistance) + bodyMinDistance + starA.radius +\n          starB.radius + starsDistance + body.radius;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity =\n          body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * starsMass * 2.0 / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Form} from '../ui/form';\nimport {GRAVITY_CONSTANT, World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a custom system with a single star.\n */\nexport class CustomSimple extends Preset {\n  constructor() {\n    // Create form\n    const form = Form.create('customSimple');\n    form.addSlider('starMass', 0.1, 100000000.0, 1000.0, 'exponential');\n    form.addSlider('bodyCount', 1, 2000, 100, 'integer');\n    form.addSlider('bodyMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMassSpread', 0.0, 1.0, 0.5, 'linear');\n    form.addSlider('bodyDistance', 0.1, 25.0, 1.0, 'linear');\n    form.addSlider('bodyDistanceSpread', 0.0, 1.0, 0.5, 'linear');\n    super('customSimple', form);\n  }\n\n  public override generate(world: World): void {\n    // Get settings from form\n    const starMass = this.form!.getValue('starMass');\n    const bodyCount = this.form!.getValue('bodyCount');\n    const bodyMass = this.form!.getValue('bodyMass');\n    const bodyMassSpread = this.form!.getValue('bodyMassSpread');\n    const bodyDistance = this.form!.getValue('bodyDistance');\n    const bodyDistanceSpread = this.form!.getValue('bodyDistanceSpread');\n    \n    const bodyMinMass = Math.max(0.01, bodyMass * (1.0 - bodyMassSpread));\n    const bodyMaxMass = bodyMass * (1.0 + bodyMassSpread);\n    const bodyMinDistance = bodyDistance * (1.0 - bodyDistanceSpread);\n    const bodyMaxDistance = bodyDistance * (1.0 + bodyDistanceSpread);\n\n    // Add star\n    const star = new Body();\n    star.mass = starMass;\n    world.addBody(star);\n\n    for (let i = 0; i < bodyCount; ++i) {\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * (bodyMaxMass - bodyMinMass) + bodyMinMass;\n\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * (bodyMaxDistance - bodyMinDistance) + bodyMinDistance + star.radius + body.radius;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity = body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * starMass / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Form} from '../ui/form';\nimport {GRAVITY_CONSTANT, World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a binary star system.\n */\nexport class CustomBinary extends Preset {\n  constructor() {\n    // Create form\n    const form = Form.create('customBinary');\n    form.addSlider('starsMass', 0.1, 100000000.0, 1000.0, 'exponential');\n    form.addSlider('starsDistance', 0.1, 100.0, 0.15, 'exponential');\n    form.addSlider('bodyCount', 1, 2000, 100, 'integer');\n    form.addSlider('bodyMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMassSpread', 0.0, 1.0, 1.0, 'linear');\n    form.addSlider('bodyDistance', 0.1, 25.0, 4.0, 'linear');\n    form.addSlider('bodyDistanceSpread', 0.0, 1.0, 0.8, 'linear');\n    super('customBinary', form);\n  }\n\n  public override generate(world: World): void {\n    // Get settings from form\n    const starsMass = this.form!.getValue('starsMass');\n    const starsDistance = this.form!.getValue('starsDistance');\n    const bodyCount = this.form!.getValue('bodyCount');\n    const bodyMass = this.form!.getValue('bodyMass');\n    const bodyMassSpread = this.form!.getValue('bodyMassSpread');\n    const bodyDistance = this.form!.getValue('bodyDistance');\n    const bodyDistanceSpread = this.form!.getValue('bodyDistanceSpread');\n\n    const bodyMinMass = Math.max(0.01, bodyMass * (1.0 - bodyMassSpread));\n    const bodyMaxMass = bodyMass * (1.0 + bodyMassSpread);\n    const bodyMinDistance = bodyDistance * (1.0 - bodyDistanceSpread);\n    const bodyMaxDistance = bodyDistance * (1.0 + bodyDistanceSpread);\n\n    // Add stars\n    const starA = new Body();\n    const starB = new Body();\n    starA.mass = starsMass;\n    starB.mass = starsMass;\n    starA.position.x = -starA.radius - starsDistance;\n    starB.position.x = +starB.radius + starsDistance;\n    const reducedMass = starsMass / 2.0;\n    starA.velocity = starA.position.perpendicular().normalize().mul(\n        Math.sqrt(GRAVITY_CONSTANT * reducedMass / (starA.position.length() * 2)));\n    starB.velocity = starB.position.perpendicular().normalize().mul(\n        Math.sqrt(GRAVITY_CONSTANT * reducedMass / (starB.position.length() * 2)));\n    world.addBody(starA);\n    world.addBody(starB);\n\n    for (let i = 0; i < bodyCount; ++i) {\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * (bodyMaxMass - bodyMinMass) + bodyMinMass;\n\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * (bodyMaxDistance - bodyMinDistance) + bodyMinDistance + starA.radius +\n          starB.radius + starsDistance + body.radius;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity =\n          body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * starsMass * 2.0 / distance));\n      world.addBody(body);\n    }\n  }\n}\n","/**\n * Draw command base class.\n */\nexport class Command {\n  /** Should trails be drawn? */\n  public drawTrails: boolean;\n\n  /**\n   * @param drawTrails Should trails be drawn?\n   */\n  constructor(drawTrails: boolean) {\n    this.drawTrails = drawTrails;\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\nimport {Command} from './command';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle extends Command {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center.\n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   * @param drawTrails Whether to draw trails.\n   */\n  constructor(center: Vec2, radius: number, color: Color, drawTrails: boolean) {\n    super(drawTrails);\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\nimport {Command} from './command';\n\n/**\n * Represents a command used to draw an line on the screen.\n */\nexport class DrawLine extends Command {\n  /** Start of the line. */\n  public start: Vec2;\n  /** End of the line. */\n  public end: Vec2;\n  /** Thickness of the line. */\n  public thickness: number;\n  /** Color of the line. */\n  public color: Color;\n\n  /**\n   * @param start Start position of the line.\n   * @param end End position of the line.\n   * @param thickness Thickness of the line.\n   * @param color Color of the line.\n   */\n  constructor(start: Vec2, end: Vec2, thickness: number, color: Color) {\n    super(false);\n    this.start = start;\n    this.end = end;\n    this.thickness = thickness;\n    this.color = color;\n  }\n}\n","/**\n * WebGL program wrapper.\n */\nexport class Program {\n  /** Context used. */\n  private _context: WebGLRenderingContext;\n\n  /** Vertex shader. */\n  private _vs: WebGLShader;\n\n  /** Fragment shader. */\n  private _fs: WebGLShader;\n\n  /** Shader program. */\n  private _program: WebGLProgram;\n\n  /**\n   * @param context Context used.\n   * @param vs Vertex shader source code.\n   * @param fs Fragment shader source code.\n   */\n  constructor(context: WebGLRenderingContext, vs: string, fs: string) {\n    this._context = context;\n    this._vs = this.createShader(this._context.VERTEX_SHADER, vs);\n    this._fs = this.createShader(this._context.FRAGMENT_SHADER, fs);\n\n    const program = this._context.createProgram()!;\n    this._context.attachShader(program, this._vs);\n    this._context.attachShader(program, this._fs);\n    this._context.linkProgram(program);\n    if (!this._context.getProgramParameter(program, this._context.LINK_STATUS))\n      throw new Error(this._context.getProgramInfoLog(program)!);\n    this._program = program;\n  }\n\n  /**\n   * Uses the program.\n   */\n  public use(): void {\n    this._context.useProgram(this._program);\n  }\n\n  /**\n   * Gets the attribute location.\n   * @param name Name of attribute.\n   * @returns Attribute location.\n   */\n  public getAttributeLocation(name: string): number {\n    return this._context.getAttribLocation(this._program, name);\n  }\n\n  /**\n   * Gets the uniform location.\n   * @param name Name of uniform.\n   * @returns Uniform location.\n   */\n  public getUniformLocation(name: string): WebGLUniformLocation {\n    return this._context.getUniformLocation(this._program, name)!;\n  }\n\n  /**\n   * Creates a shader.\n   * @param type Type of shader.\n   * @param source Source code of shader.\n   * @returns Shader.\n   */\n  private createShader(type: number, source: string): WebGLShader {\n    const shader = this._context.createShader(type)!;\n    this._context.shaderSource(shader, source);\n    this._context.compileShader(shader);\n    if (!this._context.getShaderParameter(shader, this._context.COMPILE_STATUS))\n      throw new Error(this._context.getShaderInfoLog(shader)!);\n    return shader;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private _transform: Mat3;\n\n  /** View position. */\n  private _position: Vec2;\n\n  /** View scale. */\n  private _scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  /** Canvas width. */\n  private width: number;\n\n  /** Canvas height. */\n  private height: number;\n\n  /** View change callback. */\n  private onViewChangeCallback: () => void;\n\n  /** Zoom change callback. */\n  private onZoomChangeCallback: () => void;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.aspectRatio = height / width;\n    this.width = width;\n    this.height = height;\n    this.onViewChangeCallback = () => {};\n    this.onZoomChangeCallback = () => {};\n    this.reset();\n  }\n\n  /**\n   * Gets the transform matrix.\n   */\n  public get transform(): Mat3 {\n    return this._transform;\n  }\n\n  /**\n   * Sets the view's position.\n   */\n  public set position(position: Vec2) {\n    this._position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Gets the view's position.\n   */\n  public get position(): Vec2 {\n    return this._position.clone();\n  }\n\n  /**\n   * Sets the view's scale.\n   */\n  public set scale(scale: number) {\n    this._scale = scale;\n    this.updateTransform();\n    this.onZoomChangeCallback();\n  }\n\n  /**\n   * Gets the view's scale.\n   */\n  public get scale(): number {\n    return this._scale;\n  }\n\n  /**\n   * Resets this view.\n   */\n  public reset(): void {\n    this.position = new Vec2(0.0, 0.0);\n    this.scale = 1.0;\n    this.triggerViewChange();\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.position = this.position.add(delta.div(this.scale));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.scale /= multiplier;\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    let normalized = new Vec2(screen.x / this.width, screen.y / this.height);\n    normalized = normalized.sub(new Vec2(0.5, 0.5)).mul(2.0);\n    normalized.y *= -1.0;\n    return this.transform.inverse().mul(normalized);\n  }\n\n  /**\n   * Triggers the view change callback.\n   */\n  public triggerViewChange(): void {\n    this.onViewChangeCallback();\n  }\n\n  /**\n   * Sets the view change callback.\n   * @param callback The callback.\n   */\n  public setOnViewChange(callback: () => void): void {\n    this.onViewChangeCallback = callback;\n  }\n\n  /**\n   * Sets the zoom change callback.\n   * @param callback The callback.\n   */\n  public setOnZoomChange(callback: () => void): void {\n    this.onZoomChangeCallback = callback;\n  }\n\n  /**\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this._transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {Command} from './command';\nimport {DrawCircle} from './draw_circle';\nimport {DrawLine} from './draw_line';\nimport {Program} from './program';\nimport {View} from './view';\n\nexport {View};\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/** Line thickness scale. */\nconst LINE_THICKNESS_SCALE = 0.0025;\n\n/** Trail thickness scale. */\nconst TRAIL_THICKNESS_SCALE = 0.5;\n\n/** Trail minimum thickness scale. */\nconst TRAIL_MIN_THICKNESS = 0.0015;\n\n/** Arrow head scale. */\nconst ARROW_HEAD_SCALE: number = 0.02;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: Command[];\n\n  /** View used. */\n  public view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Shader program used for drawing. */\n  private drawProgram: Program;\n\n  /** Draw program position attribute location. */\n  private drawPositionAttribute: number;\n\n  /** Draw program transform uniform location. */\n  private drawTransformUniform: WebGLUniformLocation;\n\n  /** Draw program color uniform location. */\n  private drawColorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count. */\n  private circle: [number, number];\n\n  /** Line first vertice and vertex count. */\n  private line: [number, number];\n\n  /** Quad first vertice and vertex count. */\n  private quad: [number, number];\n\n  /** Trails framebuffer. */\n  private trailsFramebuffer: WebGLFramebuffer;\n\n  /** Trails texture. */\n  private trailsTexture: WebGLTexture;\n\n  /** Shader program used for trails. */\n  private trailsProgram: Program;\n\n  /** Trails program position attribute location. */\n  private trailsPositionAttribute: number;\n\n  /** Trails program texture uniform location. */\n  private trailsTextureUniform: WebGLUniformLocation;\n\n  /** Should trails be drawn? */\n  private _trailsEnabled: boolean;\n\n  /** Shader program used for fade. */\n  private fadeProgram: Program;\n\n  /** Fade program position attribute location. */\n  private fadePositionAttribute: number;\n\n  /** Fade program value uniform location. */\n  private fadeValueUniform: WebGLUniformLocation;\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n    this.initTrails();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n    this.view.setOnViewChange(() => {\n      if (this._trailsEnabled) {\n        // Clear the trails texture.\n        this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.trailsFramebuffer);\n        this.context.viewport(0, 0, this.canvas.width, this.canvas.height);\n        this.context.clearColor(0.0, 0.0, 0.0, 0.0);\n        this.context.clear(this.context.COLOR_BUFFER_BIT);\n      }\n    });\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   * @param drawTrails Should trails be drawn?\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color, drawTrails: boolean): void {\n    this.commands.push(new DrawCircle(center, radius, color, drawTrails));\n  }\n\n  /**\n   * Draws a line.\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param thickness Thickness of the line.\n   * @param color The color of the line.\n   */\n  public drawLine(start: Vec2, end: Vec2, thickness: number, color: Color): void {\n    this.commands.push(new DrawLine(start, end, thickness, color));\n  }\n\n  /**\n   * Draws an arrow.\n   * @param start The start of the arrow.\n   * @param end The end of the arrow.\n   * @param color The color of the arrow.\n   */\n  public drawArrow(start: Vec2, end: Vec2, color: Color): void {\n    const offset = end.sub(start);\n    const perpendicular = offset.perpendicular();\n    const diagonal1 = offset.add(perpendicular).normalize();\n    const diagonal2 = offset.sub(perpendicular).normalize();\n    this.drawLine(start, end, 1.0 / this.view.scale, color);\n    this.drawLine(end, end.add(diagonal1.mul(-ARROW_HEAD_SCALE / this.view.scale)), 1.0 / this.view.scale, color);\n    this.drawLine(end, end.add(diagonal2.mul(-ARROW_HEAD_SCALE / this.view.scale)), 1.0 / this.view.scale, color)\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    if (this._trailsEnabled) {\n      // Bind the trails framebuffer.\n      this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.trailsFramebuffer);\n      this.context.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n      // Bind the buffers and shaders.\n      this.drawProgram.use();\n      this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n      this.context.vertexAttribPointer(this.drawPositionAttribute, 2, this.context.FLOAT, false, 0, 0);\n      this.context.enableVertexAttribArray(this.drawPositionAttribute);\n\n      // Draw all commands that require trails.\n      for (let command of this.commands) this.executeTrailCommand(command);\n\n      // Apply fade.\n      this.context.enable(this.context.BLEND);\n      this.context.blendEquation(this.context.FUNC_REVERSE_SUBTRACT);\n      this.context.blendFuncSeparate(this.context.SRC_ALPHA, this.context.ONE, this.context.ZERO, this.context.ONE);\n\n      this.fadeProgram.use();\n      this.context.uniform1f(this.fadeValueUniform, 1.0 / 255.0);\n      this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n      this.context.vertexAttribPointer(this.fadePositionAttribute, 2, this.context.FLOAT, false, 0, 0);\n      this.context.enableVertexAttribArray(this.fadePositionAttribute);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.quad[0], this.quad[1]);\n\n      this.context.disable(this.context.BLEND);\n    }\n\n    // Clear the screen with the background color.\n    this.context.bindFramebuffer(this.context.FRAMEBUFFER, null);\n    this.context.viewport(0, 0, this.canvas.width, this.canvas.height);\n    this.context.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    if (this._trailsEnabled) {\n      // Draw trails texture.\n      this.trailsProgram.use();\n      this.context.bindTexture(this.context.TEXTURE_2D, this.trailsTexture);\n      this.context.uniform1i(this.trailsTextureUniform, 0);\n\n      this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n      this.context.vertexAttribPointer(this.trailsPositionAttribute, 2, this.context.FLOAT, false, 0, 0);\n      this.context.enableVertexAttribArray(this.trailsPositionAttribute);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.quad[0], this.quad[1]);\n    }\n\n    // Bind the buffers and shaders.\n    this.drawProgram.use();\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.drawPositionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.drawPositionAttribute);\n\n    // Execute all draw commands.\n    for (let command of this.commands) this.executeCommand(command);\n\n    this.commands = [];\n  }\n\n  /**\n   * Enables or disables trails.\n   */\n  public set trailsEnabled(enabled: boolean) {\n    this._trailsEnabled = enabled;\n    if (this._trailsEnabled) {\n      // Clear the trails texture.\n      this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.trailsFramebuffer);\n      this.context.viewport(0, 0, this.canvas.width, this.canvas.height);\n      this.context.clearColor(0.0, 0.0, 0.0, 0.0);\n      this.context.clear(this.context.COLOR_BUFFER_BIT);\n    }\n  }\n\n  /**\n   * Checks if trails are enabled.\n   */\n  public get trailsEnabled(): boolean {\n    return this._trailsEnabled;\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create draw program.\n    this.drawProgram = new Program(\n        this.context, `\n        attribute vec2 position;\n\n        uniform mat3 transform;\n\n        void main() {\n          vec2 transformed = (transform * vec3(position, 1.0)).xy;\n          gl_Position = vec4(transformed, 0.0, 1.0);\n        }\n        `,\n        `\n        uniform mediump vec3 color;\n\n        void main() {\n          gl_FragColor = vec4(color, 1.0);\n        }\n        `);\n\n    // Get program attribute locations.\n    this.drawPositionAttribute = this.drawProgram.getAttributeLocation('position');\n\n    // Get shader program uniform locations.\n    this.drawTransformUniform = this.drawProgram.getUniformLocation('transform');\n    this.drawColorUniform = this.drawProgram.getUniformLocation('color');\n\n    // Create trails program.\n    this.trailsProgram = new Program(\n        this.context, `\n      attribute vec2 position;\n\n      varying vec2 uvs;\n      \n      void main() {\n        uvs = (position + 1.0) / 2.0;\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n      `,\n        `\n      precision mediump float;\n\n      uniform sampler2D trails;\n\n      varying vec2 uvs;\n\n      void main() {\n        vec4 color = texture2D(trails, uvs);\n        if (color.a == 0.0) discard;\n        gl_FragColor = vec4(texture2D(trails, uvs));\n      }\n      `);\n\n    // Get program attribute locations.\n    this.trailsPositionAttribute = this.trailsProgram.getAttributeLocation('position');\n\n    // Get shader program uniform locations.\n    this.trailsTextureUniform = this.trailsProgram.getUniformLocation('trails');\n\n    // Create fade program.\n    this.fadeProgram = new Program(\n        this.context, `\n      attribute vec2 position;\n      \n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n      `,\n        `\n      precision mediump float;\n\n      uniform float fade;\n\n      void main() {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, fade);\n      }\n      `);\n\n    // Get program attribute locations.\n    this.fadePositionAttribute = this.fadeProgram.getAttributeLocation('position');\n\n    // Get shader program uniform locations.\n    this.fadeValueUniform = this.fadeProgram.getUniformLocation('fade');\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate line vertices\n    this.line = [vertices.length / 2, 4];\n    vertices.push(-1.0, 0.0);\n    vertices.push(-1.0, 1.0);\n    vertices.push(+1.0, 1.0);\n    vertices.push(+1.0, 0.0);\n\n    // Generate quad vertices\n    this.quad = [vertices.length / 2, 4];\n    vertices.push(-1.0, -1.0);\n    vertices.push(-1.0, +1.0);\n    vertices.push(+1.0, +1.0);\n    vertices.push(+1.0, -1.0);\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n\n  /**\n   * Initializes the trails framebuffer and texture.\n   */\n  private initTrails(): void {\n    this._trailsEnabled = false;\n\n    // Create framebuffer\n    this.trailsFramebuffer = this.context.createFramebuffer()!;\n    this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.trailsFramebuffer);\n\n    // Create texture\n    this.trailsTexture = this.context.createTexture()!;\n    this.context.bindTexture(this.context.TEXTURE_2D, this.trailsTexture);\n    this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MAG_FILTER, this.context.NEAREST);\n    this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_MIN_FILTER, this.context.NEAREST);\n    this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_S, this.context.CLAMP_TO_EDGE);\n    this.context.texParameteri(this.context.TEXTURE_2D, this.context.TEXTURE_WRAP_T, this.context.CLAMP_TO_EDGE);\n    this.context.texImage2D(\n        this.context.TEXTURE_2D, 0, this.context.RGBA, this.canvas.width, this.canvas.height, 0, this.context.RGBA,\n        this.context.UNSIGNED_BYTE, null);\n\n    // Attach texture to framebuffer\n    this.context.framebufferTexture2D(\n        this.context.FRAMEBUFFER, this.context.COLOR_ATTACHMENT0, this.context.TEXTURE_2D, this.trailsTexture, 0);\n\n    // Check framebuffer status\n    if (this.context.checkFramebufferStatus(this.context.FRAMEBUFFER) !== this.context.FRAMEBUFFER_COMPLETE) {\n      throw new Error('Trails framebuffer is not complete');\n    }\n\n    // Clear framebuffer.\n    this.context.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Unbind framebuffer\n    this.context.bindFramebuffer(this.context.FRAMEBUFFER, null);\n  }\n\n  /**\n   * Executes a draw trail command.\n   * @param command Command to execute.\n   */\n  private executeTrailCommand(command: Command): void {\n    if (!command.drawTrails) return;\n\n    if (command instanceof DrawCircle) {\n      const radius = Math.max(command.radius * TRAIL_THICKNESS_SCALE, TRAIL_MIN_THICKNESS / this.view.scale);\n      const translation = Mat3.translation(command.center);\n      const scale = Mat3.scale(new Vec2(radius, radius));\n      const transform = scale.mul(translation).mul(this.view.transform);\n\n      this.context.uniformMatrix3fv(this.drawTransformUniform, false, transform.elements);\n      this.context.uniform3f(this.drawColorUniform, command.color.r, command.color.g, command.color.b);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n    } else if (command instanceof DrawLine) {\n      const translation = Mat3.translation(command.start);\n      const direction = command.end.sub(command.start);\n      const scale = Mat3.scale(new Vec2(command.thickness * LINE_THICKNESS_SCALE, direction.length()));\n      const rotation = Mat3.rotation(Math.atan2(direction.y, direction.x) - Math.PI / 2);\n      const transform = scale.mul(rotation).mul(translation).mul(this.view.transform);\n\n      this.context.uniformMatrix3fv(this.drawTransformUniform, false, transform.elements);\n      this.context.uniform3f(this.drawColorUniform, command.color.r, command.color.g, command.color.b);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.line[0], this.line[1]);\n    }\n  }\n\n  /**\n   * Executes a draw command.\n   * @param command Command to execute.\n   */\n  private executeCommand(command: Command): void {\n    if (command instanceof DrawCircle) {\n      const radius = Math.max(command.radius, TRAIL_MIN_THICKNESS / this.view.scale);\n      const translation = Mat3.translation(command.center);\n      const scale = Mat3.scale(new Vec2(radius, radius));\n      const transform = scale.mul(translation).mul(this.view.transform);\n\n      this.context.uniformMatrix3fv(this.drawTransformUniform, false, transform.elements);\n      this.context.uniform3f(this.drawColorUniform, command.color.r, command.color.g, command.color.b);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n    } else if (command instanceof DrawLine) {\n      const translation = Mat3.translation(command.start);\n      const direction = command.end.sub(command.start);\n      const scale = Mat3.scale(new Vec2(command.thickness * LINE_THICKNESS_SCALE, direction.length()));\n      const rotation = Mat3.rotation(Math.atan2(direction.y, direction.x) - Math.PI / 2);\n      const transform = scale.mul(rotation).mul(translation).mul(this.view.transform);\n\n      this.context.uniformMatrix3fv(this.drawTransformUniform, false, transform.elements);\n      this.context.uniform3f(this.drawColorUniform, command.color.r, command.color.g, command.color.b);\n      this.context.drawArrays(this.context.TRIANGLE_FAN, this.line[0], this.line[1]);\n    }\n  }\n}\n","import {Vec2} from '../math';\nimport {Renderer} from '../renderer';\n\n/**\n * Generic tool class.\n */\nexport abstract class Tool {\n  /**\n   * Called when the tool is activated.\n   */\n  public abstract activate(): void;\n\n  /**\n   * Called every frame to draw tool related stuff.\n   * @param renderer The renderer to draw to.\n   */\n  public abstract draw(renderer: Renderer): void;\n\n  /**\n   * Called when the mouse button is pressed.\n   * @param position Mouse position.\n   */\n  public abstract onMouseDown(position: Vec2): void;\n\n  /**\n   * Called when the mouse button is released.\n   * @param position Mouse position.\n   */\n  public abstract onMouseUp(position: Vec2): void;\n\n  /**\n   * Called when the mouse is moved.\n   * @param position Mouse position.\n   */\n  public abstract onMouseMove(position: Vec2): void;\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Renderer, View} from '../renderer';\nimport * as UI from '../ui';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/** Velocity multiplier for throwing bodies. */\nconst VELOCITY_MULTIPLIER = 0.0004;\n\n/**\n * Tool for adding bodies to the world.\n */\nexport class BodyAdder extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Slider which indicates the body's mass. */\n  private mass: UI.Slider;\n\n  /** Body being added. */\n  private body: Body;\n\n  /** Mouse down position. */\n  private mouseDown: Vec2|null;\n\n  /** Mouse position. */\n  private mousePos: Vec2;\n\n  /** Has the mouse moved? */\n  private mouseMoved: boolean;\n\n  /**\n   * @param world The world to add bodies to.\n   * @param view The view being used to render.\n   * @param mass The slider which indicates the body's mass.\n   */\n  constructor(world: World, view: View, mass: UI.Slider) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.mass = mass;\n  }\n\n  public override activate(): void {\n    this.body = new Body();\n    this.mouseDown = null;\n    this.mouseMoved = false;\n  }\n\n  public override draw(renderer: Renderer): void {\n    if (!this.mouseMoved) return;\n\n    this.body.mass = this.mass.value;\n    renderer.drawCircle(this.body.position, this.body.radius, this.body.color, false);\n    if (this.mouseDown) renderer.drawArrow(this.body.position, this.view.screenToWorld(this.mousePos), this.body.color);\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.body.position = this.view.screenToWorld(position);\n    this.mouseDown = position;\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    if (this.mouseDown) {\n      let delta = position.sub(this.mouseDown);\n      delta.y *= -1.0;\n      this.body.position = this.view.screenToWorld(this.mouseDown);\n      this.body.velocity = delta.mul(VELOCITY_MULTIPLIER / this.view.scale);\n      this.world.addBody(this.body);\n\n      this.mouseDown = null;\n      this.body = new Body();\n      this.body.position = this.view.screenToWorld(position);\n    }\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    this.mousePos = position;\n    if (!this.mouseDown) this.body.position = this.view.screenToWorld(this.mousePos);\n    this.mouseMoved = true;\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for making the view follow a body.\n */\nexport class BodyFollower extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Body being followed. */\n  private body: Body|null;\n\n  /** Callback used. */\n  private callback: (body: Body) => void;\n\n  /**\n   * @param world The world where bodies will be followed.\n   * @param view The view that will be moved.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.body = null;\n    this.callback = this.setBody.bind(this);\n  }\n\n  public override activate(): void {\n    this.body = null;\n  }\n\n  public override draw(): void {\n    if (this.body) {\n      if (this.body.destroyed) this.setBody(null);\n      else this.view.position = this.body.position.mul(-1.0);\n    }\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.setBody(this.world.pickBody(this.view.screenToWorld(position)));\n  }\n\n  public override onMouseUp(_: Vec2): void {\n    // Do nothing\n  }\n\n  public override onMouseMove(_: Vec2): void {\n    // Do nothing\n  }\n\n  private setBody(body: Body|null): void {\n    if (this.body) this.body.removeOnMerge(this.callback);\n    this.body = body;\n    if (this.body) this.body.addOnMerge(this.callback);\n    this.view.triggerViewChange();\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Renderer, View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for moving bodies in the world.\n */\nexport class BodyMover extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Body being moved. */\n  private body: Body|null;\n\n  /** Callback. */\n  private callback: (body: Body) => void;\n\n  /**\n   * @param world The world whoose bodies will be moved.\n   * @param view The view being used to render.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.callback = this.setBody.bind(this);\n  }\n\n  public override activate(): void {\n    this.body = null;\n  }\n\n  public override draw(_: Renderer): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.setBody(this.world.pickBody(this.view.screenToWorld(position)));\n    if (this.body) this.body.position = this.view.screenToWorld(position);\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    if (this.body) {\n      this.body.position = this.view.screenToWorld(position);\n      this.setBody(null);\n    }\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (this.body) this.body.position = this.view.screenToWorld(position);\n  }\n\n  private setBody(body: Body|null): void {\n    if (this.body) {\n      this.body.removeOnMerge(this.callback);\n      this.body.static = false;\n    }\n\n    this.body = body;\n\n    if (this.body) {\n      this.body.static = true;\n      this.body?.addOnMerge(this.callback);\n    }\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for removing bodies to the world.\n */\nexport class BodyRemover extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /**\n   * @param world The world to remove bodies from.\n   * @param view The view being used to render.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n  }\n\n  public override activate(): void {\n    // Do nothing.\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(_: Vec2): void {\n    // Do nothing.\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    const body = this.world.pickBody(this.view.screenToWorld(position));\n    if (body) this.world.removeBody(body);\n  }\n\n  public override onMouseMove(_: Vec2): void {\n    // Do nothing.\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\n\nimport {Tool} from './tool';\n\n/** Camera movement sensibility. */\nconst SENSIBILITY = 0.001;\n\n/**\n * Tool for moving the camera.\n */\nexport class CameraMover extends Tool {\n  /** View being used to render. */\n  private view: View;\n\n  /** Last mouse position. */\n  private lastPosition: Vec2|null;\n\n  /**\n   * @param view The view being used to render.\n   */\n  constructor(view: View) {\n    super();\n    this.view = view;\n  }\n\n  public override activate(): void {\n    this.lastPosition = null;\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.lastPosition = position;\n  }\n\n  public override onMouseUp(_: Vec2): void {\n    this.lastPosition = null;\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.lastPosition) return;\n\n    let delta = position.sub(this.lastPosition);\n    delta.y *= -1.0;\n    this.lastPosition = position;\n\n    this.view.move(delta.mul(SENSIBILITY));\n    this.view.triggerViewChange();\n  }\n}\n","import {Vec2} from './math';\nimport * as Presets from './presets';\nimport {Renderer} from './renderer';\nimport * as Tools from './tools';\nimport * as UI from './ui';\nimport {World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.000002;\n\n/** Help page URL. */\nconst HELP_URL = 'https://riscadoa.com/portfolio/gravity-simulator/';\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Tools map. */\n  private tools: Map<string, Tools.Tool>;\n\n  /** Current tool. */\n  private tool: Tools.Tool|undefined;\n\n  /** Preset selector. */\n  private presetSelector: Presets.Selector;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Trails toggle. */\n  private trailsToggle: UI.Toggle;\n\n  /** Zoom in button. */\n  private zoomInButton: UI.Button;\n\n  /** Zoom out button. */\n  private zoomOutButton: UI.Button;\n\n  /** Help button. */\n  private helpButton: UI.Button;\n\n  /** Body adder toggle. */\n  private bodyAdderToggle: UI.Toggle;\n\n  /** Body remover toggle. */\n  private bodyRemoverToggle: UI.Toggle;\n\n  /** Body mover toggle. */\n  private bodyMoverToggle: UI.Toggle;\n\n  /** Camera mover toggle. */\n  private cameraMoverToggle: UI.Toggle;\n\n  /** Body follower toggle. */\n  private bodyFollowerToggle: UI.Toggle;\n\n  /** Tools switch. */\n  private toolSwitch: UI.Switch;\n\n  /** Simulation speed slider. */\n  private simulationSpeed: UI.Slider;\n\n  /** New body mass slider. */\n  private bodyMass: UI.Slider;\n\n  /** Last mouse position. */\n  private mousePos: Vec2;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n    this.renderer.view.setOnZoomChange(this.onMouseMove.bind(this));\n\n    // Create physics world.\n    this.world = new World();\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseDown();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mouseup', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseUp();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mousemove', e => {\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseMove();\n      e.preventDefault();\n    });\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      if (this.renderer.trailsEnabled) return;\n      this.renderer.view.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI sliders\n    this.bodyMass =\n        new UI.Slider(document.getElementById('bodyMass') as HTMLDivElement, 0.1, 100000000.0, 1.0, 'exponential');\n    this.bodyMass.value = 1.0;\n    this.simulationSpeed =\n        new UI.Slider(document.getElementById('simulationSpeed') as HTMLDivElement, 0.001, 100.0, 1.0, 'exponential');\n    this.simulationSpeed.value = 1.0;\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n    this.zoomInButton = new UI.Button(document.getElementById('zoomInButton') as HTMLButtonElement);\n    this.zoomOutButton = new UI.Button(document.getElementById('zoomOutButton') as HTMLButtonElement);\n    this.helpButton = new UI.Button(document.getElementById('helpButton') as HTMLButtonElement);\n\n    // Initialize UI toggles\n    this.trailsToggle = new UI.Toggle(document.getElementById('trailsToggle') as HTMLButtonElement);\n    this.bodyAdderToggle = new UI.Toggle(document.getElementById('bodyAdderToggle') as HTMLButtonElement);\n    this.bodyRemoverToggle = new UI.Toggle(document.getElementById('bodyRemoverToggle') as HTMLButtonElement);\n    this.bodyMoverToggle = new UI.Toggle(document.getElementById('bodyMoverToggle') as HTMLButtonElement);\n    this.cameraMoverToggle = new UI.Toggle(document.getElementById('cameraMoverToggle') as HTMLButtonElement);\n    this.bodyFollowerToggle = new UI.Toggle(document.getElementById('bodyFollowerToggle') as HTMLButtonElement);\n\n    // Initialize tools\n    this.tools = new Map<string, Tools.Tool>();\n    this.tools.set('bodyAdder', new Tools.BodyAdder(this.world, this.renderer.view, this.bodyMass));\n    this.tools.set('bodyRemover', new Tools.BodyRemover(this.world, this.renderer.view));\n    this.tools.set('bodyMover', new Tools.BodyMover(this.world, this.renderer.view));\n    this.tools.set('cameraMover', new Tools.CameraMover(this.renderer.view));\n    this.tools.set('bodyFollower', new Tools.BodyFollower(this.world, this.renderer.view));\n    this.tool = undefined;\n\n    // Intiailize UI tool switch\n    this.toolSwitch = new UI.Switch();\n    this.toolSwitch.add('bodyAdder', this.bodyAdderToggle);\n    this.toolSwitch.add('bodyRemover', this.bodyRemoverToggle);\n    this.toolSwitch.add('bodyMover', this.bodyMoverToggle);\n    this.toolSwitch.add('cameraMover', this.cameraMoverToggle);\n    this.toolSwitch.add('bodyFollower', this.bodyFollowerToggle);\n    this.toolSwitch.setOnStateChange(tool => {\n      this.tool = this.tools.get(tool);\n      if (this.tool) this.tool.activate();\n      if (tool == 'cameraMover') {\n        this.renderer.trailsEnabled = false;\n        this.trailsToggle.activated = false;\n      }\n    });\n\n    // Trails callbacks\n    this.trailsToggle.setOnActivated(() => {\n      this.renderer.trailsEnabled = true;\n      if (this.toolSwitch.current == 'cameraMover') this.toolSwitch.current = '';\n    });\n    this.trailsToggle.setOnDeactivated(() => {\n      this.renderer.trailsEnabled = false;\n    });\n\n    // Zoom callbacks\n    this.zoomInButton.setOnClick(() => {\n      if (this.renderer.trailsEnabled) return;\n      this.renderer.view.zoom(0.75);\n    });\n    this.zoomOutButton.setOnClick(() => {\n      if (this.renderer.trailsEnabled) return;\n      this.renderer.view.zoom(1.25);\n    });\n\n    // Help callback\n    this.helpButton.setOnClick(() => {\n      window.open(HELP_URL);\n    });\n\n    // Initialize preset selector\n    this.presetSelector = new Presets.Selector(this.world);\n    this.presetSelector.add(new Presets.Empty());\n    this.presetSelector.add(new Presets.Planets());\n    this.presetSelector.add(new Presets.Moons());\n    this.presetSelector.add(new Presets.Binary());\n    this.presetSelector.add(new Presets.CustomSimple());\n    this.presetSelector.add(new Presets.CustomBinary());\n    this.presetSelector.finish('planets');\n    this.resetButton.setOnClick(() => {\n      this.renderer.view.reset();\n      this.world.clear();\n      this.presetSelector.apply();\n    });\n    this.settingsButton.setOnClick(() => {\n      if (this.presetSelector.open)\n        this.presetSelector.hide();\n      else\n        this.presetSelector.show();\n    });\n    this.presetSelector.apply();\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.simulationSpeed.value * dt * TIME_SCALE);\n\n    if (this.tool) this.tool.draw(this.renderer);\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(): void {\n    if (this.tool) this.tool.onMouseDown(this.mousePos);\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(): void {\n    if (this.tool) this.tool.onMouseUp(this.mousePos);\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(): void {\n    if (this.tool) this.tool.onMouseMove(this.mousePos);\n  }\n}\n","import {App} from './app/app';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.start();\n});\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","clone","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","determinant","adjunt","els","inverse","det","Error","static","v3","v4","angle","c","cos","sin","$70aad102f272328a$export$3463c369d5cc977f","id","form","_id","_form","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","addEventListener","_","setOnClick","callback","$cef218302c5f0c2e$export$472062a354075cee","slider","min","max","initial","type","_root","_input","querySelector","_display","_type","toString","value","step","log10","updateDisplay","bind","valueAsNumber","pow","innerText","toExponential","toFixed","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","stateChangeCallback","current","name","forEach","toggle","activated","name1","push","setOnActivated","onToggleActivated","setOnDeactivated","onToggleDeactivated","setOnStateChange","name2","name3","$716df50103fb11f0$export$bea8ebba691c5813","super","onActivatedCallback","onDeactivatedCallback","onClick","classList","callback1","$62cbb34c05d40bda$export$a7fed597f4b8afd8","root","_fields","Map","_cancel","_submit","document","addToggle","id1","HTMLButtonElement","set","addSwitch","id2","get","addSlider","id3","HTMLDivElement","show","hide","open","contains","isOn","id4","getValue","id5","getState","id6","setState","id7","setOnCancel","setOnSubmit","$a79f82db3f359dd2$export$d15f4cd5286f9b1e","world","_world","_presets","_selected","create","_open","preset","finish","map","p","onSelectionCanceled","onSelectionSubmitted","find","apply","clear","generate","onSettingsCanceled","onSettingsSubmitted","$70642532a4810a2c$export$1f74963c34e8bfec","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","mix","other1","multiplier","divider","random","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","position","velocity","color","destroyed","onMergeCallbacks","_position","_velocity","_mass","_radius","PI","radius","applyForce","force","dt","applyImpulse","impulse","update","dt1","intersects","addOnMerge","removeOnMerge","index","indexOf","splice","merge","colorA","colorB","c1","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","body","removeBody","body1","pickBody","i1","body2","offset","sqrDistance","i2","draw","renderer","drawCircle","$4fda2921db620455$export$352473970d01c612","star","distance","$87ccf08d263461c5$export$be318cbad845574","planet","moonCount","floor","moon","$d923cc7b4896492d$export$dbada097a9bd1de9","starsMass","starsDistance","bodyMinMass","bodyMass","bodyMinDistance","starA","starB","$5dd98dba661ba3e2$export$a8b378091757e998","$2ab273a8464ae448$export$eeeb0041b17b0d3d","starMass","bodyCount","bodyMassSpread","bodyDistance","bodyDistanceSpread","bodyMaxMass","bodyMaxDistance","$f3f1522c37a6eabc$export$6c98ad58e987cd34","reducedMass","$c1bf940800e5a1ac$export$cc7e12c76513e857","drawTrails","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","$c6eb6ba6d1196e46$export$2906bdf8b6c2d498","start","end","thickness","$1dfbc1a57dcba456$export$b6c59b989905b650","context","vs","fs","_context","_vs","createShader","VERTEX_SHADER","_fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_program","use","useProgram","getAttributeLocation","getAttribLocation","getUniformLocation","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","aspectRatio","onViewChangeCallback","onZoomChangeCallback","reset","transform","_transform","updateTransform","scale","_scale","triggerViewChange","move","delta","zoom","screenToWorld","screen","normalized","setOnViewChange","setOnZoomChange","translation","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","getContext","initShaders","initVertexBuffers","initTrails","view","_trailsEnabled","bindFramebuffer","FRAMEBUFFER","trailsFramebuffer","viewport","clearColor","COLOR_BUFFER_BIT","drawLine","color1","drawArrow","start1","end1","color2","diagonal1","diagonal2","flush","drawProgram","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","drawPositionAttribute","FLOAT","enableVertexAttribArray","command","executeTrailCommand","enable","BLEND","blendEquation","FUNC_REVERSE_SUBTRACT","blendFuncSeparate","SRC_ALPHA","ONE","ZERO","fadeProgram","uniform1f","fadeValueUniform","fadePositionAttribute","drawArrays","TRIANGLE_FAN","quad","disable","trailsProgram","bindTexture","TEXTURE_2D","trailsTexture","uniform1i","trailsTextureUniform","trailsPositionAttribute","executeCommand","trailsEnabled","enabled","drawTransformUniform","circle","$4e7f740962547f5e$var$CIRCLE_DIVISIONS","vertices","line","createBuffer","bufferData","STATIC_DRAW","createFramebuffer","createTexture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","$5ef383d4445cbb93$export$724f6b867059ef5f","$f3eb87607daa86d7$export$4b6be7ec1f210ec9","activate","mouseDown","mouseMoved","mousePos","onMouseDown","onMouseUp","position1","onMouseMove","position2","$4580fa79a207183c$export$373455918ab30f3d","setBody","_1","$9cc044b2968d9ec5$export$41d3726c2d16dda9","$13cafb5802810351$export$26846ab24a403d03","$17e906f5681ecd0b$export$1efad73e3d99c388","lastPosition","$b4bfc8ad905cb117$export$86fbec116b87613f","getElementById","window","innerWidth","innerHeight","e","button","offsetX","offsetY","preventDefault","event","deltaY","simulationSpeed","resetButton","settingsButton","zoomInButton","zoomOutButton","helpButton","trailsToggle","bodyAdderToggle","bodyRemoverToggle","bodyMoverToggle","cameraMoverToggle","bodyFollowerToggle","tools","tool","undefined","toolSwitch","presetSelector","animate","requestAnimationFrame"],"version":3,"file":"index.0bf4a628.js.map"}