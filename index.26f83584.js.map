{"mappings":"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","sources":["src/app/body.ts","src/app/math.ts","src/app/renderer/color.ts","src/app/renderer/draw_circle.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/ui/slider.ts","src/app/ui/button.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/world.ts","src/main.ts","src/app/app.ts"],"sourcesContent":["import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 200.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private mass: number;\n  /** Body's radius. */\n  private radius: number;\n  /** Body's position. */\n  public position: Vec2;\n  /** Body's velocity. */\n  public velocity: Vec2;\n  /** Body's color. */\n  public color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor(mass: number, position: Vec2, velocity: Vec2, color: Color) {\n    this.setMass(mass);\n    this.position = position;\n    this.velocity = velocity;\n    this.color = color;\n  }\n\n  /**\n   * Gets the body's mass.\n   * @returns The body's mass.\n   */\n  public getMass(): number {\n    return this.mass;\n  }\n\n  /**\n   * Gets the body's radius.\n   * @returns The body's radius.\n   */\n  public getRadius(): number {\n    return this.radius;\n  }\n\n  /**\n   * Sets the body's mass.\n   * @param mass The body's new mass.\n   */\n  public setMass(mass: number): void {\n    this.mass = mass;\n    this.radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    const mass = this.mass + other.mass;\n    const position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(mass);\n    const velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(mass);\n\n    const colorA = this.color.mul(this.mass / mass);\n    const colorB = other.color.mul(other.mass / mass);\n    const color = colorA.add(colorB);\n    return new Body(mass, position, velocity, color);\n  }\n}\n","/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[1 * 3 + 0] * other.y;\n      result.x += this.elements[2 * 3 + 0];\n      result.y += this.elements[0 * 3 + 1] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[2 * 3 + 1];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        const sign = (i + j) % 2 === 0 ? 1 : -1;\n        result.elements[i * 3 + j] = sign *\n            (this.elements[(i + 1) % 3 * 3 + (j + 1) % 3] * this.elements[(i + 2) % 3 * 3 + (j + 2) % 3] -\n             this.elements[(i + 1) % 3 * 3 + (j + 2) % 3] * this.elements[(i + 2) % 3 * 3 + (j + 1) % 3]);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this.scale = 1.0;\n    this.aspectRatio = height / width;\n    this.updateTransform();\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Sets the view's scale.\n   * @param scale The new scale.\n   */\n  public setScale(scale: number): void {\n    this.scale = scale;\n    this.updateTransform();\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.setScale(this.scale / multiplier);\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    return this.transform.inverse().mul(screen);\n  }\n\n  /**s\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {DrawCircle} from './draw_circle';\nimport {View} from './view';\n\ntype DrawCommand = DrawCircle;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.05, 0.05, 0.05);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  private view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count */\n  private circle: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(factor: number): void {\n    this.view.zoom(factor);\n  }\n\n  /**\n   * Moves the view.\n   * @param delta The delta to move the view by.\n   */\n  public move(delta: Vec2): void {\n    this.view.move(delta);\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    // Normalize screen coordinates.\n    screen.x = 2.0 * (screen.x / this.canvas.width) - 1.0;\n    screen.y = -(2.0 * (screen.y / this.canvas.height) - 1.0);\n    let world = this.view.screenToWorld(screen);\n    return world;\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's range input element. */\n  private input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private display: HTMLElement;\n\n  /** The slider's type. */\n  private type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param type The slider type.\n   */\n  constructor(input: HTMLInputElement, display: HTMLElement, type: SliderType) {\n    this.input = input;\n    this.display = display;\n    this.type = type;\n\n    this.input.addEventListener('input', this.updateDisplay.bind(this));\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this.type) {\n      case 'linear':\n        return this.input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this.input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this.type) {\n      case 'linear':\n        this.input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this.input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this.value < 0.01 || this.value > 9999.99)\n      this.display.innerText = this.value.toExponential(1);\n    else\n      this.display.innerText = this.value.toFixed(2);\n  }\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n  }\n\n  /**\n   * Callback for when a toggle is clicked.\n   * @param name The name of the toggle that was clicked.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated) this.onActivatedCallback();\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param body Body to add.\n   */\n  public addBody(body: Body): void {\n    this.bodies.push(body);\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param position The position of the body to remove.\n   */\n  public removeBody(position: Vec2): void {\n    for (let i = 0; i < this.bodies.length; i++)\n      if (this.bodies[i].intersects(position)) this.bodies.splice(i, 1);\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.position.sub(body2.position);\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.getMass() * body2.getMass() / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].position, this.bodies[i].getRadius(), this.bodies[i].color);\n    }\n  }\n}\n","import {App} from './app/app';\n\nconst app = new App();\napp.start();\n","import {Body} from './body';\nimport {Mat3, Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\nimport * as UI from './ui';\nimport {GRAVITY_CONSTANT, World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.00001;\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Add body toggle. */\n  private addBodyToggle: UI.Toggle;\n\n  /** Remove body toggle. */\n  private removeBodyToggle: UI.Toggle;\n\n  /** Move camera toggle. */\n  private moveCameraToggle: UI.Toggle;\n\n  /** Input mode switch. */\n  public inputMode: UI.Switch;\n\n  /** Simulation speed slider. */\n  private speed: UI.Slider;\n\n  /** New body mass slider. */\n  private mass: UI.Slider;\n\n  /** Stores the first mouse down coordinates. Null if the mouse isn't down. */\n  private mouseDown: Vec2|null = null;\n\n  /** Stores the last mouse position. */\n  private lastMousePosition: Vec2;\n\n  /** Body being placed. */\n  private placingBody: Body|null = null;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\n    canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\n    canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      this.renderer.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n\n    // Initialize UI toggles and switch\n    this.addBodyToggle = new UI.Toggle(document.getElementById('addBodyToggle') as HTMLButtonElement);\n    this.removeBodyToggle = new UI.Toggle(document.getElementById('removeBodyToggle') as HTMLButtonElement);\n    this.moveCameraToggle = new UI.Toggle(document.getElementById('moveCameraToggle') as HTMLButtonElement);\n    this.inputMode = new UI.Switch();\n    this.inputMode.add('addBody', this.addBodyToggle);\n    this.inputMode.add('removeBody', this.removeBodyToggle);\n    this.inputMode.add('moveCamera', this.moveCameraToggle);\n\n    // Initialize UI sliders\n    this.speed = new UI.Slider(\n        document.getElementById('speedInput') as HTMLInputElement, document.getElementById('speedValue') as HTMLElement,\n        'exponential');\n    this.speed.value = 1.0;\n    this.mass = new UI.Slider(\n        document.getElementById('massInput') as HTMLInputElement, document.getElementById('massValue') as HTMLElement,\n        'exponential');\n    this.mass.value = 1.0;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n\n    // Create physics world.\n    this.world = new World();\n\n    // Create a few bodies.\n    const CENTRAL_MASS = 1000.0;\n    this.world.addBody(new Body(CENTRAL_MASS, new Vec2(0.0, 0.0), new Vec2(0.0, 0.0), Color.random()));\n\n    for (let i = 0; i < 100; ++i) {\n      const mass = 0.1;\n      const angle = (i / 100.0) * Math.PI * 2;\n      const distance = 1.0;\n      const pos = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      const vel = pos.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * (CENTRAL_MASS) / distance));\n      this.world.addBody(new Body(mass, pos, vel, Color.random()));\n    }\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.speed.value * dt * TIME_SCALE);\n\n    if (this.inputMode.current == 'addBody' && this.lastMousePosition) {\n      if (!this.placingBody)\n        this.placingBody = new Body(this.mass.value, new Vec2(0.0, 0.0), new Vec2(0.0, 0.0), Color.random());\n      this.placingBody!.position = this.renderer.screenToWorld(this.lastMousePosition);\n      this.placingBody!.setMass(this.mass.value);\n      this.renderer.drawCircle(this.placingBody!.position, this.placingBody!.getRadius(), this.placingBody!.color);\n    }\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button != 0) return;\n    this.mouseDown = new Vec2(event.offsetX, event.offsetY);\n    this.lastMousePosition = this.mouseDown;\n    event.preventDefault();\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button != 0) return;\n\n    const mousePosition = new Vec2(event.offsetX, event.offsetY);\n    let delta = mousePosition.sub(this.mouseDown!);\n    delta.y *= -1.0;\n\n    switch (this.inputMode.current) {\n      case 'addBody':\n        this.placingBody!.velocity = new Vec2(0.0, 0.0);\n        this.world.addBody(this.placingBody!);\n        this.placingBody = null;\n        break;\n      case 'removeBody':\n        this.world.removeBody(this.renderer.screenToWorld(mousePosition));\n        break;\n    }\n\n    this.mouseDown = null;\n    event.preventDefault();\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(event: MouseEvent): void {\n    const mousePosition = new Vec2(event.offsetX, event.offsetY);\n    if (!this.lastMousePosition) this.lastMousePosition = mousePosition;\n    const delta = mousePosition.sub(this.lastMousePosition);\n    this.lastMousePosition = mousePosition;\n\n    if (this.mouseDown !== null && this.inputMode.current == 'moveCamera') {\n      this.renderer.move((new Vec2(delta.x, -delta.y)).mul(0.001));\n    }\n\n    event.preventDefault();\n  }\n}\n"],"names":["$d437e96c5b648a02$export$4b2c32e08f77ff18","constructor","mass","position","velocity","color","this","setMass","getMass","getRadius","radius","mass1","Math","PI","applyForce","force","dt","applyImpulse","mul","impulse","add","update","dt1","intersects","other","sub","sqrLength","merge","other1","div","colorA","colorB","$2141dd5f58d029d3$export$ac4bca90992eed1","x","y","v","v1","s","s1","dot","v2","length","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","result","i","j","sum","k","transpose","determinant","adjunt","sign","inverse","det","Error","static","v3","v4","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","min","mix","multiplier","divider","random","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","scale","aspectRatio","updateTransform","getTransform","transform","setPosition","setScale","move","delta","zoom","screenToWorld","screen","translation","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","drawCircle","push","factor","flush","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$cef218302c5f0c2e$export$472062a354075cee","input","display","type","addEventListener","updateDisplay","bind","value","valueAsNumber","pow","log10","innerText","toExponential","toFixed","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","_","setOnClick","callback","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","current","name","forEach","toggle","activated","name1","setOnActivated","onToggleActivated","name2","$716df50103fb11f0$export$bea8ebba691c5813","super","onActivatedCallback","onClick","classList","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","body","removeBody","splice","i1","body1","body2","offset","sqrDistance","i2","draw","renderer","mouseDown","placingBody","document","getElementById","window","innerWidth","innerHeight","onMouseDown","onMouseUp","onMouseMove","event","deltaY","preventDefault","resetButton","settingsButton","addBodyToggle","removeBodyToggle","moveCameraToggle","inputMode","speed","world","angle","distance","pos","cos","sin","vel","$5dd98dba661ba3e2$export$a8b378091757e998","start","animate","lastMousePosition","requestAnimationFrame","button","offsetX","offsetY","event1","mousePosition","event2"],"version":3,"file":"index.26f83584.js.map"}