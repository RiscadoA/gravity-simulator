{"mappings":"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","sources":["src/app/math.ts","src/app/renderer/view.ts","src/app/renderer/color.ts","src/app/renderer/draw_circle.ts","src/app/renderer/index.ts","src/app/body.ts","src/app/world.ts","src/main.ts","src/app/app.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result. \n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) {\n            sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          }\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[0 * 3 + 1] * other.y;\n      result.x += this.elements[0 * 3 + 2];\n      result.y += this.elements[0 * 3 + 0] * other.x;\n      result.y += this.elements[0 * 3 + 1] * other.y;\n      result.y += this.elements[0 * 3 + 2];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) {\n        result.elements[i] = this.elements[i] * other;\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this.scale = 1.0;\n    this.aspectRatio = height / width;\n    this.updateTransform();\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Sets the view's scale.\n   * @param scale The new scale.\n   */\n  public setScale(scale: number): void {\n    this.scale = scale;\n    this.updateTransform();\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.setScale(this.scale / multiplier);\n  }\n\n  /**\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Vec2, Mat3} from '../math';\nimport {View} from './view';\nimport {Color} from './color';\nimport {DrawCircle} from './draw_circle';\n\ntype DrawCommand = DrawCircle;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.0, 0.0, 0.0);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  private view: View;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count */\n  private circle: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.context = canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(canvas.width, canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(factor: number): void {\n    this.view.zoom(factor);\n  }\n\n  /**\n   * Moves the view.\n   * @param delta The delta to move the view by.\n   */\n   public move(delta: Vec2): void {\n    this.view.move(delta);\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 100.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private mass: number;\n  /** Body's radius. */\n  private radius: number;\n  /** Body's position. */\n  private position: Vec2;\n  /** Body's velocity. */\n  private velocity: Vec2;\n  /** Body's color. */\n  private color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor(mass: number, position: Vec2, velocity: Vec2, color: Color) {\n    this.setMass(mass);\n    this.position = position;\n    this.velocity = velocity;\n    this.color = color;\n  }\n\n  /**\n   * Gets the body's mass.\n   * @returns The body's mass.\n   */\n  public getMass(): number {\n    return this.mass;\n  }\n\n  /**\n   * Gets the body's radius.\n   * @returns The body's radius.\n   */\n  public getRadius(): number {\n    return this.radius;\n  }\n\n  /**\n   * Gets the body's position.\n   * @returns The 2D vector which represents the body's position.\n   */\n  public getPosition(): Vec2 {\n    return this.position;\n  }\n\n  /**\n   * Gets the body's velocity.\n   * @returns The body's velocity.\n   */\n  public getVelocity(): Vec2 {\n    return this.velocity;\n  }\n\n  /**\n   * Gets the body's color.\n   * @return The body's color.\n   */\n  public getColor(): Color {\n    return this.color;\n  }\n\n  /**\n   * Sets the body's mass.\n   * @param mass The body's new mass.\n   */\n  public setMass(mass: number): void {\n    this.mass = mass;\n    this.radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.velocity = this.velocity.add(force.mul(dt / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is colliding with another.\n   * @param other The other body.\n   * @returns Whether the bodies are colliding.\n   */\n  public collides(other: Body): boolean {\n    // The square of the distance is used to avoid calculating the square root.\n    const sqrDistance = this.position.sub(other.position).sqrLength();\n    const sqrRadius = (this.radius + other.radius) ** 2;\n    return sqrDistance <= sqrRadius;\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    const mass = this.mass + other.mass;\n    const position = this.mass > other.mass ? this.position : other.position;\n    const velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(mass);\n\n    const colorA = this.color.mul(this.mass / mass);\n    const colorB = other.color.mul(other.mass / mass);\n    const color = colorA.add(colorB);\n    return new Body(mass, position, velocity, color);\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param mass The mass of the body.\n   * @param position The initial position of the body.\n   * @param velocity The initial velocity of the body.\n   */\n  public addBody(mass: number, position: Vec2, velocity: Vec2): void {\n    this.bodies.push(new Body(mass, position, velocity, Color.random().add(new Color(0.1, 0.1, 0.1))));\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.getPosition().sub(body2.getPosition());\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.getMass() * body2.getMass() / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    // Check for collisions between bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].collides(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].getPosition(), this.bodies[i].getRadius(), this.bodies[i].getColor());\n    }\n  }\n}\n","import {App} from './app/app';\nimport {Vec2} from './app/math';\n\n// Initialize canvas\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\n// Initialize app\nconst app = new App(canvas);\n\n// Add drag event\nlet dragging = false;\nlet lastMousePos = new Vec2(0.0, 0.0);\n\ncanvas.addEventListener('mousedown', event => {\n  if (event.button == 1) { \n    dragging = true;\n    lastMousePos = new Vec2(event.offsetX, event.offsetY);\n  }\n  event.preventDefault();\n}, false);\n\ncanvas.addEventListener('mousemove', event => {\n  if (dragging) {\n    const mousePos = new Vec2(event.offsetX, event.offsetY);\n    let delta = mousePos.sub(lastMousePos);\n    delta.y = -delta.y;\n\n    lastMousePos = mousePos;\n    app.move(delta.mul(0.001));\n  }\n  event.preventDefault();\n}, false);\n\ncanvas.addEventListener('mouseup', event => {\n  if (event.button == 1) dragging = false;\n  event.preventDefault();\n}, false);\n\n// Add zoom event\ncanvas.addEventListener('wheel', event => {\n  if (event.deltaY > 0)\n    app.zoom(1.1);\n  else\n    app.zoom(0.9);\n  event.preventDefault();\n}, false);\n\n// Main application loop\nlet lastTime = 0.0;\nfunction step(currentTime: number) {\n  const dt = currentTime - lastTime;\n  lastTime = currentTime;\n\n  app.update(dt);\n  app.draw();\n\n  window.requestAnimationFrame(step)\n}\n\nwindow.requestAnimationFrame(step);\n","import {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {GRAVITY_CONSTANT, World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.001;\n\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /**\n   * @param canvas HTML element to attach the application to.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n\n    // Create physics world.\n    this.world = new World();\n\n    // Create a few bodies.\n    const CENTRAL_MASS = 10000.0;\n    this.world.addBody(CENTRAL_MASS, new Vec2(0.0, 0.0), new Vec2(0.0, 0.0));\n    for (let i = 0; i < 1000; ++i) {\n      const angle = Math.random() * Math.PI * 2;\n      const radius = Math.random() * 7.0 + 1.0;\n      const pos = new Vec2(Math.cos(angle) * radius, Math.sin(angle) * radius);\n      const vel = pos.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * CENTRAL_MASS / radius));\n      this.world.addBody(1.0, pos, vel);\n    }\n  }\n\n  /**\n   * Draws the application.\n   */\n  public draw(): void {\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n  }\n\n  /**\n   * Updates the application.\n   * @param dt Time step in seconds.\n   */\n  public update(dt: number): void {\n    for (let i = 0; i < 100; ++i) this.world.update(dt * TIME_SCALE);\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(factor: number): void {\n    this.renderer.zoom(factor);\n  }\n\n  /**\n   * Moves the view.\n   * @param delta The delta to move the view by.\n   */\n  public move(delta: Vec2): void {\n    this.renderer.move(delta);\n  }\n}\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","static","v3","v4","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","position","scale","aspectRatio","updateTransform","getTransform","transform","setPosition","setScale","move","delta","zoom","multiplier","translation","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","min","mix","other1","divider","random","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","radius","color","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","drawCircle","push","factor","flush","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","velocity","setMass","getMass","getRadius","getPosition","getVelocity","getColor","mass1","PI","applyForce","force","dt","update","dt1","collides","merge","colorA","colorB","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","i1","body1","body2","offset","sqrDistance","i2","splice","draw","renderer","$5ba171b4a505aeb2$var$canvas","document","getElementById","window","innerWidth","innerHeight","$5ba171b4a505aeb2$var$app","world","angle","pos","cos","sin","vel","$5dd98dba661ba3e2$export$a8b378091757e998","$5ba171b4a505aeb2$var$dragging","$5ba171b4a505aeb2$var$lastMousePos","addEventListener","event","button","offsetX","offsetY","preventDefault","mousePos","deltaY","$5ba171b4a505aeb2$var$lastTime","requestAnimationFrame","$5ba171b4a505aeb2$var$step","currentTime"],"version":3,"file":"index.65d05a62.js.map"}