{"mappings":"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","sources":["src/app/math.ts","src/app/renderer/color.ts","src/app/renderer/draw_circle.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/tools/tool.ts","src/app/body.ts","src/app/tools/body_adder.ts","src/app/tools/body_remover.ts","src/app/tools/camera_mover.ts","src/app/ui/slider.ts","src/app/ui/button.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/world.ts","src/main.ts","src/app/app.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[1 * 3 + 0] * other.y;\n      result.x += this.elements[2 * 3 + 0];\n      result.y += this.elements[0 * 3 + 1] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[2 * 3 + 1];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    const els = this.elements;\n    result.elements[0 * 3 + 0] = els[1 * 3 + 1] * els[2 * 3 + 2] - els[1 * 3 + 2] * els[2 * 3 + 1];\n    result.elements[0 * 3 + 1] = els[0 * 3 + 2] * els[2 * 3 + 1] - els[0 * 3 + 1] * els[2 * 3 + 2];\n    result.elements[0 * 3 + 2] = els[0 * 3 + 1] * els[1 * 3 + 2] - els[0 * 3 + 2] * els[1 * 3 + 1];\n    result.elements[1 * 3 + 0] = els[1 * 3 + 2] * els[2 * 3 + 0] - els[1 * 3 + 0] * els[2 * 3 + 2];\n    result.elements[1 * 3 + 1] = els[0 * 3 + 0] * els[2 * 3 + 2] - els[0 * 3 + 2] * els[2 * 3 + 0];\n    result.elements[1 * 3 + 2] = els[0 * 3 + 2] * els[1 * 3 + 0] - els[0 * 3 + 0] * els[1 * 3 + 2];\n    result.elements[2 * 3 + 0] = els[1 * 3 + 0] * els[2 * 3 + 1] - els[1 * 3 + 1] * els[2 * 3 + 0];\n    result.elements[2 * 3 + 1] = els[0 * 3 + 1] * els[2 * 3 + 0] - els[0 * 3 + 0] * els[2 * 3 + 1];\n    result.elements[2 * 3 + 2] = els[0 * 3 + 0] * els[1 * 3 + 1] - els[0 * 3 + 1] * els[1 * 3 + 0];\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private _scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  /** Canvas width. */\n  private width: number;\n\n  /** Canvas height. */\n  private height: number;\n\n  /** View change callback. */\n  private onViewChangeCallback: (view: View) => void;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this._scale = 1.0;\n    this.aspectRatio = height / width;\n    this.width = width;\n    this.height = height;\n    this.updateTransform();\n    this.onViewChangeCallback = () => {};\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n    this.onViewChangeCallback(this);\n  }\n\n  /**\n   * Sets the view's scale.\n   */\n  public set scale(scale: number) {\n    this._scale = scale;\n    this.updateTransform();\n    this.onViewChangeCallback(this);\n  }\n\n  /**\n   * Gets the view's scale.\n   */\n  public get scale(): number {\n    return this._scale;\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.scale /= multiplier;\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    let normalized = new Vec2(screen.x / this.width, screen.y / this.height);\n    normalized = normalized.sub(new Vec2(0.5, 0.5)).mul(2.0);\n    return this.transform.inverse().mul(normalized);\n  }\n\n  /**\n   * Sets the view change callback.\n   * @param callback The callback.\n   */\n  public setOnViewChange(callback: (view: View) => void): void {\n    this.onViewChangeCallback = callback;\n  }\n\n  /**\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {DrawCircle} from './draw_circle';\nimport {View} from './view';\n\nexport {View};\n\ntype DrawCommand = DrawCircle;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.05, 0.05, 0.05);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  public view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count */\n  private circle: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","import {Vec2} from '../math';\nimport {Renderer} from '../renderer';\n\n/**\n * Generic tool class.\n */\nexport abstract class Tool {\n  /**\n   * Called when the tool is activated.\n   */\n  public abstract activate(): void;\n\n  /**\n   * Called every frame to draw tool related stuff.\n   * @param renderer The renderer to draw to.\n   */\n  public abstract draw(renderer: Renderer): void;\n\n  /**\n   * Called when the mouse button is pressed.\n   * @param position Mouse position.\n   */\n  public abstract onMouseDown(position: Vec2): void;\n\n  /**\n   * Called when the mouse button is released.\n   * @param position Mouse position.\n   */\n  public abstract onMouseUp(position: Vec2): void;\n\n  /**\n   * Called when the mouse is moved.\n   * @param position Mouse position.\n   */\n  public abstract onMouseMove(position: Vec2): void;\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 200.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private _mass: number;\n  /** Body's radius. */\n  private _radius: number;\n  /** Body's position. */\n  private _position: Vec2;\n  /** Body's velocity. */\n  private _velocity: Vec2;\n  /** Body's color. */\n  public color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor() {\n    this.mass = 1.0;\n    this.position = new Vec2(0.0, 0.0);\n    this.velocity = new Vec2(0.0, 0.0);\n    this.color = Color.random();\n  }\n\n  /**\n   * Gets the body's position.\n   */\n  public get position(): Vec2 {\n    return this._position;\n  }\n\n  /**\n   * Sets the body's position.\n   */\n  public set position(position: Vec2) {\n    this._position = new Vec2(position.x, position.y);\n  }\n\n  /**\n   * Gets the body's velocity.\n   */\n   public get velocity(): Vec2 {\n    return this._velocity;\n  }\n\n  /**\n   * Sets the body's velocity.\n   */\n  public set velocity(velocity: Vec2) {\n    this._velocity = new Vec2(velocity.x, velocity.y);\n  }\n  \n  /**\n   * Gets the body's mass.\n   */\n  public get mass(): number {\n    return this._mass;\n  }\n\n  /**\n   * Sets the body's mass.\n   */\n  public set mass(mass: number) {\n    this._mass = mass;\n    this._radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Gets the body's radius.\n   */\n  public get radius(): number {\n    return this._radius;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    let b = new Body();\n\n    b.mass = this.mass + other.mass;\n    b.position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(b.mass);\n    b.velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(b.mass);\n\n    const colorA = this.color.mul(this.mass / b.mass);\n    const colorB = other.color.mul(other.mass / b.mass);\n    b.color = colorA.add(colorB);\n\n    return b;\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {View, Renderer} from '../renderer';\nimport * as UI from '../ui';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/** Velocity multiplier for throwing bodies. */\nconst VELOCITY_MULTIPLIER = 0.001;\n\n/**\n * Tool for adding bodies to the world.\n */\nexport class BodyAdder extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Slider which indicates the body's mass. */\n  private mass: UI.Slider;\n\n  /** Body being added. */\n  private body: Body;\n\n  /** Mouse down position. */\n  private mouseDown: Vec2|null;\n\n  /** Has the mouse moved? */\n  private mouseMoved: boolean;\n\n  /**\n   * @param world The world to add bodies to.\n   * @param view The view being used to render.\n   * @param mass The slider which indicates the body's mass.\n   */\n  constructor(world: World, view: View, mass: UI.Slider) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.mass = mass;\n  }\n\n  public override activate(): void {\n    this.body = new Body();\n    this.mouseDown = null;\n    this.mouseMoved = false;\n  }\n\n  public override draw(renderer: Renderer): void {\n    if (!this.mouseMoved) return;\n\n    this.body.mass = this.mass.value;\n    renderer.drawCircle(this.body.position, this.body.radius, this.body.color);\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.body.position = this.view.screenToWorld(position);\n    this.mouseDown = position;\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    if (this.mouseDown) {\n      let delta = position.sub(this.mouseDown);\n      delta.y *= -1.0;\n      this.body.velocity = delta.mul(VELOCITY_MULTIPLIER * this.view.scale);\n      this.world.addBody(this.body);\n    }\n\n    this.activate();\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.mouseDown) this.body.position = this.view.screenToWorld(position);\n    this.mouseMoved = true;\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for removing bodies to the world.\n */\nexport class BodyRemover extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /**\n   * @param world The world to remove bodies from.\n   * @param view The view being used to render.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n  }\n\n  public override activate(): void {\n    // Do nothing.\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(_: Vec2): void {\n    // Do nothing.\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    this.world.removeBody(this.view.screenToWorld(position));\n  }\n\n  public override onMouseMove(_: Vec2): void {\n    // Do nothing.\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\n\nimport {Tool} from './tool';\n\n/** Camera movement sensibility. */\nconst SENSIBILITY = 0.001;\n\n/**\n * Tool for moving the camera.\n */\nexport class CameraMover extends Tool {\n  /** View being used to render. */\n  private view: View;\n\n  /** Last mouse position. */\n  private lastPosition: Vec2|null;\n\n  /**\n   * @param view The view being used to render.\n   */\n  constructor(view: View) {\n    super();\n    this.view = view;\n  }\n\n  public override activate(): void {\n    this.lastPosition = null;\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.lastPosition = position;\n  }\n\n  public override onMouseUp(_: Vec2): void {\n    this.lastPosition = null;\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.lastPosition) return;\n\n    let delta = position.sub(this.lastPosition);\n    delta.y *= -1.0;\n    this.lastPosition = position;\n\n    this.view.move(delta.mul(SENSIBILITY));\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's range input element. */\n  private input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private display: HTMLElement;\n\n  /** The slider's type. */\n  private type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param type The slider type.\n   */\n  constructor(input: HTMLInputElement, display: HTMLElement, type: SliderType) {\n    this.input = input;\n    this.display = display;\n    this.type = type;\n\n    this.input.addEventListener('input', this.updateDisplay.bind(this));\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this.type) {\n      case 'linear':\n        return this.input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this.input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this.type) {\n      case 'linear':\n        this.input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this.input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this.value < 0.01 || this.value > 9999.99)\n      this.display.innerText = this.value.toExponential(1);\n    else\n      this.display.innerText = this.value.toFixed(2);\n  }\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  /** Callback called when the state changes. */\n  private stateChangeCallback: (state: string) => void;\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n    this.stateChangeCallback = (_) => {};\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    if (this.state === name) return;\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n    this.stateChangeCallback(name);\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n    toggle.setOnDeactivated(() => this.onToggleDeactivated(name));\n  }\n\n  /**\n   * Sets the callback called when the state changes.\n   * @param callback The callback to set.\n   */\n  public setOnStateChange(callback: (state: string) => void): void {\n    this.stateChangeCallback = callback;\n  }\n\n  /**\n   * Callback for when a toggle is activated.\n   * @param name The name of the toggle that was activated.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n\n  /**\n   * Callback for when a toggle is deactivated.\n   * @param name The name of the toggle that was deactivated.\n   */\n  private onToggleDeactivated(name: string): void {\n    if (this.state === name) this.current = '';\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /** The toggle deactivation callback. */\n  private onDeactivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.onDeactivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnDeactivated(callback: () => void): void {\n    this.onDeactivatedCallback = callback;\n  }\n\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated)\n      this.onActivatedCallback();\n    else\n      this.onDeactivatedCallback();\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param body Body to add.\n   */\n  public addBody(body: Body): void {\n    this.bodies.push(body);\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param position The position of the body to remove.\n   */\n  public removeBody(position: Vec2): void {\n    for (let i = 0; i < this.bodies.length; i++)\n      if (this.bodies[i].intersects(position)) this.bodies.splice(i, 1);\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.position.sub(body2.position);\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.mass * body2.mass / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].position, this.bodies[i].radius, this.bodies[i].color);\n    }\n  }\n}\n","import {App} from './app/app';\n\nconst app = new App();\napp.start();\n","import {Body} from './body';\nimport {Mat3, Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\nimport * as Tools from './tools';\nimport * as UI from './ui';\nimport {GRAVITY_CONSTANT, World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.00001;\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Tools array. */\n  private tools: Map<string, Tools.Tool>;\n\n  /** Current tool. */\n  private tool: Tools.Tool|undefined;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Add body toggle. */\n  private addBodyToggle: UI.Toggle;\n\n  /** Remove body toggle. */\n  private removeBodyToggle: UI.Toggle;\n\n  /** Move camera toggle. */\n  private moveCameraToggle: UI.Toggle;\n\n  /** Tools switch. */\n  private toolSwitch: UI.Switch;\n\n  /** Simulation speed slider. */\n  private speed: UI.Slider;\n\n  /** New body mass slider. */\n  private mass: UI.Slider;\n\n  /** Last mouse position. */\n  private mousePos: Vec2;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n    this.renderer.view.setOnViewChange(() => this.onMouseMove.bind(this));\n\n    // Create physics world.\n    this.world = new World();\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseDown();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mouseup', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseUp();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mousemove', e => {\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseMove();\n      e.preventDefault();\n    });\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      this.renderer.view.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI sliders\n    this.speed = new UI.Slider(\n        document.getElementById('speedInput') as HTMLInputElement, document.getElementById('speedValue') as HTMLElement,\n        'exponential');\n    this.speed.value = 1.0;\n    this.mass = new UI.Slider(\n        document.getElementById('massInput') as HTMLInputElement, document.getElementById('massValue') as HTMLElement,\n        'exponential');\n    this.mass.value = 1.0;\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n\n    // Initialize UI toggles\n    this.addBodyToggle = new UI.Toggle(document.getElementById('addBodyToggle') as HTMLButtonElement);\n    this.removeBodyToggle = new UI.Toggle(document.getElementById('removeBodyToggle') as HTMLButtonElement);\n    this.moveCameraToggle = new UI.Toggle(document.getElementById('moveCameraToggle') as HTMLButtonElement);\n\n    // Initialize tools\n    this.tools = new Map<string, Tools.Tool>();\n    this.tools.set('addBody', new Tools.BodyAdder(this.world, this.renderer.view, this.mass));\n    this.tools.set('removeBody', new Tools.BodyRemover(this.world, this.renderer.view));\n    this.tools.set('moveCamera', new Tools.CameraMover(this.renderer.view));\n    this.tool = undefined;\n\n    // Intiailize UI tool switch\n    this.toolSwitch = new UI.Switch();\n    this.toolSwitch.add('addBody', this.addBodyToggle);\n    this.toolSwitch.add('removeBody', this.removeBodyToggle);\n    this.toolSwitch.add('moveCamera', this.moveCameraToggle);\n    this.toolSwitch.setOnStateChange(tool => {\n      this.tool = this.tools.get(tool);\n      if (this.tool) this.tool.activate();\n    });\n\n    // Create a few bodies.\n    /*const CENTRAL_MASS = 1000.0;\n    this.world.addBody(new Body(CENTRAL_MASS, new Vec2(0.0, 0.0), new Vec2(0.0, 0.0), Color.random()));\n\n    for (let i = 0; i < 100; ++i) {\n      const mass = 0.1;\n      const angle = (i / 100.0) * Math.PI * 2;\n      const distance = 1.0;\n      const pos = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      const vel = pos.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * (CENTRAL_MASS) / distance));\n      this.world.addBody(new Body(mass, pos, vel, Color.random()));\n    }*/\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.speed.value * dt * TIME_SCALE);\n\n    if (this.tool) this.tool.draw(this.renderer);\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(): void {\n    if (this.tool) this.tool.onMouseDown(this.mousePos);\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(): void {\n    if (this.tool) this.tool.onMouseUp(this.mousePos);\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(): void {\n    if (this.tool) this.tool.onMouseMove(this.mousePos);\n    console.log('AA', this.tool);\n  }\n}\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","determinant","adjunt","els","inverse","det","Error","static","v3","v4","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","min","mix","other1","multiplier","divider","random","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","radius","color","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","position","_scale","aspectRatio","updateTransform","onViewChangeCallback","getTransform","transform","setPosition","scale","move","delta","zoom","screenToWorld","screen","normalized","setOnViewChange","callback","translation","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","drawCircle","push","flush","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$5ef383d4445cbb93$export$724f6b867059ef5f","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","velocity","_position","_velocity","_mass","_radius","PI","applyForce","force","dt","applyImpulse","impulse","update","dt1","intersects","merge","colorA","colorB","$f3eb87607daa86d7$export$4b6be7ec1f210ec9","world","super","activate","body","mouseDown","mouseMoved","draw","renderer","value","onMouseDown","onMouseUp","position1","addBody","onMouseMove","position2","$13cafb5802810351$export$26846ab24a403d03","_","removeBody","_1","$17e906f5681ecd0b$export$1efad73e3d99c388","lastPosition","$cef218302c5f0c2e$export$472062a354075cee","input","display","type","addEventListener","updateDisplay","bind","valueAsNumber","pow","log10","innerText","toExponential","toFixed","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","setOnClick","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","stateChangeCallback","current","name","forEach","toggle","activated","name1","setOnActivated","onToggleActivated","setOnDeactivated","onToggleDeactivated","setOnStateChange","name2","name3","$716df50103fb11f0$export$bea8ebba691c5813","onActivatedCallback","onDeactivatedCallback","onClick","classList","callback1","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","splice","i1","body1","body2","offset","sqrDistance","i2","document","getElementById","window","innerWidth","innerHeight","e","button","mousePos","offsetX","offsetY","preventDefault","event","deltaY","speed","resetButton","settingsButton","addBodyToggle","removeBodyToggle","moveCameraToggle","tools","Map","set","tool","undefined","toolSwitch","get","start","animate","requestAnimationFrame","console","log"],"version":3,"file":"index.ae0c7702.js.map"}