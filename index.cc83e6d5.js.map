{"mappings":"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","sources":["src/app/math.ts","src/app/ui/button.ts","src/app/ui/slider.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/ui/form.ts","src/app/presets/selector.ts","src/app/renderer/color.ts","src/app/body.ts","src/app/world.ts","src/app/presets/simple_star_system.ts","src/app/presets/preset.ts","src/app/renderer/draw_circle.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/tools/tool.ts","src/app/tools/body_adder.ts","src/app/tools/body_remover.ts","src/app/tools/camera_mover.ts","src/app/app.ts","src/main.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[1 * 3 + 0] * other.y;\n      result.x += this.elements[2 * 3 + 0];\n      result.y += this.elements[0 * 3 + 1] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[2 * 3 + 1];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    const els = this.elements;\n    result.elements[0 * 3 + 0] = els[1 * 3 + 1] * els[2 * 3 + 2] - els[1 * 3 + 2] * els[2 * 3 + 1];\n    result.elements[0 * 3 + 1] = els[0 * 3 + 2] * els[2 * 3 + 1] - els[0 * 3 + 1] * els[2 * 3 + 2];\n    result.elements[0 * 3 + 2] = els[0 * 3 + 1] * els[1 * 3 + 2] - els[0 * 3 + 2] * els[1 * 3 + 1];\n    result.elements[1 * 3 + 0] = els[1 * 3 + 2] * els[2 * 3 + 0] - els[1 * 3 + 0] * els[2 * 3 + 2];\n    result.elements[1 * 3 + 1] = els[0 * 3 + 0] * els[2 * 3 + 2] - els[0 * 3 + 2] * els[2 * 3 + 0];\n    result.elements[1 * 3 + 2] = els[0 * 3 + 2] * els[1 * 3 + 0] - els[0 * 3 + 0] * els[1 * 3 + 2];\n    result.elements[2 * 3 + 0] = els[1 * 3 + 0] * els[2 * 3 + 1] - els[1 * 3 + 1] * els[2 * 3 + 0];\n    result.elements[2 * 3 + 1] = els[0 * 3 + 1] * els[2 * 3 + 0] - els[0 * 3 + 0] * els[2 * 3 + 1];\n    result.elements[2 * 3 + 2] = els[0 * 3 + 0] * els[1 * 3 + 1] - els[0 * 3 + 1] * els[1 * 3 + 0];\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's root element. */\n  private _root: HTMLDivElement;\n\n  /** The slider's range input element. */\n  private _input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private _display: HTMLDivElement;\n\n  /** The slider's type. */\n  private _type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param initial The initial value.\n   * @param type The slider type.\n   */\n  constructor(slider: HTMLDivElement, min: number, max: number, initial: number, type: SliderType) {\n    this._root = slider;\n    this._input = this._root.querySelector('input') as HTMLInputElement;\n    this._display = this._root.querySelector('div') as HTMLDivElement;\n    this._type = type;\n\n    this._input.addEventListener('input', this.updateDisplay.bind(this));\n\n    switch (this._type) {\n      case 'linear':\n        this._input.min = min.toString();\n        this._input.max = max.toString();\n        this._input.value = initial.toString();\n        this._input.step = 1.0.toString();\n        break;\n      case 'exponential':\n        this._input.min = Math.log10(min).toString();\n        this._input.max = Math.log10(max).toString();\n        this._input.value = Math.log10(initial).toString();\n        this._input.step = 0.1.toString();\n        break;\n    }\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this._type) {\n      case 'linear':\n        return this._input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this._input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this._type) {\n      case 'linear':\n        this._input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this._input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this.value < 0.01 || this.value > 9999.99)\n      this._display.innerText = this.value.toExponential(1);\n    else\n      this._display.innerText = this.value.toFixed(2);\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  /** Callback called when the state changes. */\n  private stateChangeCallback: (state: string) => void;\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n    this.stateChangeCallback = (_) => {};\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    if (this.state === name) return;\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n    this.stateChangeCallback(name);\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n    toggle.setOnDeactivated(() => this.onToggleDeactivated(name));\n  }\n\n  /**\n   * Sets the callback called when the state changes.\n   * @param callback The callback to set.\n   */\n  public setOnStateChange(callback: (state: string) => void): void {\n    this.stateChangeCallback = callback;\n  }\n\n  /**\n   * Callback for when a toggle is activated.\n   * @param name The name of the toggle that was activated.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n\n  /**\n   * Callback for when a toggle is deactivated.\n   * @param name The name of the toggle that was deactivated.\n   */\n  private onToggleDeactivated(name: string): void {\n    if (this.state === name) this.current = '';\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /** The toggle deactivation callback. */\n  private onDeactivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.onDeactivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnDeactivated(callback: () => void): void {\n    this.onDeactivatedCallback = callback;\n  }\n\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated)\n      this.onActivatedCallback();\n    else\n      this.onDeactivatedCallback();\n  }\n}\n","import {Button} from './button';\nimport {Slider, SliderType} from './slider';\nimport {Switch} from './switch';\nimport {Toggle} from './toggle';\n\n/**\n * Represents a form field.\n */\nexport type FormField = Slider|Toggle|Switch;\n\n/**\n * Represents a form. A form is a collection of form fields.\n */\nexport class Form {\n  /** The form fields. */\n  private _fields: Map<string, FormField>;\n\n  /** The form's root element. */\n  private _root: HTMLElement;\n\n  /** The form's cancel button. */\n  private _cancel: Button;\n\n  /** The form's submit button. */\n  private _submit: Button;\n\n  /**\n   * @param root The form's root element.\n   */\n  constructor(root: HTMLElement) {\n    this._fields = new Map<string, FormField>();\n    this._root = root;\n    console.log(this._root);\n    this._cancel = new Button(this._root.querySelector('#cancel') as HTMLButtonElement);\n    this._submit = new Button(this._root.querySelector('#submit') as HTMLButtonElement);\n  }\n\n  /**\n   * Creates a new form.\n   * @param id Form identifier.\n   */\n  static create(id: string): Form {\n    return new Form(document.querySelector(`.form>#${id}`) as HTMLDivElement);\n  }\n\n  /**\n   * Adds a toggle field to the form.\n   * @param id The toggle's id.\n   */\n  public addToggle(id: string): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLButtonElement) {\n      this._fields.set(id, new Toggle(element));\n    }\n  }\n\n  /**\n   * Adds a switch to the form.\n   * @param id The switch's id.\n   * @param toggles The switch's toggles' ids.\n   */\n  public addSwitch(id: string, ...toggles: string[]): void {\n    const s = new Switch();\n    toggles.forEach(i => {\n      this.addToggle(i);\n      s.add(i, this._fields.get(i) as Toggle);\n    });\n    this._fields.set(id, s);\n  }\n\n  /**\n   * Adds a slider field to the form.\n   * @param id The slider's id.\n   * @param min The slider's minimum value.\n   * @param max The slider's maximum value.\n   * @param initial The slider's initial value.\n   * @param type The slider's type.\n   */\n  public addSlider(id: string, min: number, max: number, initial: number, type: SliderType): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLDivElement) {\n      this._fields.set(id, new Slider(element, min, max, initial, type));\n    }\n  }\n\n  /**\n   * Shows the form.\n   */\n  public show() {\n    this._root.classList.toggle('hidden', false);\n  }\n\n  /**\n   * Hides the form.\n   */\n  public hide() {\n    this._root.classList.toggle('hidden', true);\n  }\n\n  /**\n   * Checks if the form is open.\n   */\n  public get open(): boolean {\n    return !this._root.classList.contains('hidden');\n  }\n\n  /**\n   * Checks if the toggle with the given id is on.\n   * @param id The toggle's id.\n   * @returns True if the toggle is on, false otherwise.\n   */\n  public isOn(id: string): boolean {\n    return (this._fields.get(id) as Toggle).activated;\n  }\n\n  /**\n   * Gets the value of the slider with the given id.\n   * @param id The slider's id.\n   * @returns The slider's value.\n   */\n  public value(id: string): number {\n    return (this._fields.get(id) as Slider).value;\n  }\n\n  /**\n   * Gets the state of the switch with the given id.\n   * @param id The switch's id.\n   * @returns The switch's state.\n   */\n  public state(id: string): string {\n    return (this._fields.get(id) as Switch).current;\n  }\n\n  /**\n   * Sets the form cancelled callback.\n   * @param callback The callback.\n   */\n  public setOnCancel(callback: () => void) {\n    this._cancel.setOnClick(callback);\n  }\n\n  /**\n   * Sets the form submitted callback.\n   * @param callback The callback.\n   */\n  public setOnSubmit(callback: () => void) {\n    this._submit.setOnClick(callback);\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Class used to select presets.\n */\nexport class Selector {\n  /** World to affect. */\n  private _world: World;\n\n  /** Presets available. */\n  private _presets: Preset[];\n\n  /** Preset chosen. */\n  private _selected: Preset|null;\n\n  /** Form used to select. */\n  private _form: Form;\n\n  /** Is the form open? */\n  private _open: boolean;\n\n  /**\n   * @param world The world to affect.\n   */\n  constructor(world: World) {\n    this._world = world;\n    this._presets = [];\n    this._selected = null;\n    this._form = Form.create('selector');\n    this._form.addToggle('empty');\n    this._open = false;\n  }\n\n  /**\n   * Adds a preset to the selector.\n   * @param preset The preset to add.\n   */\n  public add(preset: Preset): void {\n    this._presets.push(preset);\n    this._form.addToggle(preset.id);\n  }\n\n  /**\n   * Finishes building the selector.\n   */\n  public finish(): void {\n    this._form.addSwitch('preset', 'empty', ...this._presets.map(p => p.id));\n    this._form.setOnCancel(this.onSelectionCanceled.bind(this));\n    this._form.setOnSubmit(this.onSelectionSubmitted.bind(this));\n  }\n\n  /**\n   * Shows the selector.\n   */\n  public show(): void {\n    if (!this._open) this._form.show();\n    this._open = true;\n  }\n\n  /**\n   * Hides the selector.\n   */\n  public hide(): void {\n    if (this._selected && this._selected.form.open) this._selected.form.hide();\n    if (this._form.open) this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Checks if the selector is open.\n   */\n  public get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * Applies the last selected preset.\n   */\n  public apply(): void {\n    this._world.clear();\n    if (this._selected) this._selected.generate(this._world);\n  }\n\n  /**\n   * Callback called when the selection form is canceled.\n   */\n  private onSelectionCanceled(): void {\n    this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Callback called when the selection form is submitted.\n   */\n  private onSelectionSubmitted(): void {\n    const state = this._form.state('preset');\n    this._form.hide();\n\n    if (state === 'empty') {\n      this._selected = null;\n      this.onSettingsSubmitted();\n    } else {\n      this._selected = this._presets.find(p => p.id === state)!;\n      this._selected.form.show();\n      this._selected.form.setOnCancel(this.onSettingsCanceled.bind(this));\n      this._selected.form.setOnSubmit(this.onSettingsSubmitted.bind(this));\n    }\n  }\n\n  /**\n   * Callback called when the settings form is canceled.\n   */\n  private onSettingsCanceled(): void {\n    this._selected?.form.hide();\n    this._form.show();\n  }\n\n  /**\n   * Callback called when the settings form is submitted.\n   */\n  private onSettingsSubmitted(): void {\n    this.apply();\n    if (this._selected) this._selected.form.hide();\n    this._open = false;\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 200.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private _mass: number;\n  /** Body's radius. */\n  private _radius: number;\n  /** Body's position. */\n  private _position: Vec2;\n  /** Body's velocity. */\n  private _velocity: Vec2;\n  /** Body's color. */\n  public color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor() {\n    this.mass = 1.0;\n    this.position = new Vec2(0.0, 0.0);\n    this.velocity = new Vec2(0.0, 0.0);\n    this.color = Color.random();\n  }\n\n  /**\n   * Gets the body's position.\n   */\n  public get position(): Vec2 {\n    return this._position;\n  }\n\n  /**\n   * Sets the body's position.\n   */\n  public set position(position: Vec2) {\n    this._position = new Vec2(position.x, position.y);\n  }\n\n  /**\n   * Gets the body's velocity.\n   */\n   public get velocity(): Vec2 {\n    return this._velocity;\n  }\n\n  /**\n   * Sets the body's velocity.\n   */\n  public set velocity(velocity: Vec2) {\n    this._velocity = new Vec2(velocity.x, velocity.y);\n  }\n  \n  /**\n   * Gets the body's mass.\n   */\n  public get mass(): number {\n    return this._mass;\n  }\n\n  /**\n   * Sets the body's mass.\n   */\n  public set mass(mass: number) {\n    this._mass = mass;\n    this._radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Gets the body's radius.\n   */\n  public get radius(): number {\n    return this._radius;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    let b = new Body();\n\n    b.mass = this.mass + other.mass;\n    b.position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(b.mass);\n    b.velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(b.mass);\n\n    const colorA = this.color.mul(this.mass / b.mass);\n    const colorB = other.color.mul(other.mass / b.mass);\n    b.color = colorA.add(colorB);\n\n    return b;\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param body Body to add.\n   */\n  public addBody(body: Body): void {\n    this.bodies.push(body);\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param position The position of the body to remove.\n   */\n  public removeBody(position: Vec2): void {\n    for (let i = 0; i < this.bodies.length; i++)\n      if (this.bodies[i].intersects(position)) this.bodies.splice(i, 1);\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.position.sub(body2.position);\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.mass * body2.mass / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].position, this.bodies[i].radius, this.bodies[i].color);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Form} from '../ui/form';\nimport {World, GRAVITY_CONSTANT} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a preset with a single star, with N bodies orbiting it.\n */\nexport class SimpleStarSystem extends Preset {\n  constructor() {\n    // Create form\n    const form = Form.create('simpleStarSystem');\n    form.addSlider('starMass', 0.1, 100000000.0, 1000.0, 'exponential');\n    form.addSlider('bodyCount', 1, 1000, 100, 'linear');\n    form.addSlider('bodyMinMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMaxMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMinDistance', 1.0, 100.0, 1.0, 'linear');\n    form.addSlider('bodyMaxDistance', 1.0, 100.0, 5.0, 'linear');\n    super('simpleStarSystem', form);\n  }\n\n  public override generate(world: World): void {\n    // Get settings from form\n    const starMass = this.form.value('starMass');\n    const bodyCount = this.form.value('bodyCount');\n    const bodyMinMass = this.form.value('bodyMinMass');\n    const bodyMaxMass = this.form.value('bodyMaxMass');\n    const bodyMinDistance = this.form.value('bodyMinDistance');\n    const bodyMaxDistance = this.form.value('bodyMaxDistance');\n\n    // Add star\n    const star = new Body();\n    star.mass = this.form.value('starMass');\n    world.addBody(star);\n\n    for (let i = 0; i < bodyCount; ++i) {\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * (bodyMaxDistance - bodyMinDistance) + bodyMinDistance;\n\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * (bodyMaxMass - bodyMinMass) + bodyMinMass;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity = body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * starMass / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\n/**\n * Generic preset for generating worlds.\n */\nexport abstract class Preset {\n  /** Preset identifier. */\n  private _id: string;\n\n  /** Form used to set settings. */\n  private _form: Form;\n\n  /**\n   * @param id The preset identifier.\n   * @param form The preset form.\n   */\n  constructor(id: string, form: Form) {\n    this._id = id;\n    this._form = form;\n  }\n\n  /**\n   * Gets the preset's id;\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the preset's form.\n   */\n  get form(): Form {\n    return this._form;\n  }\n\n  /**\n   * Initialize the preset.\n   * @param world World to generate.\n   */\n  public abstract generate(world: World): void;\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private _scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  /** Canvas width. */\n  private width: number;\n\n  /** Canvas height. */\n  private height: number;\n\n  /** Zoom change callback. */\n  private onZoomChangeCallback: () => void;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this._scale = 1.0;\n    this.aspectRatio = height / width;\n    this.width = width;\n    this.height = height;\n    this.updateTransform();\n    this.onZoomChangeCallback = () => {};\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Sets the view's scale.\n   */\n  public set scale(scale: number) {\n    this._scale = scale;\n    this.updateTransform();\n    this.onZoomChangeCallback();\n  }\n\n  /**\n   * Gets the view's scale.\n   */\n  public get scale(): number {\n    return this._scale;\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.scale /= multiplier;\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    let normalized = new Vec2(screen.x / this.width, screen.y / this.height);\n    normalized = normalized.sub(new Vec2(0.5, 0.5)).mul(2.0);\n    normalized.y *= -1.0;\n    return this.transform.inverse().mul(normalized);\n  }\n\n  /**\n   * Sets the zoom change callback.\n   * @param callback The callback.\n   */\n  public setOnZoomChange(callback: () => void): void {\n    this.onZoomChangeCallback = callback;\n  }\n\n  /**\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {DrawCircle} from './draw_circle';\nimport {View} from './view';\n\nexport {View};\n\ntype DrawCommand = DrawCircle;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.05, 0.05, 0.05);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  public view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count */\n  private circle: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","import {Vec2} from '../math';\nimport {Renderer} from '../renderer';\n\n/**\n * Generic tool class.\n */\nexport abstract class Tool {\n  /**\n   * Called when the tool is activated.\n   */\n  public abstract activate(): void;\n\n  /**\n   * Called every frame to draw tool related stuff.\n   * @param renderer The renderer to draw to.\n   */\n  public abstract draw(renderer: Renderer): void;\n\n  /**\n   * Called when the mouse button is pressed.\n   * @param position Mouse position.\n   */\n  public abstract onMouseDown(position: Vec2): void;\n\n  /**\n   * Called when the mouse button is released.\n   * @param position Mouse position.\n   */\n  public abstract onMouseUp(position: Vec2): void;\n\n  /**\n   * Called when the mouse is moved.\n   * @param position Mouse position.\n   */\n  public abstract onMouseMove(position: Vec2): void;\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Renderer, View} from '../renderer';\nimport * as UI from '../ui';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/** Velocity multiplier for throwing bodies. */\nconst VELOCITY_MULTIPLIER = 0.001;\n\n/**\n * Tool for adding bodies to the world.\n */\nexport class BodyAdder extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Slider which indicates the body's mass. */\n  private mass: UI.Slider;\n\n  /** Body being added. */\n  private body: Body;\n\n  /** Mouse down position. */\n  private mouseDown: Vec2|null;\n\n  /** Has the mouse moved? */\n  private mouseMoved: boolean;\n\n  /**\n   * @param world The world to add bodies to.\n   * @param view The view being used to render.\n   * @param mass The slider which indicates the body's mass.\n   */\n  constructor(world: World, view: View, mass: UI.Slider) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.mass = mass;\n  }\n\n  public override activate(): void {\n    this.body = new Body();\n    this.mouseDown = null;\n    this.mouseMoved = false;\n  }\n\n  public override draw(renderer: Renderer): void {\n    if (!this.mouseMoved) return;\n\n    this.body.mass = this.mass.value;\n    renderer.drawCircle(this.body.position, this.body.radius, this.body.color);\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.body.position = this.view.screenToWorld(position);\n    this.mouseDown = position;\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    if (this.mouseDown) {\n      let delta = position.sub(this.mouseDown);\n      delta.y *= -1.0;\n      this.body.velocity = delta.mul(VELOCITY_MULTIPLIER / this.view.scale);\n      this.world.addBody(this.body);\n\n      this.mouseDown = null;\n      this.body = new Body();\n      this.body.position = this.view.screenToWorld(position);\n    }\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.mouseDown) this.body.position = this.view.screenToWorld(position);\n    this.mouseMoved = true;\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for removing bodies to the world.\n */\nexport class BodyRemover extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /**\n   * @param world The world to remove bodies from.\n   * @param view The view being used to render.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n  }\n\n  public override activate(): void {\n    // Do nothing.\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(_: Vec2): void {\n    // Do nothing.\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    this.world.removeBody(this.view.screenToWorld(position));\n  }\n\n  public override onMouseMove(_: Vec2): void {\n    // Do nothing.\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\n\nimport {Tool} from './tool';\n\n/** Camera movement sensibility. */\nconst SENSIBILITY = 0.001;\n\n/**\n * Tool for moving the camera.\n */\nexport class CameraMover extends Tool {\n  /** View being used to render. */\n  private view: View;\n\n  /** Last mouse position. */\n  private lastPosition: Vec2|null;\n\n  /**\n   * @param view The view being used to render.\n   */\n  constructor(view: View) {\n    super();\n    this.view = view;\n  }\n\n  public override activate(): void {\n    this.lastPosition = null;\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.lastPosition = position;\n  }\n\n  public override onMouseUp(_: Vec2): void {\n    this.lastPosition = null;\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.lastPosition) return;\n\n    let delta = position.sub(this.lastPosition);\n    delta.y *= -1.0;\n    this.lastPosition = position;\n\n    this.view.move(delta.mul(SENSIBILITY));\n  }\n}\n","import {Vec2} from './math';\nimport * as Presets from './presets';\nimport {Renderer} from './renderer';\nimport * as Tools from './tools';\nimport * as UI from './ui';\nimport {World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.00001;\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Tools map. */\n  private tools: Map<string, Tools.Tool>;\n\n  /** Current tool. */\n  private tool: Tools.Tool|undefined;\n\n  /** Preset selector. */\n  private presetSelector: Presets.Selector;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Zoom in button. */\n  private zoomInButton: UI.Button;\n\n  /** Zoom out button. */\n  private zoomOutButton: UI.Button;\n\n  /** Body adder toggle. */\n  private bodyAdderToggle: UI.Toggle;\n\n  /** Body remover toggle. */\n  private bodyRemoverToggle: UI.Toggle;\n\n  /** Camera mover toggle. */\n  private cameraMoverToggle: UI.Toggle;\n\n  /** Tools switch. */\n  private toolSwitch: UI.Switch;\n\n  /** Simulation speed slider. */\n  private simulationSpeed: UI.Slider;\n\n  /** New body mass slider. */\n  private bodyMass: UI.Slider;\n\n  /** Last mouse position. */\n  private mousePos: Vec2;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n    this.renderer.view.setOnZoomChange(this.onMouseMove.bind(this));\n\n    // Create physics world.\n    this.world = new World();\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseDown();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mouseup', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseUp();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mousemove', e => {\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseMove();\n      e.preventDefault();\n    });\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      this.renderer.view.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI sliders\n    this.bodyMass =\n        new UI.Slider(document.getElementById('bodyMass') as HTMLDivElement, 0.1, 100000000.0, 1.0, 'exponential');\n    this.bodyMass.value = 1.0;\n    this.simulationSpeed =\n        new UI.Slider(document.getElementById('simulationSpeed') as HTMLDivElement, 0.01, 100.0, 1.0, 'exponential');\n    this.simulationSpeed.value = 1.0;\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n    this.zoomInButton = new UI.Button(document.getElementById('zoomInButton') as HTMLButtonElement);\n    this.zoomOutButton = new UI.Button(document.getElementById('zoomOutButton') as HTMLButtonElement);\n\n    // Initialize UI toggles\n    this.bodyAdderToggle = new UI.Toggle(document.getElementById('bodyAdderToggle') as HTMLButtonElement);\n    this.bodyRemoverToggle = new UI.Toggle(document.getElementById('bodyRemoverToggle') as HTMLButtonElement);\n    this.cameraMoverToggle = new UI.Toggle(document.getElementById('cameraMoverToggle') as HTMLButtonElement);\n\n    // Initialize tools\n    this.tools = new Map<string, Tools.Tool>();\n    this.tools.set('bodyAdder', new Tools.BodyAdder(this.world, this.renderer.view, this.bodyMass));\n    this.tools.set('bodyRemover', new Tools.BodyRemover(this.world, this.renderer.view));\n    this.tools.set('cameraMover', new Tools.CameraMover(this.renderer.view));\n    this.tool = undefined;\n\n    // Intiailize UI tool switch\n    this.toolSwitch = new UI.Switch();\n    this.toolSwitch.add('bodyAdder', this.bodyAdderToggle);\n    this.toolSwitch.add('bodyRemover', this.bodyRemoverToggle);\n    this.toolSwitch.add('cameraMover', this.cameraMoverToggle);\n    this.toolSwitch.setOnStateChange(tool => {\n      this.tool = this.tools.get(tool);\n      if (this.tool) this.tool.activate();\n    });\n\n    // Initialize preset selector\n    this.presetSelector = new Presets.Selector(this.world);\n    this.presetSelector.add(new Presets.SimpleStarSystem());\n    this.presetSelector.finish();\n    this.resetButton.setOnClick(() => {\n      this.world.clear();\n      this.presetSelector.apply();\n    });\n    this.settingsButton.setOnClick(() => {\n      if (this.presetSelector.open)\n        this.presetSelector.hide();\n      else\n        this.presetSelector.show();\n    });\n\n    // Zoom callbacks\n    this.zoomInButton.setOnClick(() => {\n      this.renderer.view.zoom(0.75);\n    });\n    this.zoomOutButton.setOnClick(() => {\n      this.renderer.view.zoom(1.25);\n    });\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.simulationSpeed.value * dt * TIME_SCALE);\n\n    if (this.tool) this.tool.draw(this.renderer);\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(): void {\n    if (this.tool) this.tool.onMouseDown(this.mousePos);\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(): void {\n    if (this.tool) this.tool.onMouseUp(this.mousePos);\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(): void {\n    if (this.tool) this.tool.onMouseMove(this.mousePos);\n  }\n}\n","import {App} from './app/app';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.start();\n});\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","determinant","adjunt","els","inverse","det","Error","static","v3","v4","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","addEventListener","_","setOnClick","callback","$cef218302c5f0c2e$export$472062a354075cee","slider","min","max","initial","type","_root","_input","querySelector","_display","_type","updateDisplay","bind","toString","value","step","log10","valueAsNumber","pow","innerText","toExponential","toFixed","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","stateChangeCallback","current","name","forEach","toggle","activated","name1","push","setOnActivated","onToggleActivated","setOnDeactivated","onToggleDeactivated","setOnStateChange","name2","name3","$716df50103fb11f0$export$bea8ebba691c5813","super","onActivatedCallback","onDeactivatedCallback","onClick","classList","callback1","$62cbb34c05d40bda$export$a7fed597f4b8afd8","root","_fields","Map","console","log","_cancel","_submit","id","document","addToggle","id1","HTMLButtonElement","set","addSwitch","id2","get","addSlider","id3","HTMLDivElement","show","hide","open","contains","isOn","id4","id5","id6","setOnCancel","setOnSubmit","$a79f82db3f359dd2$export$d15f4cd5286f9b1e","world","_world","_presets","_selected","_form","create","_open","preset","finish","map","p","onSelectionCanceled","onSelectionSubmitted","form","apply","clear","generate","onSettingsSubmitted","find","onSettingsCanceled","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","mix","other1","multiplier","divider","random","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","position","velocity","color","_position","_velocity","_mass","_radius","PI","radius","applyForce","force","dt","applyImpulse","impulse","update","dt1","intersects","merge","colorA","colorB","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","body","removeBody","splice","i1","body1","body2","offset","sqrDistance","i2","draw","renderer","drawCircle","$3a25dab873681161$export$ecebc671cacb07dd","_id","starMass","bodyCount","bodyMinMass","bodyMaxMass","bodyMinDistance","bodyMaxDistance","star","angle","distance","cos","sin","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","_scale","aspectRatio","updateTransform","onZoomChangeCallback","getTransform","transform","setPosition","scale","move","delta","zoom","screenToWorld","screen","normalized","setOnZoomChange","translation","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","flush","clearColor","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$5ef383d4445cbb93$export$724f6b867059ef5f","$f3eb87607daa86d7$export$4b6be7ec1f210ec9","activate","mouseDown","mouseMoved","onMouseDown","onMouseUp","position1","onMouseMove","position2","$13cafb5802810351$export$26846ab24a403d03","_1","$17e906f5681ecd0b$export$1efad73e3d99c388","lastPosition","$b4bfc8ad905cb117$export$86fbec116b87613f","getElementById","window","innerWidth","innerHeight","e","button","mousePos","offsetX","offsetY","preventDefault","event","deltaY","bodyMass","simulationSpeed","resetButton","settingsButton","zoomInButton","zoomOutButton","bodyAdderToggle","bodyRemoverToggle","cameraMoverToggle","tools","tool","undefined","toolSwitch","presetSelector","start","animate","requestAnimationFrame"],"version":3,"file":"index.cc83e6d5.js.map"}