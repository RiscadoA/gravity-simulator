{"mappings":"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","sources":["src/app/math.ts","src/app/renderer/color.ts","src/app/renderer/draw_circle.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/ui/slider.ts","src/app/ui/button.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/body.ts","src/app/world.ts","src/main.ts","src/app/app.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[0 * 3 + 1] * other.y;\n      result.x += this.elements[0 * 3 + 2];\n      result.y += this.elements[1 * 3 + 0] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[1 * 3 + 2];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        const sign = (i + j) % 2 === 0 ? 1 : -1;\n        result.elements[i * 3 + j] = sign *\n            (this.elements[(i + 1) % 3 * 3 + (j + 1) % 3] * this.elements[(i + 2) % 3 * 3 + (j + 2) % 3] -\n             this.elements[(i + 1) % 3 * 3 + (j + 2) % 3] * this.elements[(i + 2) % 3 * 3 + (j + 1) % 3]);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this.scale = 1.0;\n    this.aspectRatio = height / width;\n    this.updateTransform();\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Sets the view's scale.\n   * @param scale The new scale.\n   */\n  public setScale(scale: number): void {\n    this.scale = scale;\n    this.updateTransform();\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.setScale(this.scale / multiplier);\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    return this.transform.inverse().mul(screen);\n  }\n\n  /**s\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {DrawCircle} from './draw_circle';\nimport {View} from './view';\n\ntype DrawCommand = DrawCircle;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.05, 0.05, 0.05);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  private view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count */\n  private circle: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(factor: number): void {\n    this.view.zoom(factor);\n  }\n\n  /**\n   * Moves the view.\n   * @param delta The delta to move the view by.\n   */\n  public move(delta: Vec2): void {\n    this.view.move(delta);\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    // Normalize screen coordinates.\n    screen.x = 2.0 * (screen.x / this.canvas.width) - 1.0;\n    screen.y = 2.0 * (screen.y / this.canvas.height) - 1.0;\n    let world = this.view.screenToWorld(screen);\n    return world;\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's range input element. */\n  private input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private display: HTMLElement;\n\n  /** The slider's type. */\n  private type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param type The slider type.\n   */\n  constructor(input: HTMLInputElement, display: HTMLElement, type: SliderType) {\n    this.input = input;\n    this.display = display;\n    this.type = type;\n\n    this.input.addEventListener('input', this.updateDisplay.bind(this));\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this.type) {\n      case 'linear':\n        return this.input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this.input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this.type) {\n      case 'linear':\n        this.input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this.input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this.value < 0.01 || this.value > 9999.99)\n      this.display.innerText = this.value.toExponential(1);\n    else\n      this.display.innerText = this.value.toFixed(2);\n  }\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n  }\n\n  /**\n   * Callback for when a toggle is clicked.\n   * @param name The name of the toggle that was clicked.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated) this.onActivatedCallback();\n  }\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 100.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private mass: number;\n  /** Body's radius. */\n  private radius: number;\n  /** Body's position. */\n  private position: Vec2;\n  /** Body's velocity. */\n  private velocity: Vec2;\n  /** Body's color. */\n  private color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor(mass: number, position: Vec2, velocity: Vec2, color: Color) {\n    this.setMass(mass);\n    this.position = position;\n    this.velocity = velocity;\n    this.color = color;\n  }\n\n  /**\n   * Gets the body's mass.\n   * @returns The body's mass.\n   */\n  public getMass(): number {\n    return this.mass;\n  }\n\n  /**\n   * Gets the body's radius.\n   * @returns The body's radius.\n   */\n  public getRadius(): number {\n    return this.radius;\n  }\n\n  /**\n   * Gets the body's position.\n   * @returns The 2D vector which represents the body's position.\n   */\n  public getPosition(): Vec2 {\n    return this.position;\n  }\n\n  /**\n   * Gets the body's velocity.\n   * @returns The body's velocity.\n   */\n  public getVelocity(): Vec2 {\n    return this.velocity;\n  }\n\n  /**\n   * Gets the body's color.\n   * @return The body's color.\n   */\n  public getColor(): Color {\n    return this.color;\n  }\n\n  /**\n   * Sets the body's mass.\n   * @param mass The body's new mass.\n   */\n  public setMass(mass: number): void {\n    this.mass = mass;\n    this.radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    const mass = this.mass + other.mass;\n    const position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(mass);\n    const velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(mass);\n\n    const colorA = this.color.mul(this.mass / mass);\n    const colorB = other.color.mul(other.mass / mass);\n    const color = colorA.add(colorB);\n    return new Body(mass, position, velocity, color);\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param mass The mass of the body.\n   * @param position The initial position of the body.\n   * @param velocity The initial velocity of the body.\n   */\n  public addBody(mass: number, position: Vec2, velocity: Vec2): void {\n    this.bodies.push(new Body(mass, position, velocity, Color.random().add(new Color(0.1, 0.1, 0.1))));\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param position The position of the body to remove.\n   */\n  public removeBody(position: Vec2): void {\n    for (let i = 0; i < this.bodies.length; i++)\n      if (this.bodies[i].intersects(position)) this.bodies.splice(i, 1);\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.getPosition().sub(body2.getPosition());\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.getMass() * body2.getMass() / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].getPosition(), this.bodies[i].getRadius(), this.bodies[i].getColor());\n    }\n  }\n}\n","import {App} from './app/app';\n\nconst app = new App();\napp.start();\n","import {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport * as UI from './ui';\nimport {GRAVITY_CONSTANT, World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.00001;\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Add body toggle. */\n  private addBodyToggle: UI.Toggle;\n\n  /** Remove body toggle. */\n  private removeBodyToggle: UI.Toggle;\n\n  /** Move camera toggle. */\n  private moveCameraToggle: UI.Toggle;\n\n  /** Input mode switch. */\n  public inputMode: UI.Switch;\n\n  /** Simulation speed slider. */\n  private speed: UI.Slider;\n\n  /** New body mass slider. */\n  private mass: UI.Slider;\n\n  /** Stores the first mouse down coordinates. Null if the mouse isn't down. */\n  private mouseDown: Vec2|null = null;\n\n  /** Stores the last mouse position. */\n  private lastMousePosition: Vec2;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\n    canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\n    canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      this.renderer.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n\n    // Initialize UI toggles and switch\n    this.addBodyToggle = new UI.Toggle(document.getElementById('addBodyToggle') as HTMLButtonElement);\n    this.removeBodyToggle = new UI.Toggle(document.getElementById('removeBodyToggle') as HTMLButtonElement);\n    this.moveCameraToggle = new UI.Toggle(document.getElementById('moveCameraToggle') as HTMLButtonElement);\n    this.inputMode = new UI.Switch();\n    this.inputMode.add('addBody', this.addBodyToggle);\n    this.inputMode.add('removeBody', this.removeBodyToggle);\n    this.inputMode.add('moveCamera', this.moveCameraToggle);\n\n    // Initialize UI sliders\n    this.speed = new UI.Slider(\n        document.getElementById('speedInput') as HTMLInputElement, document.getElementById('speedValue') as HTMLElement,\n        'exponential');\n    this.speed.value = 1.0;\n    this.mass = new UI.Slider(\n        document.getElementById('massInput') as HTMLInputElement, document.getElementById('massValue') as HTMLElement,\n        'linear');\n    this.mass.value = 1.0;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n\n    // Create physics world.\n    this.world = new World();\n\n    // Create a few bodies.\n    const CENTRAL_MASS = 1000.0;\n    this.world.addBody(1000000.0, new Vec2(-100.0, 0.0), new Vec2(0.1, 0.2));\n    this.world.addBody(CENTRAL_MASS, new Vec2(0.0, 0.0), new Vec2(0.0, 0.0));\n    ;\n    for (let i = 0; i < 100; ++i) {\n      const mass = 0.1;\n      const angle = (i / 100.0) * Math.PI * 2;\n      const distance = 1.0;\n      const pos = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      const vel = pos.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * (CENTRAL_MASS) / distance));\n      this.world.addBody(mass, pos, vel);\n    }\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.speed.value * dt * TIME_SCALE);\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(event: MouseEvent): void {\n    if (event.button != 0) return;\n    this.mouseDown = new Vec2(event.offsetX, event.offsetY);\n    this.lastMousePosition = this.mouseDown;\n    event.preventDefault();\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(event: MouseEvent): void {\n    if (event.button != 0) return;\n\n    const mousePosition = new Vec2(event.offsetX, event.offsetY);\n    let delta = mousePosition.sub(this.mouseDown!);\n    delta.y *= -1.0;\n\n    switch (this.inputMode.current) {\n      case 'addBody':\n        this.world.addBody(this.mass.value, this.renderer.screenToWorld(this.mouseDown!), delta.mul(0.001));\n        break;\n      case 'removeBody':\n        this.world.removeBody(this.renderer.screenToWorld(mousePosition));\n        break;\n    }\n\n    this.mouseDown = null;\n    event.preventDefault();\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(event: MouseEvent): void {\n    if (this.mouseDown === null) return;\n\n    if (this.inputMode.current == 'moveCamera') {\n      const mousePosition = new Vec2(event.offsetX, event.offsetY);\n      const delta = mousePosition.sub(this.lastMousePosition);\n      this.lastMousePosition = mousePosition;\n      this.renderer.move((new Vec2(delta.x, -delta.y)).mul(0.001));\n    }\n\n    event.preventDefault();\n  }\n}\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","determinant","adjunt","sign","inverse","det","Error","static","v3","v4","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","min","mix","other1","multiplier","divider","random","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","radius","color","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","position","scale","aspectRatio","updateTransform","getTransform","transform","setPosition","setScale","move","delta","zoom","screenToWorld","screen","translation","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","drawCircle","push","factor","flush","clearColor","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$cef218302c5f0c2e$export$472062a354075cee","input","display","type","addEventListener","updateDisplay","bind","value","valueAsNumber","pow","log10","innerText","toExponential","toFixed","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","_","setOnClick","callback","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","current","name","forEach","toggle","activated","name1","setOnActivated","onToggleActivated","name2","$716df50103fb11f0$export$bea8ebba691c5813","super","onActivatedCallback","onClick","classList","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","velocity","setMass","getMass","getRadius","getPosition","getVelocity","getColor","mass1","PI","applyForce","force","dt","applyImpulse","impulse","update","dt1","intersects","merge","colorA","colorB","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","removeBody","position1","splice","i1","body1","body2","offset","sqrDistance","i2","draw","renderer","mouseDown","document","getElementById","window","innerWidth","innerHeight","onMouseDown","onMouseUp","onMouseMove","event","deltaY","preventDefault","resetButton","settingsButton","addBodyToggle","removeBodyToggle","moveCameraToggle","inputMode","speed","world","angle","distance","pos","cos","sin","vel","$5dd98dba661ba3e2$export$a8b378091757e998","start","animate","requestAnimationFrame","button","offsetX","offsetY","lastMousePosition","event1","mousePosition","event2"],"version":3,"file":"index.d3146c8b.js.map"}