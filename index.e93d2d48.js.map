{"mappings":"MAGaA,EASRC,YACSC,EAAWC,GACrBC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAQJE,IAAIC,GACT,OAAO,IAAIN,EAAKI,KAAKF,EAAII,EAAEJ,EAAGE,KAAKD,EAAIG,EAAEH,GAQpCI,IAAIC,GACT,OAAO,IAAIR,EAAKI,KAAKF,EAAIM,EAAEN,EAAGE,KAAKD,EAAIK,EAAEL,GAQpCM,IAAIC,GACT,OAAO,IAAIV,EAAKI,KAAKF,EAAIQ,EAAGN,KAAKD,EAAIO,GAQhCC,IAAIC,GACT,OAAO,IAAIZ,EAAKI,KAAKF,EAAIU,EAAGR,KAAKD,EAAIS,GAQhCC,IAAIC,GACT,OAAOV,KAAKF,EAAIY,EAAEZ,EAAIE,KAAKD,EAAIW,EAAEX,EAO5BY,YACL,OAAOX,KAAKS,IAAIT,MAOXY,SACL,OAAOC,KAAKC,KAAKd,KAAKW,aAOjBI,YACL,OAAOf,KAAKO,IAAIP,KAAKY,UAOhBI,gBACL,OAAO,IAAIpB,GAAMI,KAAKD,EAAGC,KAAKF,UAOrBmB,EAQRpB,YACSqB,EAAqB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IACxElB,KAAKkB,SAAW,IAAIC,aAAaD,GAyB5Bb,IAAIe,GACT,GAAIA,aAAiBH,EAAM,CACzB,MAAMI,EAAS,IAAIJ,EACnB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAKD,GAAOxB,KAAKkB,SAAa,EAAJI,EAAQG,GAAKL,EAAMF,SAAa,EAAJO,EAAQF,GACrFF,EAAOH,SAAa,EAAJI,EAAQC,GAAKC,EAGjC,OAAOH,EACF,GAAID,aAAiBxB,EAAM,CAChC,MAAMyB,EAAS,IAAIzB,EAAK,EAAK,GAO7B,OANAyB,EAAOvB,GAAKE,KAAKkB,SAAS,GAAaE,EAAMtB,EAC7CuB,EAAOvB,GAAKE,KAAKkB,SAAS,GAAaE,EAAMrB,EAC7CsB,EAAOvB,GAAKE,KAAKkB,SAAS,GAC1BG,EAAOtB,GAAKC,KAAKkB,SAAS,GAAaE,EAAMtB,EAC7CuB,EAAOtB,GAAKC,KAAKkB,SAAS,GAAaE,EAAMrB,EAC7CsB,EAAOtB,GAAKC,KAAKkB,SAAS,GACnBG,EACF,CACL,MAAMA,EAAS,IAAIJ,EACnB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAOH,SAASI,GAAKtB,KAAKkB,SAASI,GAAKF,EACpE,OAAOC,GAQJK,YACL,MAAML,EAAS,IAAIJ,EACnB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAOH,SAAa,EAAJI,EAAQC,GAAKvB,KAAKkB,SAAa,EAAJK,EAAQD,GAGvD,OAAOD,EAOFM,cACL,OAAO3B,KAAKkB,SAAS,IAChBlB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,IAChGlB,KAAKkB,SAAS,IACblB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,IAChGlB,KAAKkB,SAAS,IACblB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,GAAalB,KAAKkB,SAAS,IAO/FU,SACL,MAAMP,EAAS,IAAIJ,EACbY,EAAM7B,KAAKkB,SAUjB,OATAG,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GACpFR,EAAOH,SAAS,GAAaW,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAAaA,EAAI,GAC7ER,EAOFS,UACL,MAAMC,EAAM/B,KAAK2B,cACjB,GAAY,IAARI,EAAa,MAAM,IAAIC,MAAM,4CACjC,OAAOhC,KAAK4B,SAASvB,IAAI,EAAM0B,GAM9BE,kBAED,OAAO,IAAIhB,EAMVgB,mBACuBC,GACxB,OAAO,IAAIjB,EAAK,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAKiB,EAAEpC,EAAGoC,EAAEnC,EAAG,IAOxDkC,aACiBE,GAClB,OAAO,IAAIlB,EAAK,CAACkB,EAAErC,EAAG,EAAK,EAAK,EAAKqC,EAAEpC,EAAG,EAAK,EAAK,EAAK,IAOxDkC,gBACoBG,GACrB,MAAMC,EAAIxB,KAAKyB,IAAIF,GACb9B,EAAIO,KAAK0B,IAAIH,GACnB,OAAO,IAAInB,EAAK,CAACoB,EAAG/B,EAAG,GAAMA,EAAG+B,EAAG,EAAK,EAAK,EAAK,WCpPhCG,EAUjB3C,YACS4C,EAAYC,EAAkB,MACxC1C,KAAK2C,IAAMF,EACXzC,KAAK4C,MAAQF,EAMXD,SACF,OAAOzC,KAAK2C,IAMVD,WACF,OAAO1C,KAAK4C,aC9BHC,EASRhD,YACSiD,GACV9C,KAAK8C,QAAUA,EACf9C,KAAK+C,gBAAe,OACpB/C,KAAK8C,QAAQE,iBAAiB,SAAUC,GAAMjD,KAAK+C,oBAM9CG,WAAWC,GAChBnD,KAAK+C,gBAAkBI,SCfdC,EAoBRvD,YACSwD,EAAwBC,EAAaC,EAAaC,EAAiBC,GAO7E,OANAzD,KAAK0D,MAAQL,EACbrD,KAAK2D,OAAS3D,KAAK0D,MAAME,cAAc,SACvC5D,KAAK6D,SAAW7D,KAAK0D,MAAME,cAAc,OACzC5D,KAAK8D,MAAQL,EAGLzD,KAAK8D,OACX,IAAK,UACH9D,KAAK2D,OAAOL,IAAMA,EAAIS,WACtB/D,KAAK2D,OAAOJ,IAAMA,EAAIQ,WACtB/D,KAAK2D,OAAOK,MAAQR,EAAQO,WAC5B/D,KAAK2D,OAAOM,KAAO,GAAIF,WACvB,MACF,IAAK,SACH/D,KAAK2D,OAAOL,IAAMA,EAAIS,WACtB/D,KAAK2D,OAAOJ,IAAMA,EAAIQ,WACtB/D,KAAK2D,OAAOK,MAAQR,EAAQO,WAC5B/D,KAAK2D,OAAOM,KAAO,GAAIF,WACvB,MACF,IAAK,cACH/D,KAAK2D,OAAOL,IAAMzC,KAAKqD,MAAMZ,GAAKS,WAClC/D,KAAK2D,OAAOJ,IAAM1C,KAAKqD,MAAMX,GAAKQ,WAClC/D,KAAK2D,OAAOK,MAAQnD,KAAKqD,MAAMV,GAASO,WACxC/D,KAAK2D,OAAOM,KAAO,GAAIF,WAI3B/D,KAAK2D,OAAOX,iBAAiB,QAAShD,KAAKmE,cAAcC,KAAKpE,OAC9DA,KAAKmE,gBAMIH,YACT,OAAQhE,KAAK8D,OACX,IAAK,UACL,IAAK,SACH,OAAO9D,KAAK2D,OAAOU,cACrB,IAAK,cACH,OAAOxD,KAAKyD,IAAI,GAAMtE,KAAK2D,OAAOU,gBAO7BL,UAAMA,GACf,OAAQhE,KAAK8D,OACX,IAAK,UACL,IAAK,SACH9D,KAAK2D,OAAOU,cAAgBL,EAC5B,MACF,IAAK,cACHhE,KAAK2D,OAAOU,cAAgBxD,KAAKqD,MAAMF,GAI3ChE,KAAKmE,gBAMCA,gBACa,YAAfnE,KAAK8D,MACP9D,KAAK6D,SAASU,UAAYvE,KAAKgE,MAAMD,WAC5B/D,KAAKgE,MAAQ,KAAQhE,KAAKgE,MAAQ,QAC3ChE,KAAK6D,SAASU,UAAYvE,KAAKgE,MAAMQ,cAAc,GAEnDxE,KAAK6D,SAASU,UAAYvE,KAAKgE,MAAMS,QAAQ,UC/FtCC,gBAYT1E,KAAK2E,MAAQ,GACb3E,KAAK4E,QAAU,GACf5E,KAAK6E,oBAAuB5B,MAMnB6B,cACT,OAAO9E,KAAK2E,MAMHG,YAAQC,GACb/E,KAAK2E,QAAUI,IACnB/E,KAAK4E,QAAQI,SAAQC,GAAUA,EAAO,GAAGC,UAAYD,EAAO,KAAOF,IACnE/E,KAAK2E,MAAQI,EACb/E,KAAK6E,oBAAoBE,IAQpB9E,IAAIkF,EAAcF,GACvBjF,KAAK4E,QAAQQ,KAAK,CAACD,EAAMF,IACzBA,EAAOI,gBAAc,IAAOrF,KAAKsF,kBAAkBH,KACnDF,EAAOM,kBAAgB,IAAOvF,KAAKwF,oBAAoBL,KAOlDM,iBAAiBtC,GACtBnD,KAAK6E,oBAAsB1B,EAOrBmC,kBAAkBI,GACxB1F,KAAK8E,QAAUY,EAOTF,oBAAoBG,GACtB3F,KAAK2E,QAAUgB,IAAM3F,KAAK8E,QAAU,WClE/Bc,UAAe/C,EAYvBhD,YACSiD,GACV+C,MAAM/C,GACN9C,KAAK2E,OAAQ,EACb3E,KAAK8F,oBAAmB,OACxB9F,KAAK+F,sBAAqB,OAC1B/F,KAAKkD,WAAWlD,KAAKgG,QAAQ5B,KAAKpE,OAMzBkF,gBACT,OAAOlF,KAAK2E,MAMHO,cAAUP,GACnB3E,KAAK2E,MAAQA,EACb3E,KAAK8C,QAAQmD,UAAUhB,OAAO,KAAMN,GAO/BU,eAAelC,GACpBnD,KAAK8F,oBAAsB3C,EAOtBoC,iBAAiBW,GACtBlG,KAAK+F,sBAAwBG,EAOvBF,UACNhG,KAAKkF,WAAalF,KAAKkF,UACnBlF,KAAKkF,UACPlF,KAAK8F,sBAEL9F,KAAK+F,+BCrDEI,EAeRtG,YACSuG,GACVpG,KAAKqG,QAAU,IAAIC,IACnBtG,KAAK0D,MAAQ0C,EACbG,QAAQC,IAAIxG,KAAK0D,OACjB1D,KAAKyG,QAAU,IAAI5D,EAAO7C,KAAK0D,MAAME,cAAc,YACnD5D,KAAK0G,QAAU,IAAI7D,EAAO7C,KAAK0D,MAAME,cAAc,YAMlD3B,cACWQ,GACZ,OAAO,IAAI0D,EAAKQ,SAAS/C,cAAa,UAAWnB,MAO5CmE,UAAUC,GACf,MAAM/D,EAAU9C,KAAK0D,MAAME,cAAa,IAAKiD,KACzC/D,GAAWA,aAAmBgE,mBAChC9G,KAAKqG,QAAQU,IAAIF,EAAI,IAAIjB,EAAO9C,IAS7BkE,UAAUC,KAAerC,GAC9B,MAAMtE,EAAI,IAAIoE,EACdE,EAAQI,SAAQ1D,IACdtB,KAAK4G,UAAUtF,GACfhB,EAAEL,IAAIqB,EAAGtB,KAAKqG,QAAQa,IAAI5F,OAE5BtB,KAAKqG,QAAQU,IAAIE,EAAI3G,GAWhB6G,UAAUC,EAAY9D,EAAaC,EAAaC,EAAiBC,GACtE,MAAMX,EAAU9C,KAAK0D,MAAME,cAAa,IAAKwD,KACzCtE,GAAWA,aAAmBuE,gBAChCrH,KAAKqG,QAAQU,IAAIK,EAAI,IAAIhE,EAAON,EAASQ,EAAKC,EAAKC,EAASC,IAOzD6D,OACLtH,KAAK0D,MAAMuC,UAAUhB,OAAO,UAAU,GAMjCsC,OACLvH,KAAK0D,MAAMuC,UAAUhB,OAAO,UAAU,GAM7BuC,WACT,OAAQxH,KAAK0D,MAAMuC,UAAUwB,SAAS,UAQjCC,KAAKC,GACV,OAAQ3H,KAAKqG,QAAQa,IAAIS,GAAezC,UAQnC0C,SAASC,GACd,OAAQ7H,KAAKqG,QAAQa,IAAIW,GAAe7D,MAQnC8D,SAASC,GACd,OAAQ/H,KAAKqG,QAAQa,IAAIa,GAAejD,QAQnCkD,SAASC,EAAYtD,GACzB3E,KAAKqG,QAAQa,IAAIe,GAAenD,QAAUH,EAOtCuD,YAAY/E,GACjBnD,KAAKyG,QAAQvD,WAAWC,GAOnBgF,YAAYjC,GACjBlG,KAAK0G,QAAQxD,WAAWgD,UCnJfkC,EAkBRvI,YACSwI,GACVrI,KAAKsI,OAASD,EACdrI,KAAKuI,SAAW,GAChBvI,KAAKwI,UAAY,KACjBxI,KAAK4C,MAAQuD,EAAKsC,OAAO,YACzBzI,KAAK0I,OAAQ,EAORzI,IAAI0I,GACT3I,KAAKuI,SAASnD,KAAKuD,GACnB3I,KAAK4C,MAAMgE,UAAU+B,EAAOlG,IAMvBmG,OAAOpF,GACZxD,KAAK4C,MAAMoE,UAAU,YAAahH,KAAKuI,SAASM,KAAIC,GAAKA,EAAErG,MAC3DzC,KAAK4C,MAAMsF,YAAYlI,KAAK+I,oBAAoB3E,KAAKpE,OACrDA,KAAK4C,MAAMuF,YAAYnI,KAAKgJ,qBAAqB5E,KAAKpE,OACtDA,KAAKwI,UAAYxI,KAAKuI,SAASU,MAAKH,GAAKA,EAAErG,KAAOe,IAM7C8D,OACAtH,KAAK0I,QACR1I,KAAK4C,MAAM0E,OACPtH,KAAKwI,WACPxI,KAAK4C,MAAMoF,SAAS,SAAUhI,KAAKwI,UAAU/F,KAEjDzC,KAAK0I,OAAQ,EAMRnB,OACDvH,KAAKwI,WAAaxI,KAAKwI,UAAU9F,MAAQ1C,KAAKwI,UAAU9F,KAAK8E,MAAMxH,KAAKwI,UAAU9F,KAAK6E,OACvFvH,KAAK4C,MAAM4E,MAAMxH,KAAK4C,MAAM2E,OAChCvH,KAAK0I,OAAQ,EAMJlB,WACT,OAAOxH,KAAK0I,MAMPQ,QACLlJ,KAAKsI,OAAOa,QACRnJ,KAAKwI,WAAWxI,KAAKwI,UAAUY,SAASpJ,KAAKsI,QAM3CS,sBACN/I,KAAK4C,MAAM2E,OACXvH,KAAK0I,OAAQ,EAMPM,uBACN,MAAMrE,EAAQ3E,KAAK4C,MAAMkF,SAAS,UAClC9H,KAAK4C,MAAM2E,OAEXvH,KAAKwI,UAAYxI,KAAKuI,SAASU,MAAKH,GAAKA,EAAErG,KAAOkC,IAC9C3E,KAAKwI,UAAU9F,MACjB1C,KAAKwI,UAAU9F,KAAK4E,OACpBtH,KAAKwI,UAAU9F,KAAKwF,YAAYlI,KAAKqJ,mBAAmBjF,KAAKpE,OAC7DA,KAAKwI,UAAU9F,KAAKyF,YAAYnI,KAAKsJ,oBAAoBlF,KAAKpE,QAE9DA,KAAKsJ,sBAODD,qBACNrJ,KAAKwI,WAAW9F,MAAM6E,OACtBvH,KAAK4C,MAAM0E,OAMLgC,sBACNtJ,KAAKkJ,QACLlJ,KAAKwI,WAAW9F,MAAM6E,OACtBvH,KAAK0I,OAAQ,SC1HJa,UAAc/G,gBAEvBqD,MAAM,SAGQuD,SAASnG,WCTduG,EAeR3J,YACS4J,EAAWC,EAAWC,EAAWC,EAAY,GACvD5J,KAAKyJ,EAAIA,EACTzJ,KAAK0J,EAAIA,EACT1J,KAAK2J,EAAIA,EACT3J,KAAK4J,EAAIA,EAQJ3J,IAAImB,GACT,MAAMqI,EAAI5I,KAAKyC,IAAI,EAAKtD,KAAKyJ,EAAIrI,EAAMqI,GACjCC,EAAI7I,KAAKyC,IAAI,EAAKtD,KAAK0J,EAAItI,EAAMsI,GACjCC,EAAI9I,KAAKyC,IAAI,EAAKtD,KAAK2J,EAAIvI,EAAMuI,GACjCC,EAAI/I,KAAKyC,IAAI,EAAKtD,KAAK4J,EAAIxI,EAAMwI,GACvC,OAAO,IAAIJ,EAAMC,EAAGC,EAAGC,EAAGC,GAQrBC,IAAIC,GACT,MAAML,GAAKzJ,KAAKyJ,EAAIK,EAAML,GAAK,EACzBC,GAAK1J,KAAK0J,EAAII,EAAMJ,GAAK,EACzBC,GAAK3J,KAAK2J,EAAIG,EAAMH,GAAK,EACzBC,GAAK5J,KAAK4J,EAAIE,EAAMF,GAAK,EAC/B,OAAO,IAAIJ,EAAMC,EAAGC,EAAGC,EAAGC,GAQrBvJ,IAAI0J,GACT,MAAMN,EAAI5I,KAAKyC,IAAI,EAAKtD,KAAKyJ,EAAIM,GAC3BL,EAAI7I,KAAKyC,IAAI,EAAKtD,KAAK0J,EAAIK,GAC3BJ,EAAI9I,KAAKyC,IAAI,EAAKtD,KAAK2J,EAAII,GACjC,OAAO,IAAIP,EAAMC,EAAGC,EAAGC,EAAG3J,KAAK4J,GAQzBrJ,IAAIyJ,GACV,OAAOhK,KAAKK,IAAI,EAAM2J,GAMrB/H,gBAED,OAAO,IAAIuH,EAAM3I,KAAKoJ,SAAUpJ,KAAKoJ,SAAUpJ,KAAKoJ,iBCrE3CC,EAiBRrK,cAEDG,KAAKmK,KAAO,EACZnK,KAAKoK,SAAW,IAAIxK,EAAK,EAAK,GAC9BI,KAAKqK,SAAW,IAAIzK,EAAK,EAAK,GAC9BI,KAAKsK,MAAQd,EAAMS,SAAS5J,IAAI,IAAKJ,IAAI,IAAIuJ,EAAM,GAAK,GAAK,KAMpDY,eACT,OAAOpK,KAAKuK,UAMHH,aAASA,GAClBpK,KAAKuK,UAAY,IAAI3K,EAAKwK,EAAStK,EAAGsK,EAASrK,GAMrCsK,eACV,OAAOrK,KAAKwK,UAMHH,aAASA,GAClBrK,KAAKwK,UAAY,IAAI5K,EAAKyK,EAASvK,EAAGuK,EAAStK,GAMtCoK,WACT,OAAOnK,KAAKyK,MAMHN,SAAKA,GACdnK,KAAKyK,MAAQN,EACbnK,KAAK0K,QAAW,IAAa7J,KAAK8J,GAAM3K,KAAKmK,OAAS,EAAM,GAtEnC,IA4EhBS,aACT,OAAO5K,KAAK0K,QAQPG,WAAWC,EAAaC,GAC7B/K,KAAKgL,aAAaF,EAAMzK,IAAI0K,IAOvBC,aAAaC,GAClBjL,KAAKqK,SAAWrK,KAAKqK,SAASpK,IAAIgL,EAAQ5K,IAAI,EAAML,KAAKmK,OAOpDe,OAAOC,GACZnL,KAAKoK,SAAWpK,KAAKoK,SAASnK,IAAID,KAAKqK,SAAShK,IAAI8K,IAkB/CC,WAAWhK,GAChB,GAAIA,aAAiB8I,EAAM,CAIzB,OAFoBlK,KAAKoK,SAASjK,IAAIiB,EAAMgJ,UAAUzJ,cACnCX,KAAK4K,OAASxJ,EAAMwJ,SAAW,EAGlD,OAAO5K,KAAKoK,SAASjK,IAAIiB,GAAOT,aAAeX,KAAK4K,QAAU,EAS3DS,MAAMvB,GACX,IAAIH,EAAI,IAAIO,EAEZP,EAAEQ,KAAOnK,KAAKmK,KAAOL,EAAMK,KAC3BR,EAAES,SAAWpK,KAAKoK,SAAS/J,IAAIL,KAAKmK,MAAMlK,IAAI6J,EAAMM,SAAS/J,IAAIyJ,EAAMK,OAAO5J,IAAIoJ,EAAEQ,MACpFR,EAAEU,SAAWrK,KAAKqK,SAAShK,IAAIL,KAAKmK,MAAMlK,IAAI6J,EAAMO,SAAShK,IAAIyJ,EAAMK,OAAO5J,IAAIoJ,EAAEQ,MAEpF,MAAMmB,EAAStL,KAAKsK,MAAMjK,IAAIL,KAAKmK,KAAOR,EAAEQ,MACtCoB,EAASzB,EAAMQ,MAAMjK,IAAIyJ,EAAMK,KAAOR,EAAEQ,MAG9C,OAFAR,EAAEW,MAAQgB,EAAOrL,IAAIsL,GAEd5B,SC7IE6B,gBAMTxL,KAAKyL,OAAS,GAOTC,QAAQC,GACb3L,KAAKyL,OAAOrG,KAAKuG,GAOZC,WAAWxB,GAChB,IAAK,IAAI9I,EAAI,EAAGA,EAAItB,KAAKyL,OAAO7K,OAAQU,IAClCtB,KAAKyL,OAAOnK,GAAG8J,WAAWhB,IAAWpK,KAAKyL,OAAOI,OAAOvK,EAAG,GAM5D6H,QACLnJ,KAAKyL,OAAS,GAOTP,OAAOH,GAEZ,IAAK,IAAIzJ,EAAI,EAAGA,EAAItB,KAAKyL,OAAO7K,OAAQU,IACtCtB,KAAKyL,OAAOnK,GAAG4J,OAAOH,GAIxB,IAAK,IAAIe,EAAI,EAAGA,EAAI9L,KAAKyL,OAAO7K,OAAQkL,IACtC,IAAK,IAAIvK,EAAIuK,EAAI,EAAGvK,EAAIvB,KAAKyL,OAAO7K,OAAQW,IAAK,CAC/C,MAAMwK,EAAQ/L,KAAKyL,OAAOK,GACpBE,EAAQhM,KAAKyL,OAAOlK,GAGpB0K,EAASF,EAAM3B,SAASjK,IAAI6L,EAAM5B,UAClC8B,EAAcD,EAAOtL,YAErBmK,EADYmB,EAAOlL,YACDV,IA1DA,KA0DuB0L,EAAM5B,KAAO6B,EAAM7B,KAAO+B,GAGzElM,KAAKyL,OAAOlK,GAAGsJ,WAAWC,EAAOC,GACjC/K,KAAKyL,OAAOK,GAAGjB,WAAWC,EAAMzK,KAAI,GAAO0K,GAI/C,IAAK,IAAIoB,EAAI,EAAGA,EAAInM,KAAKyL,OAAO7K,OAAQuL,IACtC,IAAK,IAAI5K,EAAI4K,EAAI,EAAG5K,EAAIvB,KAAKyL,OAAO7K,OAAQW,IAEtCvB,KAAKyL,OAAOU,GAAGf,WAAWpL,KAAKyL,OAAOlK,MAExCvB,KAAKyL,OAAOU,GAAKnM,KAAKyL,OAAOU,GAAGd,MAAMrL,KAAKyL,OAAOlK,IAElDvB,KAAKyL,OAAOI,OAAOtK,EAAG,IAUvB6K,KAAKC,GACV,IAAK,IAAI/K,EAAI,EAAGA,EAAItB,KAAKyL,OAAO7K,OAAQU,IACtC+K,EAASC,WAAWtM,KAAKyL,OAAOnK,GAAG8I,SAAUpK,KAAKyL,OAAOnK,GAAGsJ,OAAQ5K,KAAKyL,OAAOnK,GAAGgJ,cCjF5EiC,UAAyB/J,gBAElCqD,MAAM,oBAGQuD,SAASf,GAEvB,MAAMmE,EAAO,IAAItC,EACjBsC,EAAKrC,KAAO,IACZ9B,EAAMqD,QAAQc,GAEd,IAAK,IAAIlL,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAC5B,MAAMc,EAAQvB,KAAKoJ,SAAWpJ,KAAK8J,GAAK,EAClC8B,EAA2B,EAAhB5L,KAAKoJ,SAAiB,EAGjC0B,EAAO,IAAIzB,EACjByB,EAAKxB,KAAuB,EAAhBtJ,KAAKoJ,SAAiB,EAClC0B,EAAKvB,SAAW,IAAIxK,EAAKiB,KAAKyB,IAAIF,GAASqK,EAAU5L,KAAK0B,IAAIH,GAASqK,GACvEd,EAAKtB,SAAWsB,EAAKvB,SAASpJ,gBAAgBD,YAAYV,IAAIQ,KAAKC,KDvBzC,KCuBiE0L,EAAKrC,KAAOsC,IACvGpE,EAAMqD,QAAQC,WCnBPe,UAAyBlK,gBAGlC,MAAME,EAAOyD,EAAKsC,OAAO,oBACzB/F,EAAKyE,UAAU,WAAY,GAAK,IAAa,IAAQ,eACrDzE,EAAKyE,UAAU,YAAa,EAAG,IAAM,IAAK,WAC1CzE,EAAKyE,UAAU,cAAe,GAAK,IAAU,EAAK,eAClDzE,EAAKyE,UAAU,cAAe,GAAK,IAAU,EAAK,eAClDzE,EAAKyE,UAAU,kBAAmB,GAAK,GAAM,EAAK,UAClDzE,EAAKyE,UAAU,kBAAmB,GAAK,GAAM,EAAK,UAClDtB,MAAM,mBAAoBnD,GAGZ0G,SAASf,GAEvB,MAAMsE,EAAW3M,KAAK0C,KAAMkF,SAAS,YAC/BgF,EAAY5M,KAAK0C,KAAMkF,SAAS,aACtC,IAAIiF,EAAc7M,KAAK0C,KAAMkF,SAAS,eAClCkF,EAAc9M,KAAK0C,KAAMkF,SAAS,eAClCmF,EAAkB/M,KAAK0C,KAAMkF,SAAS,mBACtCoF,EAAkBhN,KAAK0C,KAAMkF,SAAS,mBACtCkF,EAAcD,KAAcC,EAAaD,GAAe,CAACA,EAAaC,IACtEE,EAAkBD,KAAkBC,EAAiBD,GAAmB,CAACA,EAAiBC,IAG9F,MAAMR,EAAO,IAAItC,EACjBsC,EAAKrC,KAAOwC,EACZtE,EAAMqD,QAAQc,GAEd,IAAK,IAAIlL,EAAI,EAAGA,EAAIsL,IAAatL,EAAG,CAElC,MAAMqK,EAAO,IAAIzB,EACjByB,EAAKxB,KAAOtJ,KAAKoJ,UAAY6C,EAAcD,GAAeA,EAE1D,MAAMzK,EAAQvB,KAAKoJ,SAAWpJ,KAAK8J,GAAK,EAClC8B,EAAW5L,KAAKoJ,UAAY+C,EAAkBD,GAAmBA,EAAkBP,EAAK5B,OAASe,EAAKf,OAC5Ge,EAAKvB,SAAW,IAAIxK,EAAKiB,KAAKyB,IAAIF,GAASqK,EAAU5L,KAAK0B,IAAIH,GAASqK,GACvEd,EAAKtB,SAAWsB,EAAKvB,SAASpJ,gBAAgBD,YAAYV,IAAIQ,KAAKC,KF1CzC,KE0CiE6L,EAAWF,IACtGpE,EAAMqD,QAAQC,WC1CPsB,EAYRpN,YACSqN,EAAaC,EAAW7C,GAClCtK,KAAKkN,MAAQA,EACblN,KAAKmN,IAAMA,EACXnN,KAAKsK,MAAQA,SChBJ8C,EAYRvN,YACSwN,EAAczC,EAAgBN,GACxCtK,KAAKqN,OAASA,EACdrN,KAAK4K,OAASA,EACd5K,KAAKsK,MAAQA,SCjBJgD,cAuBCC,EAAeC,GACzBxN,KAAKoK,SAAW,IAAIxK,EAAK,EAAK,GAC9BI,KAAKyN,OAAS,EACdzN,KAAK0N,YAAcF,EAASD,EAC5BvN,KAAKuN,MAAQA,EACbvN,KAAKwN,OAASA,EACdxN,KAAK2N,kBACL3N,KAAK4N,qBAAoB,OAOpBC,eACL,OAAO7N,KAAK8N,UAOPC,YAAY3D,GACjBpK,KAAKoK,SAAWA,EAChBpK,KAAK2N,kBAMIK,UAAMA,GACfhO,KAAKyN,OAASO,EACdhO,KAAK2N,kBACL3N,KAAK4N,uBAMII,YACT,OAAOhO,KAAKyN,OAOPQ,KAAKC,GACVlO,KAAK+N,YAAY/N,KAAKoK,SAASnK,IAAIiO,EAAM3N,IAAIP,KAAKgO,SAO7CG,KAAKpE,GACV/J,KAAKgO,OAASjE,EAQTqE,cAAcC,GACnB,IAAIC,EAAa,IAAI1O,EAAKyO,EAAOvO,EAAIE,KAAKuN,MAAOc,EAAOtO,EAAIC,KAAKwN,QAGjE,OAFAc,EAAaA,EAAWnO,IAAI,IAAIP,EAAK,GAAK,KAAMS,IAAI,GACpDiO,EAAWvO,IAAK,EACTC,KAAK8N,UAAUhM,UAAUzB,IAAIiO,GAO/BC,gBAAgBpL,GACrBnD,KAAK4N,qBAAuBzK,EAMtBwK,kBACN,MAAMa,EAAcvN,EAAKuN,YAAY,IAAI5O,EAAKI,KAAKoK,SAAStK,EAAGE,KAAKoK,SAASrK,IACvEiO,EAAQ/M,EAAK+M,MAAM,IAAIpO,EAAKI,KAAKgO,MAAQhO,KAAK0N,YAAa1N,KAAKgO,QACtEhO,KAAK8N,UAAYU,EAAYnO,IAAI2N,ICrGrC,MAAMS,EAA0B,IAAIjF,EAAM,IAAM,IAAM,WAczCkF,EA0CR7O,YACS8O,GACV3O,KAAK4O,SAAW,GAGhB5O,KAAK2O,OAASA,EACd3O,KAAK6O,QAAU7O,KAAK2O,OAAOG,WAAW,SAGtC9O,KAAK+O,cACL/O,KAAKgP,oBAGLhP,KAAKiP,KAAO,IAAI3B,EAAKtN,KAAK2O,OAAOpB,MAAOvN,KAAK2O,OAAOnB,QAS/ClB,WAAWe,EAAczC,EAAgBN,GAC9CtK,KAAK4O,SAASxJ,KAAK,IAAIgI,EAAWC,EAAQzC,EAAQN,IAS5C4E,SAAShC,EAAaC,EAAWgC,GACvCnP,KAAK4O,SAASxJ,KAAK,IAAI6H,EAASC,EAAOC,EAAKgC,IASvCC,UAAUC,EAAaC,EAAWC,GACvC,MAAMtD,EAASqD,EAAInP,IAAIkP,GACjBrO,EAAgBiL,EAAOjL,gBACvBwO,EAAYvD,EAAOhM,IAAIe,GAAeD,YACtC0O,EAAYxD,EAAO9L,IAAIa,GAAeD,YAC5Cf,KAAKkP,SAASG,EAAOC,EAAKC,GAC1BvP,KAAKkP,SAASI,EAAKA,EAAIrP,IAAIuP,EAAUnP,KA/FR,IA+FgCL,KAAKiP,KAAKjB,QAASuB,GAChFvP,KAAKkP,SAASI,EAAKA,EAAIrP,IAAIwP,EAAUpP,KAhGR,IAgGgCL,KAAKiP,KAAKjB,QAASuB,GAM3EG,QAEL1P,KAAK6O,QAAQc,WAAWlB,EAAiBhF,EAAGgF,EAAiB/E,EAAG+E,EAAiB9E,EAAG,GACpF3J,KAAK6O,QAAQ1F,MAAMnJ,KAAK6O,QAAQe,kBAGhC5P,KAAK6O,QAAQgB,WAAW7P,KAAK6O,QAAQiB,aAAc9P,KAAK+P,cACxD/P,KAAK6O,QAAQmB,oBAAoBhQ,KAAKiQ,kBAAmB,EAAGjQ,KAAK6O,QAAQqB,OAAO,EAAO,EAAG,GAC1FlQ,KAAK6O,QAAQsB,wBAAwBnQ,KAAKiQ,mBAC1CjQ,KAAK6O,QAAQuB,WAAWpQ,KAAKqQ,SAE7B,IAAK,IAAIC,KAAWtQ,KAAK4O,SACvB,GAAI0B,aAAmBlD,EAAY,CACjC,MAAMoB,EAAcvN,EAAKuN,YAAY8B,EAAQjD,QAEvCS,EADQ7M,EAAK+M,MAAM,IAAIpO,EAAK0Q,EAAQ1F,OAAQ0F,EAAQ1F,SAClCvK,IAAImO,GAAanO,IAAIL,KAAKiP,KAAKpB,gBAEvD7N,KAAK6O,QAAQ0B,iBAAiBvQ,KAAKwQ,kBAAkB,EAAO1C,EAAU5M,UACtElB,KAAK6O,QAAQ4B,UAAUzQ,KAAK0Q,aAAcJ,EAAQhG,MAAMb,EAAG6G,EAAQhG,MAAMZ,EAAG4G,EAAQhG,MAAMX,GAC1F3J,KAAK6O,QAAQ8B,WAAW3Q,KAAK6O,QAAQ+B,aAAc5Q,KAAK6Q,OAAO,GAAI7Q,KAAK6Q,OAAO,SAC1E,GAAIP,aAAmBrD,EAAU,CACtC,MAAMuB,EAAcvN,EAAKuN,YAAY8B,EAAQpD,OACvC4D,EAAYR,EAAQnD,IAAIhN,IAAImQ,EAAQpD,OAEpCY,EADW7M,EAAK8P,SAASlQ,KAAKmQ,MAAMF,EAAU/Q,EAAG+Q,EAAUhR,GAAKe,KAAK8J,IAChDtK,IAAImO,GAAanO,IAAIL,KAAKiP,KAAKpB,gBAE1D7N,KAAK6O,QAAQ0B,iBAAiBvQ,KAAKwQ,kBAAkB,EAAO1C,EAAU5M,UACtElB,KAAK6O,QAAQ4B,UAAUzQ,KAAK0Q,aAAcJ,EAAQhG,MAAMb,EAAG6G,EAAQhG,MAAMZ,EAAG4G,EAAQhG,MAAMX,GAC1F3J,KAAK6O,QAAQ8B,WAAW3Q,KAAK6O,QAAQ+B,aAAc5Q,KAAKiR,KAAK,GAAIjR,KAAKiR,KAAK,IAI/EjR,KAAK4O,SAAW,GAMVG,cAEN/O,KAAKkR,aAAelR,KAAK6O,QAAQsC,aAAanR,KAAK6O,QAAQuC,eAC3DpR,KAAK6O,QAAQwC,aAAarR,KAAKkR,aAAY,iOA2B3ClR,KAAK6O,QAAQyC,cAAYtR,KAAKkR,cAG9BlR,KAAKuR,eAAiBvR,KAAG6O,QAAKsC,aAAQnR,KAAA6O,QAAuB2C,iBAE7DxR,KAAwC6O,QAAAwC,aAAArR,KAAAuR,eAAA,uHASxCvR,KAA2B6O,QAAAyC,cAAAtR,KAAAuR,qBACXlB,QAAArQ,KAAA6O,QAAA4C,qBAAE5C,QAAA6C,aAAA1R,KAAAqQ,QAAArQ,KAAmBkR,cAAClR,KAAC6O,QAAA6C,aAAA1R,KAAAqQ,QAAArQ,KAAAuR,gBACvCvR,KAAI6O,QAAQ8C,YAAe3R,KAAAqQ,SAE3BrQ,KAAKiQ,kBAAgBjQ,KAAA6O,QAAA+C,kBAAA5R,KAAmBqQ,QAAK,iBAE3CG,iBAAmBxQ,KAAI6O,QAAQgD,mBAAc7R,KAAAqQ,QAAA,aAC/CrQ,KAAC0Q,aAAA1Q,KAAA6O,QAAAgD,mBAAA7R,KAAAqQ,QAAA,6BAIDrQ,KAAA6Q,OAAa,CACb,EACAiB,IAGA,IAAyBC,EAAA,GACzBA,EAAK3M,KAAA,EAAY,GACjB,IAAI,IAAC9D,EAAO,EAACA,GAhNgB,GAgN2BA,IAAA,CACpD,IAACc,EAAQd,EAjNgB,GAiN0BT,KAAA8J,GAAa,EACrEoH,EAAA3M,KAAAvE,KAAAyB,IAAAF,GAAAvB,KAAA0B,IAAAH,qCA/M0B,eAAA,6PCZP4P,SCQTC,UAAkBD,EA0B1BnS,YACSwI,EAAc4G,EAAY9E,GACpCtE,QACA7F,KAAKqI,MAAQA,EACbrI,KAAKiP,KAAOA,EACZjP,KAAKmK,KAAOA,EAGE+H,WACdlS,KAAK2L,KAAO,IAAIzB,EAChBlK,KAAKmS,UAAY,KACjBnS,KAAKoS,YAAa,EAGJhG,KAAKC,GACdrM,KAAKoS,aAEVpS,KAAK2L,KAAKxB,KAAOnK,KAAKmK,KAAKnG,MAC3BqI,EAASC,WAAWtM,KAAK2L,KAAKvB,SAAUpK,KAAK2L,KAAKf,OAAQ5K,KAAK2L,KAAKrB,OAChEtK,KAAKmS,WAAW9F,EAAS+C,UAAUpP,KAAK2L,KAAKvB,SAAUpK,KAAKiP,KAAKb,cAAcpO,KAAKqS,UAAWrS,KAAK2L,KAAKrB,QAG/FgI,YAAYlI,GAC1BpK,KAAK2L,KAAKvB,SAAWpK,KAAKiP,KAAKb,cAAchE,GAC7CpK,KAAKmS,UAAY/H,EAGHmI,UAAUC,GACxB,GAAIxS,KAAKmS,UAAW,CAClB,IAAIjE,EAAQsE,EAASrS,IAAIH,KAAKmS,WAC9BjE,EAAMnO,IAAK,EACXC,KAAK2L,KAAKtB,SAAW6D,EAAM7N,IA9DL,KA8D+BL,KAAKiP,KAAKjB,OAC/DhO,KAAKqI,MAAMqD,QAAQ1L,KAAK2L,MAExB3L,KAAKmS,UAAY,KACjBnS,KAAK2L,KAAO,IAAIzB,EAChBlK,KAAK2L,KAAKvB,SAAWpK,KAAKiP,KAAKb,cAAcoE,IAIjCC,YAAYC,GAC1B1S,KAAKqS,SAAWK,EACX1S,KAAKmS,YAAWnS,KAAK2L,KAAKvB,SAAWpK,KAAKiP,KAAKb,cAAcpO,KAAKqS,WACvErS,KAAKoS,YAAa,SC1ETO,UAAoBX,EAU5BnS,YACSwI,EAAc4G,GACxBpJ,QACA7F,KAAKqI,MAAQA,EACbrI,KAAKiP,KAAOA,EAGEiD,YAIA9F,QAIAkG,YAAYrP,IAIZsP,UAAUnI,GACxBpK,KAAKqI,MAAMuD,WAAW5L,KAAKiP,KAAKb,cAAchE,IAGhCqI,YAAYG,WC/BjBC,UAAoBb,EAS5BnS,YACSoP,GACVpJ,QACA7F,KAAKiP,KAAOA,EAGEiD,WACdlS,KAAK8S,aAAe,KAGN1G,QAIAkG,YAAYlI,GAC1BpK,KAAK8S,aAAe1I,EAGNmI,UAAUtP,GACxBjD,KAAK8S,aAAe,KAGNL,YAAYD,GAC1B,IAAKxS,KAAK8S,aAAc,OAExB,IAAI5E,EAAQsE,EAASrS,IAAIH,KAAK8S,cAC9B5E,EAAMnO,IAAK,EACXC,KAAK8S,aAAeN,EAEpBxS,KAAKiP,KAAKhB,KAAKC,EAAM7N,IA3CL,cCOP0S,gBAoDT,MAAMpE,EAAShI,SAASqM,eAAe,UACvCrE,EAAOpB,MAAQ0F,OAAOC,WACtBvE,EAAOnB,OAASyF,OAAOE,YAGvBnT,KAAKqM,SAAW,IAAIqC,EAASC,GAC7B3O,KAAKqM,SAAS4C,KAAKV,gBAAgBvO,KAAKyS,YAAYrO,KAAKpE,OAGzDA,KAAKqI,MAAQ,IAAImD,EAGjBmD,EAAO3L,iBAAiB,aAAaoQ,IAClB,IAAbA,EAAEC,SACNrT,KAAKqS,SAAW,IAAIzS,EAAKwT,EAAEE,QAASF,EAAEG,SACtCvT,KAAKsS,cACLc,EAAEI,qBAEJ7E,EAAO3L,iBAAiB,WAAWoQ,IAChB,IAAbA,EAAEC,SACNrT,KAAKqS,SAAW,IAAIzS,EAAKwT,EAAEE,QAASF,EAAEG,SACtCvT,KAAKuS,YACLa,EAAEI,qBAEJ7E,EAAO3L,iBAAiB,aAAaoQ,IACnCpT,KAAKqS,SAAW,IAAIzS,EAAKwT,EAAEE,QAASF,EAAEG,SACtCvT,KAAKyS,cACLW,EAAEI,oBAEJ7E,EAAO3L,iBAAiB,SAAUyQ,IAChCzT,KAAKqM,SAAS4C,KAAKd,KAAKsF,EAAMC,OAAS,EAAI,IAAM,IACjDD,EAAMD,oBAIRxT,KAAK2T,SACD,IAAIvQ,EAAUuD,SAASqM,eAAe,YAA+B,GAAK,IAAa,EAAK,eAChGhT,KAAK2T,SAAS3P,MAAQ,EACtBhE,KAAK4T,gBACD,IAAIxQ,EAAUuD,SAASqM,eAAe,mBAAsC,IAAM,IAAO,EAAK,eAClGhT,KAAK4T,gBAAgB5P,MAAQ,EAG7BhE,KAAK6T,YAAc,IAAIhR,EAAU8D,SAASqM,eAAe,gBACzDhT,KAAK8T,eAAiB,IAAIjR,EAAU8D,SAASqM,eAAe,mBAC5DhT,KAAK+T,aAAe,IAAIlR,EAAU8D,SAASqM,eAAe,iBAC1DhT,KAAKgU,cAAgB,IAAInR,EAAU8D,SAASqM,eAAe,kBAG3DhT,KAAKiU,gBAAkB,IAAIrO,EAAUe,SAASqM,eAAe,oBAC7DhT,KAAKkU,kBAAoB,IAAItO,EAAUe,SAASqM,eAAe,sBAC/DhT,KAAKmU,kBAAoB,IAAIvO,EAAUe,SAASqM,eAAe,sBAG/DhT,KAAKoU,MAAQ,IAAI9N,IACjBtG,KAAKoU,MAAMrN,IAAI,YAAa,IAAIkL,EAAgBjS,KAAKqI,MAAOrI,KAAKqM,SAAS4C,KAAMjP,KAAK2T,WACrF3T,KAAKoU,MAAMrN,IAAI,cAAe,IAAI4L,EAAkB3S,KAAKqI,MAAOrI,KAAKqM,SAAS4C,OAC9EjP,KAAKoU,MAAMrN,IAAI,cAAe,IAAI8L,EAAkB7S,KAAKqM,SAAS4C,OAClEjP,KAAKqU,UAAOC,EAGZtU,KAAKuU,WAAa,IAAI7P,EACtB1E,KAAKuU,WAAWtU,IAAI,YAAaD,KAAKiU,iBACtCjU,KAAKuU,WAAWtU,IAAI,cAAeD,KAAKkU,mBACxClU,KAAKuU,WAAWtU,IAAI,cAAeD,KAAKmU,mBACxCnU,KAAKuU,WAAW9O,kBAAiB4O,IAC/BrU,KAAKqU,KAAOrU,KAAKoU,MAAMlN,IAAImN,GACvBrU,KAAKqU,MAAMrU,KAAKqU,KAAKnC,cAI3BlS,KAAK+T,aAAa7Q,YAAU,KAC1BlD,KAAKqM,SAAS4C,KAAKd,KAAK,QAE1BnO,KAAKgU,cAAc9Q,YAAU,KAC3BlD,KAAKqM,SAAS4C,KAAKd,KAAK,SAI1BnO,KAAKwU,eAAiB,IAAIpM,EAAiBpI,KAAKqI,OAChDrI,KAAKwU,eAAevU,IAAI,IAAIsJ,GAC5BvJ,KAAKwU,eAAevU,IAAI,IAAIsM,GAC5BvM,KAAKwU,eAAevU,IAAI,IAAIyM,GAC5B1M,KAAKwU,eAAe5L,OAAO,oBAC3B5I,KAAK6T,YAAY3Q,YAAU,KACzBlD,KAAKqI,MAAMc,QACXnJ,KAAKwU,eAAetL,WAEtBlJ,KAAK8T,eAAe5Q,YAAU,KACxBlD,KAAKwU,eAAehN,KACtBxH,KAAKwU,eAAejN,OAEpBvH,KAAKwU,eAAelN,UAExBtH,KAAKwU,eAAetL,QAMfgE,QACLlN,KAAKyU,QAAQ,GAOPA,QAAQ1J,GACd/K,KAAKqI,MAAM6C,OAAOlL,KAAK4T,gBAAgB5P,MAAQ+G,EAtKhC,MAwKX/K,KAAKqU,MAAMrU,KAAKqU,KAAKjI,KAAKpM,KAAKqM,UACnCrM,KAAKqI,MAAM+D,KAAKpM,KAAKqM,UACrBrM,KAAKqM,SAASqD,QAEduD,OAAOyB,sBAAsB1U,KAAKyU,QAAQrQ,KAAKpE,OAOzCsS,cACFtS,KAAKqU,MAAMrU,KAAKqU,KAAK/B,YAAYtS,KAAKqS,UAOpCE,YACFvS,KAAKqU,MAAMrU,KAAKqU,KAAK9B,UAAUvS,KAAKqS,UAOlCI,cACFzS,KAAKqU,MAAMrU,KAAKqU,KAAK5B,YAAYzS,KAAKqS,WC1M9C1L,SAAS3D,iBAAiB,oBAAkB,MAC9B,IAAI+P,GACZ7F","sources":["src/app/math.ts","src/app/presets/preset.ts","src/app/ui/button.ts","src/app/ui/slider.ts","src/app/ui/switch.ts","src/app/ui/toggle.ts","src/app/ui/form.ts","src/app/presets/selector.ts","src/app/presets/empty.ts","src/app/renderer/color.ts","src/app/body.ts","src/app/world.ts","src/app/presets/simple_star_system.ts","src/app/presets/custom_star_system.ts","src/app/renderer/draw_line.ts","src/app/renderer/draw_circle.ts","src/app/renderer/view.ts","src/app/renderer/index.ts","src/app/tools/tool.ts","src/app/tools/body_adder.ts","src/app/tools/body_remover.ts","src/app/tools/camera_mover.ts","src/app/app.ts","src/main.ts"],"sourcesContent":["/**\n * Implements a 2D vector, with support for vector math operations.\n */\nexport class Vec2 {\n  /** X component. */\n  public x: number;\n  /** Y component. */\n  public y: number;\n\n  /**\n   * @param x X component.\n   * @param y Y component.\n   */\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts another 2D vector from this and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result 2D vector.\n   */\n  public sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Multiplies this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public mul(s: number): Vec2 {\n    return new Vec2(this.x * s, this.y * s);\n  }\n\n  /**\n   * Divides this 2D vector by a scalar and returns the result.\n   * @param s Scalar.\n   * @returns The result 2D vector.\n   */\n  public div(s: number): Vec2 {\n    return new Vec2(this.x / s, this.y / s);\n  }\n\n  /**\n   * Calculates the dot product of this and another 2D vector and returns the result.\n   * @param v Other 2D vector.\n   * @returns The result.\n   */\n  public dot(v: Vec2): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the squared length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public sqrLength(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public length(): number {\n    return Math.sqrt(this.sqrLength());\n  }\n\n  /**\n   * Normalizes this 2D vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Returns a vector perpendicular to this matrix.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this.y, this.x);\n  }\n}\n\n/**\n * Implements a 3D matrix, with support for matrix math operations.\n */\nexport class Mat3 {\n  /**\n   * The matrix elements.\n   */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  constructor(elements: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]) {\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Multiplies this matrix by another matrix and returns the result.\n   * @param other The other matrix.\n   * @returns The result matrix.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result matrix.\n   */\n  public mul(scalar: number): Mat3;\n\n  /**\n   * Multiplies this matrix by a vector and returns the result.\n   * @param v The vector.\n   * @returns The result vector.\n   */\n  public mul(other: Vec2): Vec2;\n\n  // Implementation of the above two overloads.\n  public mul(other: Mat3|number|Vec2): Mat3|Vec2 {\n    if (other instanceof Mat3) {  // Multiply by another matrix.\n      const result = new Mat3();\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          let sum = 0.0;\n          for (let k = 0; k < 3; k++) sum += this.elements[i * 3 + k] * other.elements[k * 3 + j];\n          result.elements[i * 3 + j] = sum;\n        }\n      }\n      return result;\n    } else if (other instanceof Vec2) {  // Multiply by vector\n      const result = new Vec2(0.0, 0.0);\n      result.x += this.elements[0 * 3 + 0] * other.x;\n      result.x += this.elements[1 * 3 + 0] * other.y;\n      result.x += this.elements[2 * 3 + 0];\n      result.y += this.elements[0 * 3 + 1] * other.x;\n      result.y += this.elements[1 * 3 + 1] * other.y;\n      result.y += this.elements[2 * 3 + 1];\n      return result;\n    } else {  // Multiply by scalar\n      const result = new Mat3();\n      for (let i = 0; i < 9; i++) result.elements[i] = this.elements[i] * other;\n      return result;\n    }\n  }\n\n  /**\n   * Transposes this matrix and returns the result.\n   * @returns The result matrix.\n   */\n  public transpose(): Mat3 {\n    const result = new Mat3();\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        result.elements[i * 3 + j] = this.elements[j * 3 + i];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Calculates the determinant of this matrix and returns the result.\n   * @returns The result.\n   */\n  public determinant(): number {\n    return this.elements[0 * 3 + 0] *\n        (this.elements[1 * 3 + 1] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 1]) -\n        this.elements[0 * 3 + 1] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 2] - this.elements[1 * 3 + 2] * this.elements[2 * 3 + 0]) +\n        this.elements[0 * 3 + 2] *\n        (this.elements[1 * 3 + 0] * this.elements[2 * 3 + 1] - this.elements[1 * 3 + 1] * this.elements[2 * 3 + 0]);\n  }\n\n  /**\n   * Calcultes the adjunt matrix of this matrix and returns the result.\n   * @returns The result.\n   */\n  public adjunt(): Mat3 {\n    const result = new Mat3();\n    const els = this.elements;\n    result.elements[0 * 3 + 0] = els[1 * 3 + 1] * els[2 * 3 + 2] - els[1 * 3 + 2] * els[2 * 3 + 1];\n    result.elements[0 * 3 + 1] = els[0 * 3 + 2] * els[2 * 3 + 1] - els[0 * 3 + 1] * els[2 * 3 + 2];\n    result.elements[0 * 3 + 2] = els[0 * 3 + 1] * els[1 * 3 + 2] - els[0 * 3 + 2] * els[1 * 3 + 1];\n    result.elements[1 * 3 + 0] = els[1 * 3 + 2] * els[2 * 3 + 0] - els[1 * 3 + 0] * els[2 * 3 + 2];\n    result.elements[1 * 3 + 1] = els[0 * 3 + 0] * els[2 * 3 + 2] - els[0 * 3 + 2] * els[2 * 3 + 0];\n    result.elements[1 * 3 + 2] = els[0 * 3 + 2] * els[1 * 3 + 0] - els[0 * 3 + 0] * els[1 * 3 + 2];\n    result.elements[2 * 3 + 0] = els[1 * 3 + 0] * els[2 * 3 + 1] - els[1 * 3 + 1] * els[2 * 3 + 0];\n    result.elements[2 * 3 + 1] = els[0 * 3 + 1] * els[2 * 3 + 0] - els[0 * 3 + 0] * els[2 * 3 + 1];\n    result.elements[2 * 3 + 2] = els[0 * 3 + 0] * els[1 * 3 + 1] - els[0 * 3 + 1] * els[1 * 3 + 0];\n    return result;\n  }\n\n  /**\n   * Calculates the inverse of this matrix and returns the result.\n   * @returns The result.\n   */\n  public inverse(): Mat3 {\n    const det = this.determinant();\n    if (det === 0.0) throw new Error('Cannot invert matrix with determinant 0.');\n    return this.adjunt().mul(1.0 / det);\n  }\n\n  /**\n   * Returns the identity matrix.\n   * @returns The identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3();\n  }\n\n  /**\n   * Returns the translation matrix.\n   * @param v The vector.\n   */\n  public static translation(v: Vec2): Mat3 {\n    return new Mat3([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, v.x, v.y, 1.0]);\n  }\n\n  /**\n   * Returns the scale matrix.\n   * @param v The vector.\n   * @returns The scale matrix.\n   */\n  public static scale(v: Vec2): Mat3 {\n    return new Mat3([v.x, 0.0, 0.0, 0.0, v.y, 0.0, 0.0, 0.0, 1.0]);\n  }\n\n  /**\n   * Returns the rotation matrix.\n   * @param angle The angle in radians.\n   * @returns The rotation matrix.\n   */\n  public static rotation(angle: number): Mat3 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    return new Mat3([c, s, 0.0, -s, c, 0.0, 0.0, 0.0, 1.0]);\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\n/**\n * Generic preset for generating worlds.\n */\nexport abstract class Preset {\n  /** Preset identifier. */\n  private _id: string;\n\n  /** Form used to set settings. */\n  private _form: Form|null;\n\n  /**\n   * @param id The preset identifier.\n   * @param form The preset form.\n   */\n  constructor(id: string, form: Form|null = null) {\n    this._id = id;\n    this._form = form;\n  }\n\n  /**\n   * Gets the preset's id;\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Gets the preset's form.\n   */\n  get form(): Form|null {\n    return this._form;\n  }\n\n  /**\n   * Initialize the preset.\n   * @param world World to generate.\n   */\n  public abstract generate(world: World): void;\n}\n","/**\n * Class used to handle button events.\n */\nexport class Button {\n  /** The button element. */\n  protected readonly element: HTMLButtonElement;\n\n  /** The button click callback. */\n  private onClickCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    this.element = element;\n    this.onClickCallback = () => {};\n    this.element.addEventListener('click', (_) => this.onClickCallback());\n  }\n\n  /**\n   * Sets the button click callback.\n   */\n  public setOnClick(callback: () => void): void {\n    this.onClickCallback = callback;\n  }\n}\n","/**\n * Slider types.\n */\nexport type SliderType = 'integer'|'linear'|'exponential';\n\n/**\n * Class used to read slider values from the user.\n */\nexport class Slider {\n  /** The slider's root element. */\n  private _root: HTMLDivElement;\n\n  /** The slider's range input element. */\n  private _input: HTMLInputElement;\n\n  /** The slider's value diplay element. */\n  private _display: HTMLDivElement;\n\n  /** The slider's type. */\n  private _type: SliderType;\n\n  /**\n   * @param input Range input element.\n   * @param display Value display element.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param initial The initial value.\n   * @param type The slider type.\n   */\n  constructor(slider: HTMLDivElement, min: number, max: number, initial: number, type: SliderType) {\n    this._root = slider;\n    this._input = this._root.querySelector('input') as HTMLInputElement;\n    this._display = this._root.querySelector('div') as HTMLDivElement;\n    this._type = type;\n\n\n    switch (this._type) {\n      case 'integer':\n        this._input.min = min.toString();\n        this._input.max = max.toString();\n        this._input.value = initial.toString();\n        this._input.step = 1.0.toString();\n        break;\n      case 'linear':\n        this._input.min = min.toString();\n        this._input.max = max.toString();\n        this._input.value = initial.toString();\n        this._input.step = 0.1.toString();\n        break;\n      case 'exponential':\n        this._input.min = Math.log10(min).toString();\n        this._input.max = Math.log10(max).toString();\n        this._input.value = Math.log10(initial).toString();\n        this._input.step = 0.1.toString();\n        break;\n    }\n\n    this._input.addEventListener('input', this.updateDisplay.bind(this));\n    this.updateDisplay();\n  }\n\n  /**\n   * @returns The current value of the slider.\n   */\n  public get value(): number {\n    switch (this._type) {\n      case 'integer':\n      case 'linear':\n        return this._input.valueAsNumber;\n      case 'exponential':\n        return Math.pow(10.0, this._input.valueAsNumber);\n    }\n  }\n\n  /**\n   * Sets the value of the slider.\n   */\n  public set value(value: number) {\n    switch (this._type) {\n      case 'integer':\n      case 'linear':\n        this._input.valueAsNumber = value;\n        break;\n      case 'exponential':\n        this._input.valueAsNumber = Math.log10(value);\n        break;\n    }\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Updates the display of the slider.\n   */\n  private updateDisplay(): void {\n    if (this._type === 'integer') {\n      this._display.innerText = this.value.toString();\n    } else if (this.value < 0.01 || this.value > 9999.99)\n      this._display.innerText = this.value.toExponential(1);\n    else\n      this._display.innerText = this.value.toFixed(2);\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * A switch made of many toggles, where only one can be active at a time.\n */\nexport class Switch {\n  /** Current switch state. */\n  private state: string;\n\n  /** The toggles in the switch. */\n  private toggles: [string, Toggle][];\n\n  /** Callback called when the state changes. */\n  private stateChangeCallback: (state: string) => void;\n\n  // Default constructor.\n  constructor() {\n    this.state = '';\n    this.toggles = [];\n    this.stateChangeCallback = (_) => {};\n  }\n\n  /**\n   * The current state of the switch.\n   */\n  public get current(): string {\n    return this.state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set current(name: string) {\n    if (this.state === name) return;\n    this.toggles.forEach(toggle => toggle[1].activated = toggle[0] === name);\n    this.state = name;\n    this.stateChangeCallback(name);\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle to add.\n   */\n  public add(name: string, toggle: Toggle): void {\n    this.toggles.push([name, toggle]);\n    toggle.setOnActivated(() => this.onToggleActivated(name));\n    toggle.setOnDeactivated(() => this.onToggleDeactivated(name));\n  }\n\n  /**\n   * Sets the callback called when the state changes.\n   * @param callback The callback to set.\n   */\n  public setOnStateChange(callback: (state: string) => void): void {\n    this.stateChangeCallback = callback;\n  }\n\n  /**\n   * Callback for when a toggle is activated.\n   * @param name The name of the toggle that was activated.\n   */\n  private onToggleActivated(name: string): void {\n    this.current = name;\n  }\n\n  /**\n   * Callback for when a toggle is deactivated.\n   * @param name The name of the toggle that was deactivated.\n   */\n  private onToggleDeactivated(name: string): void {\n    if (this.state === name) this.current = '';\n  }\n}\n","import {Button} from './button';\n\n/**\n * A button that toggles between two states.\n */\nexport class Toggle extends Button {\n  /** The current toggle state. */\n  private state: boolean;\n\n  /** The toggle activation callback. */\n  private onActivatedCallback: () => void;\n\n  /** The toggle deactivation callback. */\n  private onDeactivatedCallback: () => void;\n\n  /**\n   * @param element The button element.\n   */\n  constructor(element: HTMLButtonElement) {\n    super(element);\n    this.state = false;\n    this.onActivatedCallback = () => {};\n    this.onDeactivatedCallback = () => {};\n    this.setOnClick(this.onClick.bind(this));\n  }\n\n  /**\n   * Is the toggle activated?\n   */\n  public get activated(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Set the toggle to activated or deactivated.\n   */\n  public set activated(state: boolean) {\n    this.state = state;\n    this.element.classList.toggle('on', state);\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnActivated(callback: () => void): void {\n    this.onActivatedCallback = callback;\n  }\n\n  /**\n   * Set the toggle activation callback.\n   * @param callback The callback to set.\n   */\n  public setOnDeactivated(callback: () => void): void {\n    this.onDeactivatedCallback = callback;\n  }\n\n\n  /**\n   * Set the toggle activation callback.\n   */\n  private onClick(): void {\n    this.activated = !this.activated;\n    if (this.activated)\n      this.onActivatedCallback();\n    else\n      this.onDeactivatedCallback();\n  }\n}\n","import {Button} from './button';\nimport {Slider, SliderType} from './slider';\nimport {Switch} from './switch';\nimport {Toggle} from './toggle';\n\n/**\n * Represents a form field.\n */\nexport type FormField = Slider|Toggle|Switch;\n\n/**\n * Represents a form. A form is a collection of form fields.\n */\nexport class Form {\n  /** The form fields. */\n  private _fields: Map<string, FormField>;\n\n  /** The form's root element. */\n  private _root: HTMLElement;\n\n  /** The form's cancel button. */\n  private _cancel: Button;\n\n  /** The form's submit button. */\n  private _submit: Button;\n\n  /**\n   * @param root The form's root element.\n   */\n  constructor(root: HTMLElement) {\n    this._fields = new Map<string, FormField>();\n    this._root = root;\n    console.log(this._root);\n    this._cancel = new Button(this._root.querySelector('#cancel') as HTMLButtonElement);\n    this._submit = new Button(this._root.querySelector('#submit') as HTMLButtonElement);\n  }\n\n  /**\n   * Creates a new form.\n   * @param id Form identifier.\n   */\n  static create(id: string): Form {\n    return new Form(document.querySelector(`.form>#${id}`) as HTMLDivElement);\n  }\n\n  /**\n   * Adds a toggle field to the form.\n   * @param id The toggle's id.\n   */\n  public addToggle(id: string): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLButtonElement) {\n      this._fields.set(id, new Toggle(element));\n    }\n  }\n\n  /**\n   * Adds a switch to the form.\n   * @param id The switch's id.\n   * @param toggles The switch's toggles' ids.\n   */\n  public addSwitch(id: string, ...toggles: string[]): void {\n    const s = new Switch();\n    toggles.forEach(i => {\n      this.addToggle(i);\n      s.add(i, this._fields.get(i) as Toggle);\n    });\n    this._fields.set(id, s);\n  }\n\n  /**\n   * Adds a slider field to the form.\n   * @param id The slider's id.\n   * @param min The slider's minimum value.\n   * @param max The slider's maximum value.\n   * @param initial The slider's initial value.\n   * @param type The slider's type.\n   */\n  public addSlider(id: string, min: number, max: number, initial: number, type: SliderType): void {\n    const element = this._root.querySelector(`#${id}`);\n    if (element && element instanceof HTMLDivElement) {\n      this._fields.set(id, new Slider(element, min, max, initial, type));\n    }\n  }\n\n  /**\n   * Shows the form.\n   */\n  public show() {\n    this._root.classList.toggle('hidden', false);\n  }\n\n  /**\n   * Hides the form.\n   */\n  public hide() {\n    this._root.classList.toggle('hidden', true);\n  }\n\n  /**\n   * Checks if the form is open.\n   */\n  public get open(): boolean {\n    return !this._root.classList.contains('hidden');\n  }\n\n  /**\n   * Checks if the toggle with the given id is on.\n   * @param id The toggle's id.\n   * @returns True if the toggle is on, false otherwise.\n   */\n  public isOn(id: string): boolean {\n    return (this._fields.get(id) as Toggle).activated;\n  }\n\n  /**\n   * Gets the value of the slider with the given id.\n   * @param id The slider's id.\n   * @returns The slider's value.\n   */\n  public getValue(id: string): number {\n    return (this._fields.get(id) as Slider).value;\n  }\n\n  /**\n   * Gets the state of the switch with the given id.\n   * @param id The switch's id.\n   * @returns The switch's state.\n   */\n  public getState(id: string): string {\n    return (this._fields.get(id) as Switch).current;\n  }\n\n  /**\n   * Sets the state of the switch with the given id.\n   * @param id The switch's id.\n   * @param state The new state.\n   */\n  public setState(id: string, state: string): void {\n    (this._fields.get(id) as Switch).current = state;\n  }\n\n  /**\n   * Sets the form cancelled callback.\n   * @param callback The callback.\n   */\n  public setOnCancel(callback: () => void) {\n    this._cancel.setOnClick(callback);\n  }\n\n  /**\n   * Sets the form submitted callback.\n   * @param callback The callback.\n   */\n  public setOnSubmit(callback: () => void) {\n    this._submit.setOnClick(callback);\n  }\n}\n","import {Form} from '../ui/form';\nimport {World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Class used to select presets.\n */\nexport class Selector {\n  /** World to affect. */\n  private _world: World;\n\n  /** Presets available. */\n  private _presets: Preset[];\n\n  /** Preset chosen. */\n  private _selected: Preset|null;\n\n  /** Form used to select. */\n  private _form: Form;\n\n  /** Is the form open? */\n  private _open: boolean;\n\n  /**\n   * @param world The world to affect.\n   */\n  constructor(world: World) {\n    this._world = world;\n    this._presets = [];\n    this._selected = null;\n    this._form = Form.create('selector');\n    this._open = false;\n  }\n\n  /**\n   * Adds a preset to the selector.\n   * @param preset The preset to add.\n   */\n  public add(preset: Preset): void {\n    this._presets.push(preset);\n    this._form.addToggle(preset.id);\n  }\n\n  /**\n   * Finishes building the selector.\n   */\n  public finish(initial: string): void {\n    this._form.addSwitch('preset', ...this._presets.map(p => p.id));\n    this._form.setOnCancel(this.onSelectionCanceled.bind(this));\n    this._form.setOnSubmit(this.onSelectionSubmitted.bind(this));\n    this._selected = this._presets.find(p => p.id === initial)!;\n  }\n\n  /**\n   * Shows the selector.\n   */\n  public show(): void {\n    if (!this._open) {\n      this._form.show();\n      if (this._selected)\n        this._form.setState('preset', this._selected.id);\n    }\n    this._open = true;\n  }\n\n  /**\n   * Hides the selector.\n   */\n  public hide(): void {\n    if (this._selected && this._selected.form && this._selected.form.open) this._selected.form.hide();\n    if (this._form.open) this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Checks if the selector is open.\n   */\n  public get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * Applies the last selected preset.\n   */\n  public apply(): void {\n    this._world.clear();\n    if (this._selected) this._selected.generate(this._world);\n  }\n\n  /**\n   * Callback called when the selection form is canceled.\n   */\n  private onSelectionCanceled(): void {\n    this._form.hide();\n    this._open = false;\n  }\n\n  /**\n   * Callback called when the selection form is submitted.\n   */\n  private onSelectionSubmitted(): void {\n    const state = this._form.getState('preset');\n    this._form.hide();\n\n    this._selected = this._presets.find(p => p.id === state)!;\n    if (this._selected.form) {\n      this._selected.form.show();\n      this._selected.form.setOnCancel(this.onSettingsCanceled.bind(this));\n      this._selected.form.setOnSubmit(this.onSettingsSubmitted.bind(this));\n    } else {\n      this.onSettingsSubmitted();\n    }\n  }\n\n  /**\n   * Callback called when the settings form is canceled.\n   */\n  private onSettingsCanceled(): void {\n    this._selected?.form?.hide();\n    this._form.show();\n  }\n\n  /**\n   * Callback called when the settings form is submitted.\n   */\n  private onSettingsSubmitted(): void {\n    this.apply();\n    this._selected?.form?.hide();\n    this._open = false;\n  }\n}\n","import {World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates an empty set.\n */\nexport class Empty extends Preset {\n  constructor() {\n    super('empty');\n  }\n\n  public override generate(_: World): void {\n    // Do nothing\n  }\n}\n","/**\n * Describes a color.\n */\nexport class Color {\n  /** The red component of the color. */\n  public r: number;\n  /** The green component of the color. */\n  public g: number;\n  /** The blue component of the color. */\n  public b: number;\n  /** The alpha component of the color. */\n  public a: number;\n\n  /**\n   * @param r The red component of the color.\n   * @param g The green component of the color.\n   * @param b The blue component of the color.\n   * @param a The alpha component of the color.\n   */\n  constructor(r: number, g: number, b: number, a: number = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Adds the given color to this color, returning a new color.\n   * @param other The color to add.\n   * @returns The new color.\n   */\n  public add(other: Color): Color {\n    const r = Math.min(1.0, this.r + other.r);\n    const g = Math.min(1.0, this.g + other.g);\n    const b = Math.min(1.0, this.b + other.b);\n    const a = Math.min(1.0, this.a + other.a);\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Mixes this color with the given color, returning a new color.\n   * @param other The color to mix with.\n   * @returns The new color.\n   */\n  public mix(other: Color): Color {\n    const r = (this.r + other.r) / 2.0;\n    const g = (this.g + other.g) / 2.0;\n    const b = (this.b + other.b) / 2.0;\n    const a = (this.a + other.a) / 2.0;\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Multiplies this color by a scalar, returning a new color.\n   * @param multiplier The scalar to multiply by.\n   * @returns The new color.\n   */\n  public mul(multiplier: number): Color {\n    const r = Math.min(1.0, this.r * multiplier);\n    const g = Math.min(1.0, this.g * multiplier);\n    const b = Math.min(1.0, this.b * multiplier);\n    return new Color(r, g, b, this.a);\n  }\n\n  /**\n   * Divides this color by a scalar, returning a new color.\n   * @param divider The scalar to divide by.\n   * @returns The new color.\n   */\n   public div(divider: number): Color {\n    return this.mul(1.0 / divider);\n  }\n\n  /**\n   * Generates a random color.\n   * @returns A random color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n}\n","import {Vec2} from './math';\nimport {Color} from './renderer/color';\n\n/** The density of bodies. */\nconst BODY_DENSITY: number = 200.0;\n\n/**\n * Represents a body in the simulation.\n */\nexport class Body {\n  /** Body's mass. */\n  private _mass: number;\n  /** Body's radius. */\n  private _radius: number;\n  /** Body's position. */\n  private _position: Vec2;\n  /** Body's velocity. */\n  private _velocity: Vec2;\n  /** Body's color. */\n  public color: Color;\n\n  /**\n   * @param mass The body's initial mass.\n   * @param position The body's initial position.\n   * @param velocity The body's initial velocity.\n   * @param color The body's color.\n   */\n  constructor() {\n    this.mass = 1.0;\n    this.position = new Vec2(0.0, 0.0);\n    this.velocity = new Vec2(0.0, 0.0);\n    this.color = Color.random().mul(0.8).add(new Color(0.2, 0.2, 0.2));\n  }\n\n  /**\n   * Gets the body's position.\n   */\n  public get position(): Vec2 {\n    return this._position;\n  }\n\n  /**\n   * Sets the body's position.\n   */\n  public set position(position: Vec2) {\n    this._position = new Vec2(position.x, position.y);\n  }\n\n  /**\n   * Gets the body's velocity.\n   */\n   public get velocity(): Vec2 {\n    return this._velocity;\n  }\n\n  /**\n   * Sets the body's velocity.\n   */\n  public set velocity(velocity: Vec2) {\n    this._velocity = new Vec2(velocity.x, velocity.y);\n  }\n  \n  /**\n   * Gets the body's mass.\n   */\n  public get mass(): number {\n    return this._mass;\n  }\n\n  /**\n   * Sets the body's mass.\n   */\n  public set mass(mass: number) {\n    this._mass = mass;\n    this._radius = (3.0 / 4.0) * Math.PI * (this.mass ** (1.0 / 3.0)) / BODY_DENSITY;\n  }\n\n  /**\n   * Gets the body's radius.\n   */\n  public get radius(): number {\n    return this._radius;\n  }\n\n  /**\n   * Applies a force to the body.\n   * @param force The force to apply to the body.\n   * @param dt The time step.\n   */\n  public applyForce(force: Vec2, dt: number): void {\n    this.applyImpulse(force.mul(dt));\n  }\n\n  /**\n   * Applies an impulse to the body.\n   * @param impulse The impulse to apply to the body.\n   */\n  public applyImpulse(impulse: Vec2): void {\n    this.velocity = this.velocity.add(impulse.mul(1.0 / this.mass));\n  }\n\n  /**\n   * Updates the body's position.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    this.position = this.position.add(this.velocity.mul(dt));\n  }\n\n  /**\n   * Checks if this body is intersecting with another.\n   * @param other The other body.\n   * @returns Whether the bodies are intersecting.\n   */\n  public intersects(other: Body): boolean;\n\n  /**\n   * Checks if the body is intersecting with a point.\n   * @param point The point.\n   * @returns Whether the body is intersecting with the point.\n   */\n  public intersects(point: Vec2): boolean;\n\n  // Implementation\n  public intersects(other: Body|Vec2): boolean {\n    if (other instanceof Body) {\n      // The square of the distance is used to avoid calculating the square root.\n      const sqrDistance = this.position.sub(other.position).sqrLength();\n      const sqrRadius = (this.radius + other.radius) ** 2;\n      return sqrDistance <= sqrRadius;\n    } else {  // other is a Vec2\n      return this.position.sub(other).sqrLength() <= this.radius ** 2;\n    }\n  }\n\n  /**\n   * Merges this body with another.\n   * @param other The other body.\n   * @returns The new body.\n   */\n  public merge(other: Body): Body {\n    let b = new Body();\n\n    b.mass = this.mass + other.mass;\n    b.position = this.position.mul(this.mass).add(other.position.mul(other.mass)).div(b.mass);\n    b.velocity = this.velocity.mul(this.mass).add(other.velocity.mul(other.mass)).div(b.mass);\n\n    const colorA = this.color.mul(this.mass / b.mass);\n    const colorB = other.color.mul(other.mass / b.mass);\n    b.color = colorA.add(colorB);\n\n    return b;\n  }\n}\n","import {Body} from './body';\nimport {Vec2} from './math';\nimport {Renderer} from './renderer';\nimport {Color} from './renderer/color';\n\nexport const GRAVITY_CONSTANT = 0.000001;\n\n/**\n * Represents a world of bodies.\n */\nexport class World {\n  /** List of bodies in the world. */\n  private bodies: Body[];\n\n  // Default constructor.\n  constructor() {\n    this.bodies = [];\n  }\n\n  /**\n   * Adds a body to the world.\n   * @param body Body to add.\n   */\n  public addBody(body: Body): void {\n    this.bodies.push(body);\n  }\n\n  /**\n   * Removes a body from the world.\n   * @param position The position of the body to remove.\n   */\n  public removeBody(position: Vec2): void {\n    for (let i = 0; i < this.bodies.length; i++)\n      if (this.bodies[i].intersects(position)) this.bodies.splice(i, 1);\n  }\n\n  /**\n   * Deletes all bodies in the world.\n   */\n  public clear(): void {\n    this.bodies = [];\n  }\n\n  /**\n   * Updates the world.\n   * @param dt The time step.\n   */\n  public update(dt: number): void {\n    // Move bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      this.bodies[i].update(dt);\n    }\n\n    // Apply gravity to all bodies.\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        const body1 = this.bodies[i];\n        const body2 = this.bodies[j];\n\n        // Calculate the force of gravity between the two bodies.\n        const offset = body1.position.sub(body2.position);\n        const sqrDistance = offset.sqrLength();\n        const direction = offset.normalize();\n        const force = direction.mul(GRAVITY_CONSTANT * body1.mass * body2.mass / sqrDistance);\n\n        // Apply the force to the bodies.\n        this.bodies[j].applyForce(force, dt);\n        this.bodies[i].applyForce(force.mul(-1.0), dt);\n      }\n    }\n\n    for (let i = 0; i < this.bodies.length; i++) {\n      for (let j = i + 1; j < this.bodies.length; j++) {\n        // Check for collision.\n        if (this.bodies[i].intersects(this.bodies[j])) {\n          // Create a new body from the two bodies.\n          this.bodies[i] = this.bodies[i].merge(this.bodies[j]);\n          // Remove the second body.\n          this.bodies.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draws the world.\n   * @param renderer Renderer used.\n   */\n  public draw(renderer: Renderer): void {\n    for (let i = 0; i < this.bodies.length; i++) {\n      renderer.drawCircle(this.bodies[i].position, this.bodies[i].radius, this.bodies[i].color);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {World, GRAVITY_CONSTANT} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a simple system with a single star.\n */\nexport class SimpleStarSystem extends Preset {\n  constructor() {\n    super('simpleStarSystem');\n  }\n\n  public override generate(world: World): void {\n    // Add star\n    const star = new Body();\n    star.mass = 10000.0;\n    world.addBody(star);\n\n    for (let i = 0; i < 100; ++i) {\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * 3.0 + 1.0;\n\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * 9.0 + 1.0;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity = body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * star.mass / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Form} from '../ui/form';\nimport {GRAVITY_CONSTANT, World} from '../world';\n\nimport {Preset} from './preset';\n\n/**\n * Generates a custom system with a single star.\n */\nexport class CustomStarSystem extends Preset {\n  constructor() {\n    // Create form\n    const form = Form.create('customStarSystem');\n    form.addSlider('starMass', 0.1, 100000000.0, 1000.0, 'exponential');\n    form.addSlider('bodyCount', 1, 1000, 100, 'integer');\n    form.addSlider('bodyMinMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMaxMass', 0.1, 100000.0, 1.0, 'exponential');\n    form.addSlider('bodyMinDistance', 0.1, 25.0, 1.0, 'linear');\n    form.addSlider('bodyMaxDistance', 0.1, 25.0, 5.0, 'linear');\n    super('customStarSystem', form);\n  }\n\n  public override generate(world: World): void {\n    // Get settings from form\n    const starMass = this.form!.getValue('starMass');\n    const bodyCount = this.form!.getValue('bodyCount');\n    let bodyMinMass = this.form!.getValue('bodyMinMass');\n    let bodyMaxMass = this.form!.getValue('bodyMaxMass');\n    let bodyMinDistance = this.form!.getValue('bodyMinDistance');\n    let bodyMaxDistance = this.form!.getValue('bodyMaxDistance');\n    if (bodyMaxMass < bodyMinMass) [bodyMaxMass, bodyMinMass] = [bodyMinMass, bodyMaxMass];\n    if (bodyMaxDistance < bodyMinDistance) [bodyMaxDistance, bodyMinDistance] = [bodyMinDistance, bodyMaxDistance];\n\n    // Add star\n    const star = new Body();\n    star.mass = starMass;\n    world.addBody(star);\n\n    for (let i = 0; i < bodyCount; ++i) {\n      // Add body\n      const body = new Body();\n      body.mass = Math.random() * (bodyMaxMass - bodyMinMass) + bodyMinMass;\n\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * (bodyMaxDistance - bodyMinDistance) + bodyMinDistance + star.radius + body.radius;\n      body.position = new Vec2(Math.cos(angle) * distance, Math.sin(angle) * distance);\n      body.velocity = body.position.perpendicular().normalize().mul(Math.sqrt(GRAVITY_CONSTANT * starMass / distance));\n      world.addBody(body);\n    }\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw an line on the screen.\n */\nexport class DrawLine {\n  /** Start of the line. */\n  public start: Vec2;\n  /** End of the line. */\n  public end: Vec2;\n  /** Color of the line. */\n  public color: Color;\n\n  /**\n   * @param start Start position of the line. \n   * @param end End position of the line.\n   * @param color Color of the line.\n   */\n  constructor(start: Vec2, end: Vec2, color: Color) {\n    this.start = start;\n    this.end = end;\n    this.color = color;\n  }\n}\n","import {Vec2} from '../math';\nimport {Color} from './color';\n\n/**\n * Represents a command used to draw a circle.\n */\nexport class DrawCircle {\n  /** Position of the circle center. */\n  public center: Vec2;\n  /** Radius of the circle. */\n  public radius: number;\n  /** Color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center Position of the circle center. \n   * @param radius Radius of the circle.\n   * @param color Color of the circle.\n   */\n  constructor(center: Vec2, radius: number, color: Color) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n  }\n}\n","import {Mat3, Vec2,} from '../math';\n\n/**\n * A view is a 2D camera that can be used to render a scene.\n */\nexport class View {\n  /** Transform matrix to apply while rendering. */\n  private transform: Mat3;\n\n  /** View position. */\n  private position: Vec2;\n\n  /** View scale. */\n  private _scale: number;\n\n  /** Aspect ratio. */\n  private aspectRatio: number;\n\n  /** Canvas width. */\n  private width: number;\n\n  /** Canvas height. */\n  private height: number;\n\n  /** Zoom change callback. */\n  private onZoomChangeCallback: () => void;\n\n  // Default constructor\n  constructor(width: number, height: number) {\n    this.position = new Vec2(0.0, 0.0);\n    this._scale = 1.0;\n    this.aspectRatio = height / width;\n    this.width = width;\n    this.height = height;\n    this.updateTransform();\n    this.onZoomChangeCallback = () => {};\n  }\n\n  /**\n   * Gets the transform matrix.\n   * @returns The transform matrix.\n   */\n  public getTransform(): Mat3 {\n    return this.transform;\n  }\n\n  /**\n   * Sets the view's position.\n   * @param position The new position.\n   */\n  public setPosition(position: Vec2): void {\n    this.position = position;\n    this.updateTransform();\n  }\n\n  /**\n   * Sets the view's scale.\n   */\n  public set scale(scale: number) {\n    this._scale = scale;\n    this.updateTransform();\n    this.onZoomChangeCallback();\n  }\n\n  /**\n   * Gets the view's scale.\n   */\n  public get scale(): number {\n    return this._scale;\n  }\n\n  /**\n   * Moves the view by a given amount.\n   * @param delta The amount to move.\n   */\n  public move(delta: Vec2): void {\n    this.setPosition(this.position.add(delta.div(this.scale)));\n  }\n\n  /**\n   * Zooms the view in.\n   * @param factor The zoom factor.\n   */\n  public zoom(multiplier: number): void {\n    this.scale /= multiplier;\n  }\n\n  /**\n   * Converts from screen coordinates to world coordinates.\n   * @param screen The screen coordinates.\n   * @return The world coordinates.\n   */\n  public screenToWorld(screen: Vec2): Vec2 {\n    let normalized = new Vec2(screen.x / this.width, screen.y / this.height);\n    normalized = normalized.sub(new Vec2(0.5, 0.5)).mul(2.0);\n    normalized.y *= -1.0;\n    return this.transform.inverse().mul(normalized);\n  }\n\n  /**\n   * Sets the zoom change callback.\n   * @param callback The callback.\n   */\n  public setOnZoomChange(callback: () => void): void {\n    this.onZoomChangeCallback = callback;\n  }\n\n  /**\n   * Updates the transform matrix.\n   */\n  private updateTransform(): void {\n    const translation = Mat3.translation(new Vec2(this.position.x, this.position.y));\n    const scale = Mat3.scale(new Vec2(this.scale * this.aspectRatio, this.scale));\n    this.transform = translation.mul(scale);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\nimport {Color} from './color';\nimport {DrawLine} from './draw_line';\nimport {DrawCircle} from './draw_circle';\nimport {View} from './view';\n\nexport {View};\n\ntype DrawCommand = DrawCircle|DrawLine;\n\n/** Background color of the application. */\nconst BACKGROUND_COLOR: Color = new Color(0.05, 0.05, 0.05);\n\n/** Number of divisions used for drawing circles. */\nconst CIRCLE_DIVISIONS: number = 32;\n\n/** Line thickness scale. */\nconst LINE_THICKNESS_SCALE = 0.01;\n\n/** Arrow head scale. */\nconst ARROW_HEAD_SCALE: number = 0.02;\n\n/**\n * Class used to render the app.\n */\nexport class Renderer {\n  /** Draw commands. */\n  private commands: DrawCommand[];\n\n  /** View used. */\n  public view: View;\n\n  /** HTML canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** WebGL context. */\n  private context: WebGLRenderingContext;\n\n  /** Vertex shader used for drawing. */\n  private vertexShader: WebGLShader;\n\n  /** Fragment shader used for drawing. */\n  private fragmentShader: WebGLShader;\n\n  /** Shader program used for drawing. */\n  private program: WebGLProgram;\n\n  /** Shader program position attribute location. */\n  private positionAttribute: number;\n\n  /** Shader program transform uniform location. */\n  private transformUniform: WebGLUniformLocation;\n\n  /** Shader program color uniform location. */\n  private colorUniform: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing. */\n  private vertexBuffer: WebGLBuffer;\n\n  /** Circle first vertice and vertex count. */\n  private circle: [number, number];\n\n  /** Line first vertice and vertex count. */\n  private line: [number, number];\n\n  /**\n   * @param canvas Canvas to use.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.commands = [];\n\n    // Get the WebGL context.\n    this.canvas = canvas;\n    this.context = this.canvas.getContext('webgl')!;\n\n    // Initialize shaders and vertex buffers.\n    this.initShaders();\n    this.initVertexBuffers();\n\n    // Initialize view.\n    this.view = new View(this.canvas.width, this.canvas.height);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.commands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Draws a line.\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param color The color of the line.\n   */\n   public drawLine(start: Vec2, end: Vec2, color: Color): void {\n    this.commands.push(new DrawLine(start, end, color));\n  }\n\n  /**\n   * Draws an arrow.\n   * @param start The start of the arrow.\n   * @param end The end of the arrow.\n   * @param color The color of the arrow.\n   */\n  public drawArrow(start: Vec2, end: Vec2, color: Color): void {\n    const offset = end.sub(start);\n    const perpendicular = offset.perpendicular();\n    const diagonal1 = offset.add(perpendicular).normalize();\n    const diagonal2 = offset.sub(perpendicular).normalize();\n    this.drawLine(start, end, color);\n    this.drawLine(end, end.add(diagonal1.mul(-ARROW_HEAD_SCALE / this.view.scale)), color)\n    this.drawLine(end, end.add(diagonal2.mul(-ARROW_HEAD_SCALE / this.view.scale)), color)\n  }\n\n  /**\n   * Flushes the renderer, showing the current state of the app.\n   */\n  public flush(): void {\n    // Clear the screen with the background color.\n    this.context.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1.0);\n    this.context.clear(this.context.COLOR_BUFFER_BIT);\n\n    // Execute all draw commands.\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.vertexAttribPointer(this.positionAttribute, 2, this.context.FLOAT, false, 0, 0);\n    this.context.enableVertexAttribArray(this.positionAttribute);\n    this.context.useProgram(this.program);\n\n    for (let command of this.commands) {\n      if (command instanceof DrawCircle) {\n        const translation = Mat3.translation(command.center);\n        const scale = Mat3.scale(new Vec2(command.radius, command.radius));\n        const transform = scale.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.circle[0], this.circle[1]);\n      } else if (command instanceof DrawLine) {\n        const translation = Mat3.translation(command.start);\n        const direction = command.end.sub(command.start);\n        const rotation = Mat3.rotation(Math.atan2(direction.y, direction.x) + Math.PI);\n        const transform = rotation.mul(translation).mul(this.view.getTransform());\n\n        this.context.uniformMatrix3fv(this.transformUniform, false, transform.elements);\n        this.context.uniform3f(this.colorUniform, command.color.r, command.color.g, command.color.b);\n        this.context.drawArrays(this.context.TRIANGLE_FAN, this.line[0], this.line[1]);\n      }\n    }\n\n    this.commands = [];\n  }\n\n  /**\n   * Initializes shaders used for drawing.\n   */\n  private initShaders(): void {\n    // Create vertex shader.\n    this.vertexShader = this.context.createShader(this.context.VERTEX_SHADER)!;\n    this.context.shaderSource(this.vertexShader, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec2 transformed = (transform * vec3(position, 1.0)).xy;\n        gl_Position = vec4(transformed, 0.0, 1.0);\n      }\n    `);\n    this.context.compileShader(this.vertexShader);\n\n    // Create fragment shader.\n    this.fragmentShader = this.context.createShader(this.context.FRAGMENT_SHADER)!;\n    this.context.shaderSource(this.fragmentShader, `\n      uniform mediump vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n    this.context.compileShader(this.fragmentShader);\n\n    // Create shader program.\n    this.program = this.context.createProgram()!;\n    this.context.attachShader(this.program, this.vertexShader);\n    this.context.attachShader(this.program, this.fragmentShader);\n    this.context.linkProgram(this.program);\n\n    // Get shader program attribute locations.\n    this.positionAttribute = this.context.getAttribLocation(this.program, 'position');\n\n    // Get shader program uniform locations.\n    this.transformUniform = this.context.getUniformLocation(this.program, 'transform')!;\n    this.colorUniform = this.context.getUniformLocation(this.program, 'color')!;\n  }\n\n  /**\n   * Initializes vertex buffers used for drawing.\n   */\n  private initVertexBuffers(): void {\n    // Generate circle vertices\n    this.circle = [0, CIRCLE_DIVISIONS + 2];\n    let vertices: number[] = [];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      let angle = i / CIRCLE_DIVISIONS * Math.PI * 2;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate line vertices\n    this.line = [vertices.length / 2, 4];\n    vertices.push(-LINE_THICKNESS_SCALE, 0.0);\n    vertices.push(-LINE_THICKNESS_SCALE, 1.0);\n    vertices.push(+LINE_THICKNESS_SCALE, 1.0);\n    vertices.push(+LINE_THICKNESS_SCALE, 0.0);\n    \n    // Generate vertex buffer\n    this.vertexBuffer = this.context.createBuffer()!;\n    this.context.bindBuffer(this.context.ARRAY_BUFFER, this.vertexBuffer);\n    this.context.bufferData(this.context.ARRAY_BUFFER, new Float32Array(vertices), this.context.STATIC_DRAW);\n  }\n}\n","import {Vec2} from '../math';\nimport {Renderer} from '../renderer';\n\n/**\n * Generic tool class.\n */\nexport abstract class Tool {\n  /**\n   * Called when the tool is activated.\n   */\n  public abstract activate(): void;\n\n  /**\n   * Called every frame to draw tool related stuff.\n   * @param renderer The renderer to draw to.\n   */\n  public abstract draw(renderer: Renderer): void;\n\n  /**\n   * Called when the mouse button is pressed.\n   * @param position Mouse position.\n   */\n  public abstract onMouseDown(position: Vec2): void;\n\n  /**\n   * Called when the mouse button is released.\n   * @param position Mouse position.\n   */\n  public abstract onMouseUp(position: Vec2): void;\n\n  /**\n   * Called when the mouse is moved.\n   * @param position Mouse position.\n   */\n  public abstract onMouseMove(position: Vec2): void;\n}\n","import {Body} from '../body';\nimport {Vec2} from '../math';\nimport {Renderer, View} from '../renderer';\nimport * as UI from '../ui';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/** Velocity multiplier for throwing bodies. */\nconst VELOCITY_MULTIPLIER = 0.0004;\n\n/**\n * Tool for adding bodies to the world.\n */\nexport class BodyAdder extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /** Slider which indicates the body's mass. */\n  private mass: UI.Slider;\n\n  /** Body being added. */\n  private body: Body;\n\n  /** Mouse down position. */\n  private mouseDown: Vec2|null;\n\n  /** Mouse position. */\n  private mousePos: Vec2;\n\n  /** Has the mouse moved? */\n  private mouseMoved: boolean;\n\n  /**\n   * @param world The world to add bodies to.\n   * @param view The view being used to render.\n   * @param mass The slider which indicates the body's mass.\n   */\n  constructor(world: World, view: View, mass: UI.Slider) {\n    super();\n    this.world = world;\n    this.view = view;\n    this.mass = mass;\n  }\n\n  public override activate(): void {\n    this.body = new Body();\n    this.mouseDown = null;\n    this.mouseMoved = false;\n  }\n\n  public override draw(renderer: Renderer): void {\n    if (!this.mouseMoved) return;\n\n    this.body.mass = this.mass.value;\n    renderer.drawCircle(this.body.position, this.body.radius, this.body.color);\n    if (this.mouseDown) renderer.drawArrow(this.body.position, this.view.screenToWorld(this.mousePos), this.body.color);\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.body.position = this.view.screenToWorld(position);\n    this.mouseDown = position;\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    if (this.mouseDown) {\n      let delta = position.sub(this.mouseDown);\n      delta.y *= -1.0;\n      this.body.velocity = delta.mul(VELOCITY_MULTIPLIER / this.view.scale);\n      this.world.addBody(this.body);\n\n      this.mouseDown = null;\n      this.body = new Body();\n      this.body.position = this.view.screenToWorld(position);\n    }\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    this.mousePos = position;\n    if (!this.mouseDown) this.body.position = this.view.screenToWorld(this.mousePos);\n    this.mouseMoved = true;\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\nimport {World} from '../world';\n\nimport {Tool} from './tool';\n\n/**\n * Tool for removing bodies to the world.\n */\nexport class BodyRemover extends Tool {\n  /** World to add bodies to. */\n  private world: World;\n\n  /** View being used to render. */\n  private view: View;\n\n  /**\n   * @param world The world to remove bodies from.\n   * @param view The view being used to render.\n   */\n  constructor(world: World, view: View) {\n    super();\n    this.world = world;\n    this.view = view;\n  }\n\n  public override activate(): void {\n    // Do nothing.\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(_: Vec2): void {\n    // Do nothing.\n  }\n\n  public override onMouseUp(position: Vec2): void {\n    this.world.removeBody(this.view.screenToWorld(position));\n  }\n\n  public override onMouseMove(_: Vec2): void {\n    // Do nothing.\n  }\n}\n","import {Vec2} from '../math';\nimport {View} from '../renderer';\n\nimport {Tool} from './tool';\n\n/** Camera movement sensibility. */\nconst SENSIBILITY = 0.001;\n\n/**\n * Tool for moving the camera.\n */\nexport class CameraMover extends Tool {\n  /** View being used to render. */\n  private view: View;\n\n  /** Last mouse position. */\n  private lastPosition: Vec2|null;\n\n  /**\n   * @param view The view being used to render.\n   */\n  constructor(view: View) {\n    super();\n    this.view = view;\n  }\n\n  public override activate(): void {\n    this.lastPosition = null;\n  }\n\n  public override draw(): void {\n    // Do nothing.\n  }\n\n  public override onMouseDown(position: Vec2): void {\n    this.lastPosition = position;\n  }\n\n  public override onMouseUp(_: Vec2): void {\n    this.lastPosition = null;\n  }\n\n  public override onMouseMove(position: Vec2): void {\n    if (!this.lastPosition) return;\n\n    let delta = position.sub(this.lastPosition);\n    delta.y *= -1.0;\n    this.lastPosition = position;\n\n    this.view.move(delta.mul(SENSIBILITY));\n  }\n}\n","import {Vec2} from './math';\nimport * as Presets from './presets';\nimport {Renderer} from './renderer';\nimport * as Tools from './tools';\nimport * as UI from './ui';\nimport {World} from './world';\n\n/** Multiplier of the time step passed to the update functions. */\nconst TIME_SCALE = 0.000005;\n\n/**\n * Application class.\n */\nexport class App {\n  /** Renderer used by the app. */\n  private renderer: Renderer;\n\n  /** Physics world. */\n  private world: World;\n\n  /** Tools map. */\n  private tools: Map<string, Tools.Tool>;\n\n  /** Current tool. */\n  private tool: Tools.Tool|undefined;\n\n  /** Preset selector. */\n  private presetSelector: Presets.Selector;\n\n  /** Reset button. */\n  private resetButton: UI.Button;\n\n  /** Settings button. */\n  private settingsButton: UI.Button;\n\n  /** Zoom in button. */\n  private zoomInButton: UI.Button;\n\n  /** Zoom out button. */\n  private zoomOutButton: UI.Button;\n\n  /** Body adder toggle. */\n  private bodyAdderToggle: UI.Toggle;\n\n  /** Body remover toggle. */\n  private bodyRemoverToggle: UI.Toggle;\n\n  /** Camera mover toggle. */\n  private cameraMoverToggle: UI.Toggle;\n\n  /** Tools switch. */\n  private toolSwitch: UI.Switch;\n\n  /** Simulation speed slider. */\n  private simulationSpeed: UI.Slider;\n\n  /** New body mass slider. */\n  private bodyMass: UI.Slider;\n\n  /** Last mouse position. */\n  private mousePos: Vec2;\n\n  // Default constructor.\n  constructor() {\n    // Initialize canvas\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create renderer.\n    this.renderer = new Renderer(canvas);\n    this.renderer.view.setOnZoomChange(this.onMouseMove.bind(this));\n\n    // Create physics world.\n    this.world = new World();\n\n    // Add canvas UI events\n    canvas.addEventListener('mousedown', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseDown();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mouseup', e => {\n      if (e.button !== 0) return;\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseUp();\n      e.preventDefault();\n    });\n    canvas.addEventListener('mousemove', e => {\n      this.mousePos = new Vec2(e.offsetX, e.offsetY);\n      this.onMouseMove();\n      e.preventDefault();\n    });\n    canvas.addEventListener('wheel', (event: WheelEvent) => {\n      this.renderer.view.zoom(event.deltaY > 0 ? 1.1 : 0.9);\n      event.preventDefault();\n    });\n\n    // Initialize UI sliders\n    this.bodyMass =\n        new UI.Slider(document.getElementById('bodyMass') as HTMLDivElement, 0.1, 100000000.0, 1.0, 'exponential');\n    this.bodyMass.value = 1.0;\n    this.simulationSpeed =\n        new UI.Slider(document.getElementById('simulationSpeed') as HTMLDivElement, 0.01, 100.0, 1.0, 'exponential');\n    this.simulationSpeed.value = 1.0;\n\n    // Initialize UI buttons\n    this.resetButton = new UI.Button(document.getElementById('resetButton') as HTMLButtonElement);\n    this.settingsButton = new UI.Button(document.getElementById('settingsButton') as HTMLButtonElement);\n    this.zoomInButton = new UI.Button(document.getElementById('zoomInButton') as HTMLButtonElement);\n    this.zoomOutButton = new UI.Button(document.getElementById('zoomOutButton') as HTMLButtonElement);\n\n    // Initialize UI toggles\n    this.bodyAdderToggle = new UI.Toggle(document.getElementById('bodyAdderToggle') as HTMLButtonElement);\n    this.bodyRemoverToggle = new UI.Toggle(document.getElementById('bodyRemoverToggle') as HTMLButtonElement);\n    this.cameraMoverToggle = new UI.Toggle(document.getElementById('cameraMoverToggle') as HTMLButtonElement);\n\n    // Initialize tools\n    this.tools = new Map<string, Tools.Tool>();\n    this.tools.set('bodyAdder', new Tools.BodyAdder(this.world, this.renderer.view, this.bodyMass));\n    this.tools.set('bodyRemover', new Tools.BodyRemover(this.world, this.renderer.view));\n    this.tools.set('cameraMover', new Tools.CameraMover(this.renderer.view));\n    this.tool = undefined;\n\n    // Intiailize UI tool switch\n    this.toolSwitch = new UI.Switch();\n    this.toolSwitch.add('bodyAdder', this.bodyAdderToggle);\n    this.toolSwitch.add('bodyRemover', this.bodyRemoverToggle);\n    this.toolSwitch.add('cameraMover', this.cameraMoverToggle);\n    this.toolSwitch.setOnStateChange(tool => {\n      this.tool = this.tools.get(tool);\n      if (this.tool) this.tool.activate();\n    });\n\n    // Zoom callbacks\n    this.zoomInButton.setOnClick(() => {\n      this.renderer.view.zoom(0.75);\n    });\n    this.zoomOutButton.setOnClick(() => {\n      this.renderer.view.zoom(1.25);\n    });\n    \n    // Initialize preset selector\n    this.presetSelector = new Presets.Selector(this.world);\n    this.presetSelector.add(new Presets.Empty());\n    this.presetSelector.add(new Presets.SimpleStarSystem());\n    this.presetSelector.add(new Presets.CustomStarSystem());\n    this.presetSelector.finish('simpleStarSystem');\n    this.resetButton.setOnClick(() => {\n      this.world.clear();\n      this.presetSelector.apply();\n    });\n    this.settingsButton.setOnClick(() => {\n      if (this.presetSelector.open)\n        this.presetSelector.hide();\n      else\n        this.presetSelector.show();\n    });\n    this.presetSelector.apply();\n  }\n\n  /**\n   * Starts the application's main loop.\n   */\n  public start() {\n    this.animate(0.0);\n  }\n\n  /**\n   * Updates and draws the application.\n   * @param dt Time step in milliseconds.\n   */\n  private animate(dt: number): void {\n    this.world.update(this.simulationSpeed.value * dt * TIME_SCALE);\n\n    if (this.tool) this.tool.draw(this.renderer);\n    this.world.draw(this.renderer);\n    this.renderer.flush();\n\n    window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  /**\n   * Mouse down event listener.\n   * @param event The mouse event.\n   */\n  private onMouseDown(): void {\n    if (this.tool) this.tool.onMouseDown(this.mousePos);\n  }\n\n  /**\n   * Mouse up event listener.\n   * @param event The mouse event.\n   */\n  private onMouseUp(): void {\n    if (this.tool) this.tool.onMouseUp(this.mousePos);\n  }\n\n  /**\n   * Mouse move event listener.\n   * @param event The mouse event.\n   */\n  private onMouseMove(): void {\n    if (this.tool) this.tool.onMouseMove(this.mousePos);\n  }\n}\n","import {App} from './app/app';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.start();\n});\n"],"names":["$2141dd5f58d029d3$export$ac4bca90992eed1","constructor","x","y","this","add","v","sub","v1","mul","s","div","s1","dot","v2","sqrLength","length","Math","sqrt","normalize","perpendicular","$2141dd5f58d029d3$export$83f4edd572c84121","elements","Float32Array","other","result","i","j","sum","k","transpose","determinant","adjunt","els","inverse","det","Error","static","v3","v4","angle","c","cos","sin","$70aad102f272328a$export$3463c369d5cc977f","id","form","_id","_form","$978b179009f5dbc4$export$353f5b6fc5456de1","element","onClickCallback","addEventListener","_","setOnClick","callback","$cef218302c5f0c2e$export$472062a354075cee","slider","min","max","initial","type","_root","_input","querySelector","_display","_type","toString","value","step","log10","updateDisplay","bind","valueAsNumber","pow","innerText","toExponential","toFixed","$f48ef611b8f2db08$export$b5d5cf8927ab7262","state","toggles","stateChangeCallback","current","name","forEach","toggle","activated","name1","push","setOnActivated","onToggleActivated","setOnDeactivated","onToggleDeactivated","setOnStateChange","name2","name3","$716df50103fb11f0$export$bea8ebba691c5813","super","onActivatedCallback","onDeactivatedCallback","onClick","classList","callback1","$62cbb34c05d40bda$export$a7fed597f4b8afd8","root","_fields","Map","console","log","_cancel","_submit","document","addToggle","id1","HTMLButtonElement","set","addSwitch","id2","get","addSlider","id3","HTMLDivElement","show","hide","open","contains","isOn","id4","getValue","id5","getState","id6","setState","id7","setOnCancel","setOnSubmit","$a79f82db3f359dd2$export$d15f4cd5286f9b1e","world","_world","_presets","_selected","create","_open","preset","finish","map","p","onSelectionCanceled","onSelectionSubmitted","find","apply","clear","generate","onSettingsCanceled","onSettingsSubmitted","$70642532a4810a2c$export$1f74963c34e8bfec","$084e894a489e769c$export$892596cec99bc70e","r","g","b","a","mix","other1","multiplier","divider","random","$d437e96c5b648a02$export$4b2c32e08f77ff18","mass","position","velocity","color","_position","_velocity","_mass","_radius","PI","radius","applyForce","force","dt","applyImpulse","impulse","update","dt1","intersects","merge","colorA","colorB","$5dd98dba661ba3e2$export$812cd9544993280d","bodies","addBody","body","removeBody","splice","i1","body1","body2","offset","sqrDistance","i2","draw","renderer","drawCircle","$3a25dab873681161$export$ecebc671cacb07dd","star","distance","$afa225111809dba4$export$96fce99cf9fb7174","starMass","bodyCount","bodyMinMass","bodyMaxMass","bodyMinDistance","bodyMaxDistance","$c6eb6ba6d1196e46$export$2906bdf8b6c2d498","start","end","$63eb7f8ad7e82ce0$export$e15e3a5ae5c2b5b","center","$3f52eafd3bf5a097$export$27a5bd065ad55220","width","height","_scale","aspectRatio","updateTransform","onZoomChangeCallback","getTransform","transform","setPosition","scale","move","delta","zoom","screenToWorld","screen","normalized","setOnZoomChange","translation","$4e7f740962547f5e$var$BACKGROUND_COLOR","$4e7f740962547f5e$export$88530751e3977073","canvas","commands","context","getContext","initShaders","initVertexBuffers","view","drawLine","color1","drawArrow","start1","end1","color2","diagonal1","diagonal2","flush","clearColor","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttribute","FLOAT","enableVertexAttribArray","useProgram","program","command","uniformMatrix3fv","transformUniform","uniform3f","colorUniform","drawArrays","TRIANGLE_FAN","circle","direction","rotation","atan2","line","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getAttribLocation","getUniformLocation","$4e7f740962547f5e$var$CIRCLE_DIVISIONS","vertices","$5ef383d4445cbb93$export$724f6b867059ef5f","$f3eb87607daa86d7$export$4b6be7ec1f210ec9","activate","mouseDown","mouseMoved","mousePos","onMouseDown","onMouseUp","position1","onMouseMove","position2","$13cafb5802810351$export$26846ab24a403d03","_1","$17e906f5681ecd0b$export$1efad73e3d99c388","lastPosition","$b4bfc8ad905cb117$export$86fbec116b87613f","getElementById","window","innerWidth","innerHeight","e","button","offsetX","offsetY","preventDefault","event","deltaY","bodyMass","simulationSpeed","resetButton","settingsButton","zoomInButton","zoomOutButton","bodyAdderToggle","bodyRemoverToggle","cameraMoverToggle","tools","tool","undefined","toolSwitch","presetSelector","animate","requestAnimationFrame"],"version":3,"file":"index.e93d2d48.js.map"}